/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const games_index_1 = __webpack_require__(1);
	const AutoPeer_1 = __webpack_require__(4);
	const shims_1 = __webpack_require__(3);
	window.onload = () => {
	    const autoPeer = AutoPeer_1.default.Create("vxv7ldsv1h71ra4i");
	    const connect = document.getElementById("connect");
	    const gamesEl = document.getElementById("games");
	    const gameNames = Object.keys(games_index_1.default);
	    gameNames.forEach(name => {
	        const button = document.createElement("button");
	        button.textContent = name;
	        button.onclick = () => startGame(name);
	        gamesEl.appendChild(button);
	    });
	    startGame(gameNames.filter(g => g.indexOf("soccer") > -1)[0] || gameNames[0]);
	    function startGame(name) {
	        Array.from(gamesEl.querySelectorAll("button")).forEach((b) => b.disabled = (b.textContent === name));
	        const disconnection = autoPeer.disconnect();
	        const oldCanvas = document.querySelector("canvas");
	        const newCanvas = document.createElement("canvas");
	        oldCanvas.parentNode.replaceChild(newCanvas, oldCanvas);
	        const game = new games_index_1.default[name]();
	        Array.from(oldCanvas.attributes).forEach(attr => newCanvas.setAttribute(attr.name, attr.value));
	        ["recommended_width", "recommended_height"].forEach(prop => {
	            if (game[prop]) {
	                newCanvas.setAttribute(prop.replace("recommended_", ""), game[prop]);
	            }
	        });
	        connect.onclick = () => __awaiter(this, void 0, void 0, function* () {
	            yield disconnection;
	            autoPeer.connect();
	        });
	        shims_1.Applet.prototype.start.call(game);
	        document.title = name;
	    }
	};


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	const footyslime_afl_1 = __webpack_require__(2);
	const footyslime_nrl_1 = __webpack_require__(5);
	const oneslime_one_1 = __webpack_require__(6);
	const slimegames_balance_1 = __webpack_require__(7);
	const slimegames_basketball_1 = __webpack_require__(8);
	const slimegames_bowling_1 = __webpack_require__(9);
	const slimegames_boxing_1 = __webpack_require__(10);
	const slimegames_cricket_1 = __webpack_require__(11);
	const slimegames_cricket2_1 = __webpack_require__(12);
	const slimegames_dodgeball_1 = __webpack_require__(13);
	const slimegames_hockey_1 = __webpack_require__(14);
	const slimegames_rugby_1 = __webpack_require__(15);
	const slimegames_soccer_1 = __webpack_require__(16);
	const slimegames_soccer_elastic_1 = __webpack_require__(17);
	const slimegames_soccer_space_1 = __webpack_require__(18);
	const slimegames_soccer_three_1 = __webpack_require__(19);
	const slimegames_volleyball_2004_1 = __webpack_require__(20);
	const slimegames_volleyball_flying_1 = __webpack_require__(21);
	const slimegames_volleyball_four_1 = __webpack_require__(22);
	const slimegames_volleyball_original_1 = __webpack_require__(23);
	const slimegames_volleyball_power_1 = __webpack_require__(24);
	const slimegames_volleyball_two_1 = __webpack_require__(25);
	const slimegames_waterpolo_1 = __webpack_require__(26);
	const slimetennis_1 = __webpack_require__(27);
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = { footyslime_afl: footyslime_afl_1.default, footyslime_nrl: footyslime_nrl_1.default, oneslime_one: oneslime_one_1.default, slimegames_balance: slimegames_balance_1.default, slimegames_basketball: slimegames_basketball_1.default, slimegames_bowling: slimegames_bowling_1.default, slimegames_boxing: slimegames_boxing_1.default, slimegames_cricket: slimegames_cricket_1.default, slimegames_cricket2: slimegames_cricket2_1.default, slimegames_dodgeball: slimegames_dodgeball_1.default, slimegames_hockey: slimegames_hockey_1.default, slimegames_rugby: slimegames_rugby_1.default, slimegames_soccer: slimegames_soccer_1.default, slimegames_soccer_elastic: slimegames_soccer_elastic_1.default, slimegames_soccer_space: slimegames_soccer_space_1.default, slimegames_soccer_three: slimegames_soccer_three_1.default, slimegames_volleyball_2004: slimegames_volleyball_2004_1.default, slimegames_volleyball_flying: slimegames_volleyball_flying_1.default, slimegames_volleyball_four: slimegames_volleyball_four_1.default, slimegames_volleyball_original: slimegames_volleyball_original_1.default, slimegames_volleyball_power: slimegames_volleyball_power_1.default, slimegames_volleyball_two: slimegames_volleyball_two_1.default, slimegames_waterpolo: slimegames_waterpolo_1.default, slimetennis: slimetennis_1.default };


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class Slime2P extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 750;
	        this.recommended_height = 375;
	        this.scoringRunForSuper = 6;
	        this.nightTime = false;
	        this.psycho = false;
	        this.backwards = false;
	        this.timer = false;
	        this.buffered = false;
	        this.nyt = "night";
	        this.psy = "super";
	        this.bck = "toast";
	        this.tim = "clock";
	        this.bal = "ball!";
	        this.wnd = "windy";
	        this.hl2 = "2mins";
	        this.hl3 = "3mins";
	        this.hl4 = "4mins";
	        this.hl5 = "5mins";
	        this.bfr = "uffer";
	        this.GAME_LENGTH = 120000;
	        this.HOLDING_LENGTH = 5000;
	        this.holdingOn = true;
	        this.windOn = false;
	        this.maxWind = 30;
	        this.NUM_PARTICLES = 60;
	        this.particle_size = 3;
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1X = 0;
	        this.p1Y = 0;
	        this.p2X = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldX = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Fire = false;
	        this.fP2Fire = false;
	        this.superFlash = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.fP1Touches = 0;
	        this.fP2Touches = 0;
	        this.fP1TouchesTot = 0;
	        this.fP2TouchesTot = 0;
	        this.fP1Clangers = 0;
	        this.fP2Clangers = 0;
	        this.fP1Aces = 0;
	        this.fP2Aces = 0;
	        this.fP1Winners = 0;
	        this.fP2Winners = 0;
	        this.fP1PointsWon = 0;
	        this.fP2PointsWon = 0;
	        this.fP1HitStill = false;
	        this.fP2HitStill = false;
	        this.fP1Frames = 0;
	        this.fP2Frames = 0;
	        this.fP1Super = 0;
	        this.fP2Super = 0;
	        this.fP1Streak = 0;
	        this.fP2Streak = 0;
	        this.fSelectedColours = false;
	        this.fServerMoved = false;
	        this.hitNetSinceTouched = false;
	        this.nPlayOnFrames = 0;
	        this.fEndGame = false;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.realStartTime = 0;
	        this.crossedNetTime = 0;
	        this.scoringRun = 0;
	        this.oldScoringRun = 0;
	        this.firstHalf = false;
	        this.wind = 0;
	        this.floor = 0;
	        this.particle_x = new Array(this.NUM_PARTICLES);
	        this.particle_y = new Array(this.NUM_PARTICLES);
	        this.particle_weight = new Array(this.NUM_PARTICLES);
	        this.floor = 280;
	    }
	    init() {
	        this.SKY_COL = new shims_1.Color(85, 85, 255);
	        this.COURT_COL = new shims_1.Color(0, 168, 0);
	        this.BALL_COL = shims_1.Color.fromString("yellow");
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.promptMsg = "Click the mouse to play...";
	        this.screen = this.getGraphics();
	        this.baseFont = this.screen.getFont();
	        this.screen.setFont(new shims_1.Font(this.baseFont.getName(), 1, 15));
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 6]);
	        this.firstHalf = true;
	        for (var var1 = 0; var1 < this.NUM_PARTICLES; ++var1) {
	            this.particle_x[var1] = ((Math.random() * this.nWidth) | 0);
	            this.particle_y[var1] = ((-Math.random() * 50.0) | 0);
	            this.particle_weight[var1] = (Math.random() * 0.95 + 0.05);
	        }
	        this.slimeColText = ["West Coast Slime ", "Anchor Slime ", "Alpha Centauri Slime ", "Eddie McSlimer ", "Yellow and Black Slime ", "Bomber Slime ", "Navy Blue Slime ", "Hawthorn Slime ", "Ford Factory Slime ", "Sydney Slime ", "Demon Slime ", "Camry Slime ", "Saint Slimer ", "Western Bullslime ", "Brisbane Slime ", "Slime Power "];
	        this.slimeColours = [new shims_1.Color(0, 0, 135), new shims_1.Color(0, 40, 90), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), new shims_1.Color(0, 0, 60), new shims_1.Color(255, 255, 0), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(0, 0, 60), shims_1.Color.fromString("black"), shims_1.Color.fromString("red"), new shims_1.Color(0, 0, 160), new shims_1.Color(160, 60, 60), shims_1.Color.fromString("black")];
	        this.slimeColours2 = [shims_1.Color.fromString("yellow"), shims_1.Color.fromString("white"), new shims_1.Color(30, 30, 255), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(142, 32, 32), new shims_1.Color(0, 0, 100), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("black"), shims_1.Color.fromString("red"), new shims_1.Color(20, 20, 255), new shims_1.Color(140, 180, 195)];
	        this.field_rn_Slime2P_pw_1 = (".....").split('');
	        this.buffer = this.createImage(this.nWidth, this.nHeight);
	        if (this.buffered) {
	            this.buffered = false;
	            for (var var2 = 0; var2 < this.bfr.length; ++var2) {
	                this.pwAddChar(/* toCharArray */ (this.bfr).split('')[var2]);
	            }
	        }
	    }
	    paint(var1) {
	        var var2 = this.buffered ? this.buffer.getGraphics() : this.getGraphics();
	        var2.setColor(this.SKY_COL);
	        var2.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        var2.setColor(this.COURT_COL);
	        var2.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        var2.setColor(shims_1.Color.fromString("white"));
	        var2.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	        this.drawScores();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var var3 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fP1PointsWon + this.fP2PointsWon > 0) {
	                if (this.firstHalf) {
	                    this.screen.drawString("AFL Slime Volleyball!", (this.nWidth / 2 | 0) - (var3.stringWidth("AFL Slime Volleyball!") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 5);
	                }
	                var2.setColor(shims_1.Color.fromString("white"));
	                var3 = var2.getFontMetrics();
	                if (!this.firstHalf) {
	                    var2.drawString("First half stats:", (this.nWidth / 2 | 0) - (var3.stringWidth("First half stats:") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 4);
	                }
	                else {
	                    var2.drawString("Last game\'s stats:", (this.nWidth / 2 | 0) - (var3.stringWidth("Last game\'s stats:") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 4);
	                }
	                var var4 = ["Possession", "Touches", "Points won", "Winners", "Aces", "Clangers", "Super Slimes", "Longest streak"];
	                var var5 = [[Math.round(100 * this.fP1Frames / (this.fP1Frames + this.fP2Frames)) + "%", new String(this.fP1TouchesTot).toString(), new String(this.fP1PointsWon).toString(), new String(this.fP1Winners).toString(), new String(this.fP1Aces).toString(), new String(this.fP1Clangers).toString(), new String(this.fP1Super).toString(), new String(this.fP1Streak).toString()], [100 - Math.round(100 * this.fP1Frames / (this.fP1Frames + this.fP2Frames)) + "%", new String(this.fP2TouchesTot).toString(), new String(this.fP2PointsWon).toString(), new String(this.fP2Winners).toString(), new String(this.fP2Aces).toString(), new String(this.fP2Clangers).toString(), new String(this.fP2Super).toString(), new String(this.fP2Streak).toString()]];
	                var var6 = 0;
	                for (var var7 = 0; var7 < var4.length; ++var7) {
	                    var6 = Math.max(var6, var3.stringWidth(var4[var7]));
	                }
	                for (var var8 = 0; var8 < var4.length; ++var8) {
	                    var2.drawString(var4[var8], (this.nWidth / 2 | 0) - (var3.stringWidth(var4[var8]) / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * (var8 - 2));
	                    var2.drawString(var5[0][var8], (this.nWidth / 2 | 0) - var6 - (var3.stringWidth(var5[0][var8]) / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * (var8 - 2));
	                    var2.drawString(var5[1][var8], (this.nWidth / 2 | 0) + var6 - (var3.stringWidth(var5[1][var8]) / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * (var8 - 2));
	                }
	                this.drawPrompt(!this.firstHalf ? "Swap sides and click the mouse to continue..." : "Click the mouse to start another game!", 0);
	            }
	            else {
	                this.screen.drawString("AFL Slime Volleyball!", (this.nWidth / 2 | 0) - (var3.stringWidth("AFL Slime Volleyball!") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight());
	                var2.setColor(shims_1.Color.fromString("white"));
	                var3 = var2.getFontMetrics();
	                var2.drawString("Code base by Quin Pendragon", (this.nWidth / 2 | 0) - (var3.stringWidth("Code base by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * 2);
	                var2.drawString("Mod by Daniel Wedge", (this.nWidth / 2 | 0) - (var3.stringWidth("Mod by Daniel Wedge") / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * 3);
	                var2.drawString("Wind particles by Tim Lightfoot", (this.nWidth / 2 | 0) - (var3.stringWidth("Wind particles by Tim Lightfoot") / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * 4);
	            }
	        }
	        if (this.buffered) {
	            var1.drawImage(this.buffer, 0, 0, this);
	        }
	    }
	    handleEvent(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((var1.id)) {
	                case 401:
	                case 403:
	                    if (!this.fEndGame) {
	                        if (!this.fSelectedColours) {
	                            this.pwAddChar(String.fromCharCode(var1.key));
	                        }
	                        switch ((var1.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                break;
	                            case 65:
	                            case 97:
	                                if (!this.backwards) {
	                                    this.moveP1Left();
	                                }
	                                else {
	                                    this.moveP1Right();
	                                }
	                                break;
	                            case 68:
	                            case 100:
	                                if (!this.backwards) {
	                                    this.moveP1Right();
	                                }
	                                else {
	                                    this.moveP1Left();
	                                }
	                                break;
	                            case 73:
	                            case 105:
	                                this.moveP2Jump();
	                                break;
	                            case 74:
	                            case 106:
	                                if (!this.backwards) {
	                                    this.moveP2Left();
	                                }
	                                else {
	                                    this.moveP2Right();
	                                }
	                                break;
	                            case 75:
	                            case 107:
	                                if (!this.fSelectedColours) {
	                                    this.changeP2Col();
	                                }
	                                break;
	                            case 76:
	                            case 108:
	                                if (!this.backwards) {
	                                    this.moveP2Right();
	                                }
	                                else {
	                                    this.moveP2Left();
	                                }
	                                break;
	                            case 83:
	                            case 115:
	                                if (!this.fSelectedColours) {
	                                    this.changeP1Col();
	                                }
	                                break;
	                            case 87:
	                            case 119:
	                                this.moveP1Jump();
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((var1.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV * (this.backwards ? -1 : 1) < 0) {
	                                this.moveP1Stop();
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV * (this.backwards ? -1 : 1) > 0) {
	                                this.moveP1Stop();
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                            if (this.p2XV * (this.backwards ? -1 : 1) < 0) {
	                                this.moveP2Stop();
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                            if (this.p2XV * (this.backwards ? -1 : 1) > 0) {
	                                this.moveP2Stop();
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 200;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.hitNetSinceTouched = false;
	                        this.promptMsg = "";
	                        this.repaint();
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    else if (!this.fSelectedColours) {
	                        this.fInPlay = true;
	                        this.replayStart = 0;
	                        this.replayPos = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 200;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.hitNetSinceTouched = false;
	                        this.promptMsg = "";
	                        this.nPlayOnFrames = -1;
	                        this.fP1Touched = false;
	                        this.fP2Touched = false;
	                        this.fServerMoved = false;
	                        this.drawPrompt();
	                        this.DrawStatus();
	                        this.repaint();
	                        this.startTime = shims_1.System.currentTimeMillis();
	                        this.realStartTime = this.startTime;
	                        this.fSelectedColours = true;
	                    }
	                    break;
	                case 503:
	                    this.showStatus("AFL Slime Volleyball!");
	            }
	            return false;
	        });
	    }
	    pwAddChar(var1) {
	        for (var var2 = 0; var2 < 4; this.field_rn_Slime2P_pw_1[var2++] = this.field_rn_Slime2P_pw_1[var2]) {
	        }
	        this.field_rn_Slime2P_pw_1[4] = var1;
	        var var3 = (new String(this.field_rn_Slime2P_pw_1)).toLowerCase();
	        var var4 = false;
	        if ((var3 === this.nyt)) {
	            var4 = true;
	            this.nightTime = !this.nightTime;
	            this.SKY_COL = this.nightTime ? new shims_1.Color(0, 0, 70) : new shims_1.Color(85, 85, 255);
	            this.COURT_COL = this.nightTime ? new shims_1.Color(0, 100, 0) : new shims_1.Color(0, 168, 0);
	            this.BALL_COL = this.nightTime ? shims_1.Color.fromString("white") : shims_1.Color.fromString("yellow");
	            this.repaint();
	            this.promptMsg = this.nightTime ? "... and the lights come on at Slime Stadium!" : "The Slime Sun has risen!";
	        }
	        else if ((var3 === this.psy)) {
	            var4 = true;
	            this.psycho = !this.psycho;
	            this.promptMsg = this.psycho ? "Can\'t get to the ball fast enough?" : "Can\'t handle the pace?";
	        }
	        else if ((var3 === this.bck)) {
	            var4 = true;
	            this.backwards = !this.backwards;
	            this.promptMsg = this.backwards ? "Slime God Clive blesses you!" : "Don\'t like challenges, huh?";
	        }
	        else if ((var3 === this.tim)) {
	            var4 = true;
	            this.timer = !this.timer;
	            this.promptMsg = this.timer ? "Don\'t like the uncertainty of time on? Pathetic." : "Welcome back from the other side.";
	        }
	        else if ((var3 === this.bal)) {
	            var4 = true;
	            this.holdingOn = !this.holdingOn;
	            this.promptMsg = !this.holdingOn ? "So you like to play with yourself, hey?" : "That\'s more like it. This is a TWO player game!";
	        }
	        else if ((var3 === this.wnd)) {
	            var4 = true;
	            this.windOn = !this.windOn;
	            this.promptMsg = !this.windOn ? "Can\'t handle the challenge?" : "Yeah, wind is good.";
	            if (!this.windOn) {
	                this.unDrawParticles();
	            }
	        }
	        else if ((var3 === this.bfr)) {
	            var4 = true;
	            this.buffered = !this.buffered;
	            this.screen = this.buffered ? this.buffer.getGraphics() : this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.baseFont.getName(), 1, 15));
	            if (this.fInPlay) {
	                this.promptMsg = this.buffered ? "Double buffering is on." : "Do not adjust your set... the Slimes are flickery.";
	            }
	        }
	        else if ((var3 === this.hl2)) {
	            var4 = true;
	            this.GAME_LENGTH = 120000;
	            this.promptMsg = "Halves now two minutes long.";
	        }
	        else if ((var3 === this.hl3)) {
	            var4 = true;
	            this.GAME_LENGTH = 180000;
	            this.promptMsg = "Halves now three minutes long.";
	        }
	        else if ((var3 === this.hl4)) {
	            var4 = true;
	            this.GAME_LENGTH = 240000;
	            this.promptMsg = "Halves now four minutes long.";
	        }
	        else if ((var3 === this.hl5)) {
	            var4 = true;
	            this.GAME_LENGTH = 300000;
	            this.promptMsg = "Halves now five minutes long.";
	        }
	        if (var4) {
	            this.nPlayOnFrames = 49;
	            this.fServerMoved = true;
	            this.drawPrompt();
	        }
	    }
	    moveP1Left() {
	        this.p1XV = this.scoringRun > -6 && !this.psycho ? -8 : -16;
	        if (this.p1X === 200 && this.ballX === 200 && !this.fP2Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	            if (this.fSelectedColours) {
	                this.nPlayOnFrames = 50;
	            }
	        }
	    }
	    moveP1Right() {
	        this.p1XV = this.scoringRun > -6 && !this.psycho ? 8 : 16;
	        if (this.p1X === 200 && this.ballX === 200 && !this.fP2Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	            if (this.fSelectedColours) {
	                this.nPlayOnFrames = 50;
	            }
	        }
	    }
	    moveP1Stop() {
	        this.p1XV = 0;
	    }
	    moveP1Jump() {
	        if (this.p1Y === 0) {
	            this.p1YV = this.scoringRun > -6 && !this.psycho ? 31 : 45;
	        }
	    }
	    changeP1Col() {
	        do {
	            this.p1Col = (this.p1Col + 1) % 16;
	            this.changeCols();
	        } while ((this.p1Col === this.p2Col));
	    }
	    moveP2Left() {
	        this.p2XV = this.scoringRun < 6 && !this.psycho ? -8 : -16;
	        if (this.p2X === 800 && this.ballX === 800 && !this.fP1Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	            if (this.fSelectedColours) {
	                this.nPlayOnFrames = 50;
	            }
	        }
	    }
	    moveP2Right() {
	        this.p2XV = this.scoringRun < 6 && !this.psycho ? 8 : 16;
	        if (this.p2X === 800 && this.ballX === 800 && !this.fP1Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	            if (this.fSelectedColours) {
	                this.nPlayOnFrames = 50;
	            }
	        }
	    }
	    moveP2Stop() {
	        this.p2XV = 0;
	    }
	    moveP2Jump() {
	        if (this.p2Y === 0) {
	            this.p2YV = this.scoringRun < 6 && !this.psycho ? 31 : 45;
	        }
	    }
	    changeP2Col() {
	        do {
	            this.p2Col = (this.p2Col + 1) % 16;
	            this.changeCols();
	        } while ((this.p2Col === this.p1Col));
	    }
	    changeCols() {
	        if ((this.p1Col !== 2 || this.p2Col !== 3) && (this.p1Col !== 3 || this.p2Col !== 2)) {
	            if ((this.p1Col !== 6 || this.p2Col !== 11) && (this.p1Col !== 11 || this.p2Col !== 6)) {
	                this.slimeColText[2] = "Alpha Centauri Slime ";
	                this.slimeColours2[2] = new shims_1.Color(30, 30, 255);
	                this.slimeColText[6] = "Navy Blue Slime ";
	                this.slimeColours[6] = new shims_1.Color(0, 0, 60);
	            }
	            else {
	                this.slimeColText[6] = "Light Blue Slime ";
	                this.slimeColours[6] = new shims_1.Color(30, 30, 255);
	            }
	        }
	        else {
	            this.slimeColText[2] = "Orangeroo Slime ";
	            this.slimeColours2[2] = shims_1.Color.fromString("orange");
	        }
	    }
	    MoveSlimers() {
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 445) {
	            this.p1X = 445;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.scoringRun > -6 && !this.psycho ? 2 : 4;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 555) {
	            this.p2X = 555;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.scoringRun < 6 && !this.psycho ? 2 : 4;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    DrawSlimers() {
	        var var1 = (this.nWidth / 10 | 0);
	        var var2 = (this.nHeight / 10 | 0);
	        var var3 = (this.nWidth / 50 | 0);
	        var var4 = (this.nHeight / 25 | 0);
	        var var5 = (this.ballX * this.nWidth / 1000 | 0);
	        var var6 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var var7 = (this.p1OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var var8 = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.SKY_COL);
	        this.screen.fillRect(var7, var8, var1, var2);
	        var7 = (this.p2OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.SKY_COL);
	        this.screen.fillRect(var7, var8, var1, var2);
	        this.MoveBall();
	        var7 = (this.p1X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.fP1Fire = this.scoringRun <= -6 || this.psycho;
	        this.fP2Fire = this.scoringRun >= 6 || this.psycho;
	        if (this.fP1Fire || this.fP2Fire || this.psycho) {
	            this.superFlash = !this.superFlash;
	        }
	        this.DrawStrip(this.screen, var7, var8, var1, var2, this.p1Col);
	        var var9 = this.p1X + 38;
	        var var10 = this.p1Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var var11 = var7 - var5;
	        var var12 = var8 - var6;
	        var var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	        if (var13 > 0) {
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	        }
	        var7 = (this.p2X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.DrawStrip(this.screen, var7, var8, var1, var2, this.p2Col);
	        var9 = this.p2X - 18;
	        var10 = this.p2Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var11 = var7 - var5;
	        var12 = var8 - var6;
	        var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	        if (var13 > 0) {
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	        }
	        if (Math.abs(this.scoringRun) < 6 && !this.psycho) {
	            this.superFlash = false;
	        }
	    }
	    DrawStrip(var1, var2, var3, var4, var5, var6) {
	        var var7 = false;
	        if (var6 === this.p1Col && (this.fP1Fire || this.psycho) || var6 === this.p2Col && (this.fP2Fire || this.psycho)) {
	            var7 = this.superFlash;
	        }
	        var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);
	        var1.fillArc(var2, var3, var4, 2 * var5, 0, 180);
	        var1.setColor(var7 ? this.slimeColours[var6] : this.slimeColours2[var6]);
	        switch ((var6)) {
	            case 0:
	            case 12:
	                var1.fillArc(var2, var3, var4, 2 * var5, 0, 90);
	                var1.setColor(shims_1.Color.fromString("white"));
	                var1.fillPolygon(new shims_1.Polygon([var2 + (var4 / 3 | 0), var2 + (2 * var4 / 3 | 0), var2 + (2 * var4 / 3 | 0), var2 + (var4 / 3 | 0)], [var3 + var5, var3 + var5, ((0.058 * var5 + var3) | 0), ((0.058 * var5 + var3) | 0)], 4));
	                var1.fillArc(var2, var3, var4, 2 * var5, 70, 40);
	                return;
	            case 1:
	                var1.setColor(var7 ? shims_1.Color.fromString("red") : new shims_1.Color(0, 100, 0));
	                var1.fillArc(var2, var3, var4, 2 * var5, 90, 65);
	                var1.setColor(var7 ? new shims_1.Color(0, 100, 0) : shims_1.Color.fromString("red"));
	                var1.fillArc(var2, var3, var4, 2 * var5, 25, 65);
	                var1.setColor(var7 ? this.slimeColours[var6] : this.slimeColours2[var6]);
	                var1.fillPolygon(new shims_1.Polygon([var2 + (7 * var4 / 16 | 0), var2 + (9 * var4 / 16 | 0), var2 + (9 * var4 / 16 | 0), ((0.953 * var4 + var2) | 0), var2 + (var4 / 2 | 0), ((0.047 * var4 + var2) | 0), var2 + (7 * var4 / 16 | 0)], [((0.008 * var5 + var3) | 0), ((0.008 * var5 + var3) | 0), var3 + (3 * var5 / 4 | 0), ((0.577 * var5 + var3) | 0), var3 + var5, ((0.577 * var5 + var3) | 0), var3 + (3 * var5 / 4 | 0)], 7));
	                var1.fillArc(var2, var3, var4, 2 * var5, 83, 14);
	                return;
	            case 2:
	            case 3:
	            case 7:
	                var1.fillPolygon(new shims_1.Polygon([var2 + (var4 / 5 | 0), var2 + (4 * var4 / 5 | 0), var2 + (4 * var4 / 5 | 0), var2 + (var4 / 5 | 0)], [((0.2 * var5 + var3) | 0), ((0.2 * var5 + var3) | 0), var3 + var5, var3 + var5], 4));
	                var1.fillArc(var2, var3, var4, 2 * var5, 53, 74);
	                var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);
	                var1.fillPolygon(new shims_1.Polygon([var2 + (2 * var4 / 5 | 0), var2 + (3 * var4 / 5 | 0), var2 + (3 * var4 / 5 | 0), var2 + (2 * var4 / 5 | 0)], [((0.04 * var5 + var3) | 0), ((0.04 * var5 + var3) | 0), var3 + var5, var3 + var5], 4));
	                var1.fillArc(var2, var3, var4, 2 * var5, 78, 24);
	                return;
	            case 4:
	            case 5:
	                var1.fillPolygon(new shims_1.Polygon([var2 + (var4 / 2 | 0), var2, var2 + (var4 / 2 | 0)], [var3, var3 + var5, var3 + var5], 3));
	                var1.fillArc(var2, var3, var4, 2 * var5, 45, 45);
	                return;
	            case 6:
	                var1.drawArc(var2 + (var4 / 4 | 0), var3 + (var5 / 4 | 0), (var4 / 2 | 0), (var5 / 2 | 0), 60, 240);
	                var1.drawArc(var2 + (var4 / 3 | 0), var3 + (var5 / 3 | 0), (var4 / 3 | 0), (var5 / 3 | 0), 60, 240);
	                var1.drawLine(var2 + (3 * var4 / 8 | 0), var3 + (var5 / 6 | 0), var2 + (3 * var4 / 8 | 0), var3 + (5 * var5 / 6 | 0));
	                var1.drawLine(var2 + (3 * var4 / 8 | 0), var3 + (var5 / 6 | 0), var2 + (2 * var4 / 3 | 0), var3 + (var5 / 6 | 0));
	                var1.drawLine(var2 + (3 * var4 / 8 | 0), var3 + (var5 / 2 | 0), var2 + (5 * var4 / 8 | 0), var3 + (var5 / 2 | 0));
	                return;
	            case 8:
	            case 11:
	            case 13:
	                var1.fillArc(var2, var3, var4, 2 * var5, 19, 23);
	                var1.fillArc(var2, var3, var4, 2 * var5, 138, 23);
	                var1.fillRect(((0.128 * var4 + var2) | 0), var3 + (var5 / 3 | 0), ((0.744 * var4) | 0), (2 * var5 / 3 | 0));
	                if (var6 !== 11) {
	                    var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);
	                    var1.fillRect(((0.029 * var4 + var2) | 0), var3 + (2 * var5 / 3 | 0), ((0.942 * var4) | 0), (var5 / 3 | 0));
	                    if (var6 === 13) {
	                        var1.setColor(shims_1.Color.fromString("white"));
	                        var1.drawLine(((0.128 * var4 + var2) | 0), var3 + (var5 / 3 | 0), ((0.872 * var4 + var2) | 0), var3 + (var5 / 3 | 0));
	                        var1.drawLine(((0.029 * var4 + var2) | 0), var3 + (2 * var5 / 3 | 0), ((0.971 * var4 + var2) | 0), var3 + (2 * var5 / 3 | 0));
	                        return;
	                    }
	                }
	                else {
	                    var1.setColor(var7 ? shims_1.Color.fromString("white") : shims_1.Color.fromString("yellow"));
	                    var1.fillArc(var2, var3, var4, 2 * var5, 0, 19);
	                    var1.fillArc(var2, var3, var4, 2 * var5, 161, 19);
	                    var1.fillRect(((0.029 * var4 + var2) | 0), var3 + (2 * var5 / 3 | 0), ((0.942 * var4) | 0), (var5 / 3 | 0));
	                }
	                return;
	            case 9:
	            case 10:
	                var1.fillArc(var2, var3, var4, 2 * var5, 60, 60);
	                return;
	            case 14:
	                var1.fillArc(var2, var3, var4, 2 * var5, 42, 96);
	                var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);
	                var1.fillRect(((0.128 * var4 + var2) | 0), var3 + (var5 / 3 | 0), ((0.744 * var4) | 0), (2 * var5 / 3 | 0));
	                return;
	            case 15:
	                var1.fillArc(var2, var3, var4, 2 * var5, 42, 96);
	                var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);
	                var1.fillRect(((0.128 * var4 + var2) | 0), var3 + (var5 / 3 | 0), ((0.744 * var4) | 0), (2 * var5 / 3 | 0));
	                var1.setColor(var7 ? shims_1.Color.fromString("black") : shims_1.Color.fromString("white"));
	                for (var var8 = 0; var8 < 3; ++var8) {
	                    var1.fillPolygon(new shims_1.Polygon([((0.124 * var8 * var4 + ((var4 / 2 | 0)) + var2) | 0), ((0.124 * (var8 - 1) * var4 + ((var4 / 2 | 0)) + var2) | 0), ((0.124 * (var8 + 1) * var4 + ((var4 / 2 | 0)) + var2) | 0)], [var3 + (var5 / 3 | 0), var3 + var5, var3 + (var5 / 3 | 0)], 3));
	                }
	                return;
	            default:
	        }
	    }
	    doWind() {
	        if (this.windOn && Math.random() >= 0.9) {
	            this.wind += ((2.0 - 4.0 * Math.random()) | 0);
	            if (this.wind > 30) {
	                this.wind = 30;
	            }
	            else {
	                if (this.wind < -30) {
	                    this.wind = -30;
	                }
	            }
	        }
	    }
	    MoveBall() {
	        var var1 = (30 * this.nHeight / 1000 | 0);
	        var var2 = (this.ballOldX * this.nWidth / 1000 | 0);
	        var var3 = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.SKY_COL);
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (this.windOn && this.fServerMoved) {
	            this.ballX *= 10;
	            this.ballX += this.wind;
	            this.ballX /= 10;
	        }
	        if (!this.fEndGame) {
	            var var4 = (this.ballX - this.p1X) * 2;
	            var var5 = this.ballY - this.p1Y;
	            var var6 = var4 * var4 + var5 * var5;
	            var var7 = this.ballVX - this.p1XV;
	            var var8 = this.ballVY - this.p1YV;
	            var var9;
	            var var10;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p1X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p1Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    this.ballVX += this.p1XV - (2 * var4 * var10 / var9 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p1YV - (2 * var5 * var10 / var9 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                if (this.fServerMoved) {
	                    this.fP1Touched = true;
	                    ++this.fP1Touches;
	                    ++this.fP1TouchesTot;
	                    this.fP2Touches = 0;
	                    this.fP1HitStill = this.p1YV === 0 && this.p1XV === 0;
	                    this.hitNetSinceTouched = false;
	                }
	            }
	            var4 = (this.ballX - this.p2X) * 2;
	            var5 = this.ballY - this.p2Y;
	            var6 = var4 * var4 + var5 * var5;
	            var7 = this.ballVX - this.p2XV;
	            var8 = this.ballVY - this.p2YV;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p2X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p2Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    this.ballVX += this.p2XV - (2 * var4 * var10 / var9 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p2YV - (2 * var5 * var10 / var9 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                if (this.fServerMoved) {
	                    this.fP2Touched = true;
	                    this.fP1Touches = 0;
	                    ++this.fP2Touches;
	                    ++this.fP2TouchesTot;
	                    this.fP2HitStill = this.p2YV === 0 && this.p2XV === 0;
	                    this.hitNetSinceTouched = false;
	                }
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 480 && this.ballX < 520 && this.ballY < 140) {
	                if (this.ballVY < 0 && this.ballY > 130) {
	                    this.ballVY *= -1;
	                    this.ballY = 130;
	                }
	                else if (this.ballX < 500) {
	                    this.ballX = 480;
	                    this.ballVX = this.ballVX >= 0 ? -this.ballVX : this.ballVX;
	                    this.hitNetSinceTouched = true;
	                }
	                else {
	                    this.ballX = 520;
	                    this.ballVX = this.ballVX <= 0 ? -this.ballVX : this.ballVX;
	                    this.hitNetSinceTouched = true;
	                }
	            }
	        }
	        var2 = (this.ballX * this.nWidth / 1000 | 0);
	        var3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.BALL_COL);
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	    }
	    drawScores() {
	        var var1 = this.screen;
	        var var2 = var1.getFontMetrics();
	        var var3 = (this.nHeight / 25 | 0);
	        var var4 = (this.nHeight / 15 | 0);
	        var1.setColor(this.SKY_COL);
	        var1.fillRect(0, 0, this.nWidth, var4 + 22);
	        var var5 = 20;
	        for (var var6 = 0; var6 < (this.fP1PointsWon / 6 | 0); ++var6) {
	            var1.setColor(this.slimeColours[this.p1Col]);
	            var1.fillOval(var5, 30 - (var4 / 2 | 0), var4, var4);
	            var1.setColor(this.slimeColours2[this.p1Col]);
	            var1.drawOval(var5, 30 - (var4 / 2 | 0), var4, var4);
	            var5 += (var4 / 2 | 0);
	        }
	        if (this.fP1PointsWon >= 12) {
	            var1.drawString(/* valueOf */ new String((this.fP1PointsWon / 6 | 0)).toString(), var5 - (var2.stringWidth(/* valueOf */ new String((this.fP1PointsWon / 6 | 0)).toString()) / 2 | 0), 30 + (var2.getAscent() / 2 | 0));
	        }
	        if (this.fP1PointsWon > 6) {
	            var5 += (var4 / 2 | 0) + 10;
	        }
	        for (var var7 = 0; var7 < this.fP1PointsWon % 6; ++var7) {
	            var1.setColor(this.slimeColours[this.p1Col]);
	            var1.fillOval(var5, 30 - (var3 / 2 | 0), var3, var3);
	            var1.setColor(this.slimeColours2[this.p1Col]);
	            var1.drawOval(var5, 30 - (var3 / 2 | 0), var3, var3);
	            var5 += var3 + 5;
	        }
	        var5 = this.nWidth - 20 - ((this.fP2PointsWon / 6 | 0) * var4 / 2 | 0) - (this.fP2PointsWon % 6 === 0 ? (var4 / 2 | 0) + 10 : 0) - this.fP2PointsWon % 6 * var3 - (this.fP2PointsWon % 6 > 0 ? this.fP2PointsWon % 6 - 1 : 0) * 5;
	        if (this.fP2PointsWon > 6 && this.fP2PointsWon % 6 !== 0) {
	            var5 -= (var4 / 2 | 0) + 10;
	        }
	        for (var var8 = 0; var8 < (this.fP2PointsWon / 6 | 0); ++var8) {
	            var1.setColor(this.slimeColours[this.p2Col]);
	            var1.fillOval(var5, 30 - (var4 / 2 | 0), var4, var4);
	            var1.setColor(this.slimeColours2[this.p2Col]);
	            var1.drawOval(var5, 30 - (var4 / 2 | 0), var4, var4);
	            var5 += (var4 / 2 | 0);
	        }
	        if (this.fP2PointsWon >= 12) {
	            var1.drawString(/* valueOf */ new String((this.fP2PointsWon / 6 | 0)).toString(), var5 - (var2.stringWidth(/* valueOf */ new String((this.fP2PointsWon / 6 | 0)).toString()) / 2 | 0), 30 + (var2.getAscent() / 2 | 0));
	        }
	        if (this.fP2PointsWon > 6) {
	            var5 += (var4 / 2 | 0) + 10;
	        }
	        for (var var9 = 0; var9 < this.fP2PointsWon % 6; ++var9) {
	            var1.setColor(this.slimeColours[this.p2Col]);
	            var1.fillOval(var5, 30 - (var3 / 2 | 0), var3, var3);
	            var1.setColor(this.slimeColours2[this.p2Col]);
	            var1.drawOval(var5, 30 - (var3 / 2 | 0), var3, var3);
	            var5 += var3 + 5;
	        }
	    }
	    MakeTime(var1) {
	        var var3 = "";
	        var var4 = Math.round(var1 / 1000) % 60;
	        var var6 = Math.round(var1 / 60000) % 60;
	        var3 = var3 + var6 + ":";
	        if (var4 < 10) {
	            var3 = var3 + "0";
	        }
	        var3 = var3 + var4;
	        if (var1 > this.GAME_LENGTH) {
	            var3 = var3 + " (time on)";
	        }
	        return var3;
	    }
	    DrawStatus() {
	        var var1 = this.screen;
	        var var2 = var1.getFontMetrics();
	        var var3;
	        if (this.fSelectedColours) {
	            var3 = (this.firstHalf ? "1st" : "2nd") + " half: " + this.MakeTime(this.timer ? this.GAME_LENGTH - this.gameTime : shims_1.System.currentTimeMillis() - this.realStartTime);
	        }
	        else {
	            var3 = this.slimeColText[this.p1Col] + "v " + this.slimeColText[this.p2Col];
	        }
	        if (this.gameTime > this.GAME_LENGTH) {
	            var3 = (this.firstHalf ? "1st" : "2nd") + " half: Final point!";
	        }
	        var var4 = var2.getHeight() * 3;
	        var var5 = var2.stringWidth(var3);
	        var var6 = (this.nWidth / 2 | 0) - (var5 / 2 | 0) - 10;
	        var1.setColor(this.SKY_COL);
	        if (this.fSelectedColours) {
	            var1.fillRect(var6, 0, var5 + 20, var4 + 22);
	        }
	        else {
	            var1.fillRect(0, 0, this.nWidth, var4 + 22);
	        }
	        var1.setColor(shims_1.Color.fromString("white"));
	        var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), var2.getHeight() * 2);
	        if (this.windOn) {
	            if (this.wind < 0) {
	                var3 = "<< " + -this.wind + " km/h";
	            }
	            else if (this.wind > 0) {
	                var3 = this.wind + " km/h >>";
	            }
	            else {
	                var3 = "no wind";
	            }
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), var2.getHeight() * 3);
	        }
	        if (!this.fSelectedColours) {
	            var1.setColor(shims_1.Color.fromString("red"));
	            var3 = "WARM UP ONLY";
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), var2.getHeight() * 4);
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(this.COURT_COL);
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(var1, var2) {
	        if (((typeof var1 === 'string') || var1 === null) && ((typeof var2 === 'number') || var2 === null)) {
	            return (() => {
	                var var3 = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("white"));
	                this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var3.getHeight() * (var2 + 1) + 10);
	            })();
	        }
	        else if (var1 === undefined && var2 === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    ReplayFrame(var1) {
	        var var2 = var1 !== 0 ? var1 - 1 : 199;
	        this.p1OldX = this.replayData[var2][0];
	        this.p1OldY = this.replayData[var2][1];
	        this.p2OldX = this.replayData[var2][2];
	        this.p2OldY = this.replayData[var2][3];
	        this.ballOldX = this.replayData[var2][4];
	        this.ballOldY = this.replayData[var2][5];
	        this.p1X = this.replayData[var1][0];
	        this.p1Y = this.replayData[var1][1];
	        this.p2X = this.replayData[var1][2];
	        this.p2Y = this.replayData[var1][3];
	        this.ballX = this.replayData[var1][4];
	        this.ballY = this.replayData[var1][5];
	        this.ballVX = 0;
	        this.ballVY = 1;
	        this.DrawSlimers();
	        if (this.buffered) {
	            this.getGraphics().drawImage(this.buffer, 0, 0, null);
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.replayPos = this.replayStart = 0;
	            if (this.firstHalf) {
	                this.fSelectedColours = false;
	                this.p1Col = 0;
	                this.p2Col = 1;
	                this.promptMsg = "Select a slime and click the mouse when warmed up.";
	                this.drawPrompt();
	                this.superFlash = false;
	                this.scoringRun = 0;
	                this.fP1Touches = 0;
	                this.fP2Touches = 0;
	                this.fP1TouchesTot = 0;
	                this.fP2TouchesTot = 0;
	                this.fP1Clangers = 0;
	                this.fP2Clangers = 0;
	                this.fP1Aces = 0;
	                this.fP2Aces = 0;
	                this.fP1Winners = 0;
	                this.fP2Winners = 0;
	                this.fP1PointsWon = 0;
	                this.fP2PointsWon = 0;
	                this.fP1Frames = 0;
	                this.fP2Frames = 0;
	                this.fP1Super = 0;
	                this.fP2Super = 0;
	                this.fP1Streak = 0;
	                this.fP2Streak = 0;
	                this.wind = ((30.0 - 60.0 * Math.random()) | 0);
	            }
	            else {
	                this.ballX = 200;
	                this.scoringRun = 0;
	                this.superFlash = false;
	                var var1 = this.p1Col;
	                this.p1Col = this.p2Col;
	                this.p2Col = var1;
	                var1 = this.fP1Touches;
	                this.fP1Touches = this.fP2Touches;
	                this.fP2Touches = var1;
	                var1 = this.fP1TouchesTot;
	                this.fP1TouchesTot = this.fP2TouchesTot;
	                this.fP2TouchesTot = var1;
	                var1 = this.fP1Clangers;
	                this.fP1Clangers = this.fP2Clangers;
	                this.fP2Clangers = var1;
	                var1 = this.fP1Aces;
	                this.fP1Aces = this.fP2Aces;
	                this.fP2Aces = var1;
	                var1 = this.fP1Winners;
	                this.fP1Winners = this.fP2Winners;
	                this.fP2Winners = var1;
	                var1 = this.fP1PointsWon;
	                this.fP1PointsWon = this.fP2PointsWon;
	                this.fP2PointsWon = var1;
	                var var2 = this.fP1Frames;
	                this.fP1Frames = this.fP2Frames;
	                this.fP2Frames = var2;
	                var1 = this.fP1Super;
	                this.fP1Super = this.fP2Super;
	                this.fP2Super = var1;
	                var1 = this.fP1Streak;
	                this.fP1Streak = this.fP2Streak;
	                this.fP2Streak = var1;
	                this.repaint();
	            }
	            this.fP1HitStill = false;
	            this.fP2HitStill = false;
	            this.fServerMoved = false;
	            this.nPlayOnFrames = -1;
	            this.crossedNetTime = 0;
	            this.drawScores();
	            this.fP1Touched = this.fP2Touched = false;
	            this.hitNetSinceTouched = false;
	            var var9 = false;
	            var var8 = false;
	            var var3 = false;
	            this.startTime = shims_1.System.currentTimeMillis();
	            this.realStartTime = this.startTime;
	            while ((this.gameThread != null)) {
	                if (!this.fSelectedColours) {
	                    this.startTime = shims_1.System.currentTimeMillis() - this.gameTime;
	                    this.realStartTime = this.startTime;
	                }
	                else if (!this.fServerMoved) {
	                    this.startTime = shims_1.System.currentTimeMillis() - this.gameTime;
	                }
	                else {
	                    this.gameTime = shims_1.System.currentTimeMillis() - this.startTime;
	                }
	                if (this.nPlayOnFrames === 50) {
	                    this.promptMsg = "PLAY ON!";
	                    this.crossedNetTime = this.ballX <= 500 ? -shims_1.System.currentTimeMillis() : shims_1.System.currentTimeMillis();
	                    this.drawPrompt();
	                }
	                else if (this.nPlayOnFrames === 0) {
	                    this.promptMsg = "";
	                    this.drawPrompt();
	                }
	                --this.nPlayOnFrames;
	                this.SaveReplayData();
	                if (!this.fServerMoved) {
	                    this.crossedNetTime = shims_1.System.currentTimeMillis();
	                }
	                else if (this.crossedNetTime < 0 && this.ballX > 500 - (3 * this.nHeight / 50 | 0) || this.crossedNetTime > 0 && this.ballX < 500 + (3 * this.nHeight / 50 | 0)) {
	                    this.crossedNetTime = this.ballX <= 500 ? -shims_1.System.currentTimeMillis() : shims_1.System.currentTimeMillis();
	                    this.drawPrompt();
	                }
	                this.p1OldX = this.p1X;
	                this.p1OldY = this.p1Y;
	                this.p2OldX = this.p2X;
	                this.p2OldY = this.p2Y;
	                this.ballOldX = this.ballX;
	                this.ballOldY = this.ballY;
	                this.DrawStatus();
	                if (this.windOn) {
	                    this.doWind();
	                    this.unDrawParticles();
	                    this.updateParticles();
	                    this.drawParticles();
	                    this.screen.setColor(shims_1.Color.fromString("white"));
	                    this.screen.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	                }
	                this.MoveSlimers();
	                this.DrawSlimers();
	                if (this.buffered) {
	                    this.getGraphics().drawImage(this.buffer, 0, 0, null);
	                }
	                if (this.fServerMoved && this.fSelectedColours) {
	                    if (this.ballX < 500 - (3 * this.nHeight / 50 | 0)) {
	                        ++this.fP1Frames;
	                    }
	                    else if (this.ballX > 500 + (3 * this.nHeight / 50 | 0)) {
	                        ++this.fP2Frames;
	                    }
	                }
	                if (!this.fSelectedColours && this.ballY < 35) {
	                    shims_1.Thread.sleep(1000, false);
	                    this.p1X = 200;
	                    this.p1Y = 0;
	                    this.p2X = 800;
	                    this.p2Y = 0;
	                    this.p1XV = 0;
	                    this.p1YV = 0;
	                    this.p2XV = 0;
	                    this.p2YV = 0;
	                    this.ballX = this.ballX >= 500 ? 200 : 800;
	                    this.ballY = 400;
	                    this.ballVX = 0;
	                    this.ballVY = 0;
	                    this.fServerMoved = false;
	                    this.fP1Touched = this.fP2Touched = false;
	                    this.repaint();
	                }
	                else {
	                    var var4;
	                    if (this.fSelectedColours && this.holdingOn && Math.abs(this.crossedNetTime) + 5000 < shims_1.System.currentTimeMillis() && this.ballY >= 35) {
	                        var4 = shims_1.System.currentTimeMillis();
	                        this.promptMsg = "BALL... YES!";
	                        this.drawPrompt();
	                        this.promptMsg = "";
	                        this.drawPrompt("Holding the ball against " + (this.ballX <= 500 ? this.slimeColText[this.p1Col] : this.slimeColText[this.p2Col]) + "!!", 1);
	                        this.drawPrompt("Press space for replay...", 2);
	                        if (this.buffered) {
	                            this.getGraphics().drawImage(this.buffer, 0, 0, null);
	                        }
	                        this.mousePressed = false;
	                        if (this.ballX > 500) {
	                            ++this.fP1PointsWon;
	                            ++this.fP2Clangers;
	                        }
	                        else {
	                            ++this.fP2PointsWon;
	                            ++this.fP1Clangers;
	                        }
	                        this.oldScoringRun = this.scoringRun;
	                        if (this.ballX <= 500 && this.scoringRun >= 0) {
	                            ++this.scoringRun;
	                            if (this.scoringRun > this.fP2Streak) {
	                                this.fP2Streak = this.scoringRun;
	                            }
	                        }
	                        else if (this.ballX > 500 && this.scoringRun <= 0) {
	                            --this.scoringRun;
	                            if (-this.scoringRun > this.fP1Streak) {
	                                this.fP1Streak = -this.scoringRun;
	                            }
	                        }
	                        else if (this.ballX <= 500 && this.scoringRun <= 0) {
	                            this.scoringRun = 1;
	                            if (this.scoringRun > this.fP2Streak) {
	                                this.fP2Streak = this.scoringRun;
	                            }
	                        }
	                        else if (this.ballX > 500 && this.scoringRun >= 0) {
	                            this.scoringRun = -1;
	                            if (-this.scoringRun > this.fP1Streak) {
	                                this.fP1Streak = -this.scoringRun;
	                            }
	                        }
	                        this.drawScores();
	                        this.DrawStatus();
	                        shims_1.Thread.sleep(1000, true);
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = this.ballX >= 500 ? 200 : 800;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.nPlayOnFrames = -1;
	                        this.replayStart = this.replayPos = 0;
	                        this.fP1Touched = this.fP2Touched = false;
	                        this.fServerMoved = false;
	                        if (this.GAME_LENGTH <= this.gameTime) {
	                            this.endHalf();
	                        }
	                        this.repaint();
	                        this.startTime += shims_1.System.currentTimeMillis() - var4;
	                    }
	                    else if (this.fSelectedColours && this.holdingOn && Math.abs(this.crossedNetTime) + 5000 - 1000 < shims_1.System.currentTimeMillis() && this.ballY >= 35) {
	                        this.promptMsg = "BALL...";
	                        if (this.buffered) {
	                            this.getGraphics().drawImage(this.buffer, 0, 0, null);
	                        }
	                        this.drawPrompt();
	                        this.promptMsg = "";
	                    }
	                    else if (this.ballY < 35) {
	                        var4 = shims_1.System.currentTimeMillis();
	                        if (this.ballX > 500) {
	                            ++this.fP1PointsWon;
	                        }
	                        else {
	                            ++this.fP2PointsWon;
	                        }
	                        this.oldScoringRun = this.scoringRun;
	                        if (this.ballX <= 500 && this.scoringRun >= 0) {
	                            ++this.scoringRun;
	                            if (this.scoringRun > this.fP2Streak) {
	                                this.fP2Streak = this.scoringRun;
	                            }
	                        }
	                        else if (this.ballX > 500 && this.scoringRun <= 0) {
	                            --this.scoringRun;
	                            if (-this.scoringRun > this.fP1Streak) {
	                                this.fP1Streak = -this.scoringRun;
	                            }
	                        }
	                        else if (this.ballX <= 500 && this.scoringRun <= 0) {
	                            this.scoringRun = 1;
	                            if (this.scoringRun > this.fP2Streak) {
	                                this.fP2Streak = this.scoringRun;
	                            }
	                        }
	                        else if (this.ballX > 500 && this.scoringRun >= 0) {
	                            this.scoringRun = -1;
	                            if (-this.scoringRun > this.fP1Streak) {
	                                this.fP1Streak = -this.scoringRun;
	                            }
	                        }
	                        if (this.ballX > 500 || this.fP1Touches < 3 && (!this.hitNetSinceTouched || this.fP1Touches <= 0) && this.fP2Touched && (!this.fP1HitStill || this.fP1Touches <= 0)) {
	                            if (this.ballX > 500 && (this.fP2Touches >= 3 || this.hitNetSinceTouched && this.fP2Touches > 0 || !this.fP1Touched || this.fP2HitStill && this.fP2Touches > 0)) {
	                                ++this.fP2Clangers;
	                                var9 = true;
	                            }
	                        }
	                        else {
	                            ++this.fP1Clangers;
	                            var9 = true;
	                        }
	                        if (this.fP1Touched && !this.fP2Touched && this.ballX >= 500) {
	                            ++this.fP1Aces;
	                            var8 = true;
	                        }
	                        else if (this.fP2Touched && !this.fP1Touched && this.ballX < 500) {
	                            ++this.fP2Aces;
	                            var8 = true;
	                        }
	                        else if (this.ballX > 500 && this.fP1Touches > 0) {
	                            ++this.fP1Winners;
	                            var3 = true;
	                        }
	                        else if (this.ballX <= 500 && this.fP2Touches > 0) {
	                            ++this.fP2Winners;
	                            var3 = true;
	                        }
	                        if (Math.abs(this.scoringRun) > 6) {
	                            this.promptMsg = "Super " + (this.ballX <= 500 ? this.slimeColText[this.p2Col] : this.slimeColText[this.p1Col]);
	                        }
	                        else {
	                            this.promptMsg = this.ballX <= 500 ? this.slimeColText[this.p2Col] : this.slimeColText[this.p1Col];
	                        }
	                        if (!this.fP1Touched && !this.fP2Touched) {
	                            this.promptMsg = "What can I say?";
	                        }
	                        else if ((this.scoringRun < 0 ? -this.scoringRun : this.scoringRun) === 5) {
	                            this.promptMsg = this.promptMsg + "is heating up!";
	                        }
	                        else if ((this.scoringRun < 0 ? -this.scoringRun : this.scoringRun) === 6) {
	                            this.promptMsg = this.promptMsg + "is on fire!";
	                            if (this.scoringRun < 0) {
	                                ++this.fP1Super;
	                            }
	                            else {
	                                ++this.fP2Super;
	                            }
	                        }
	                        else if ((this.ballX <= 500 || !this.fP1Touched || this.fP2Touched) && (this.ballX > 500 || this.fP1Touched || !this.fP2Touched)) {
	                            if ((this.ballX <= 500 || this.fP1Touched || !this.fP2Touched) && (this.ballX > 500 || !this.fP1Touched || this.fP2Touched)) {
	                                if (this.fP1PointsWon === this.fP2PointsWon) {
	                                    this.promptMsg = this.promptMsg + "draws level!";
	                                }
	                                else if ((this.ballX <= 500 || this.fP1PointsWon !== this.fP2PointsWon + 1) && (this.ballX > 500 || this.fP1PointsWon + 1 !== this.fP2PointsWon)) {
	                                    this.promptMsg = this.promptMsg + "scores!";
	                                }
	                                else {
	                                    this.promptMsg = this.promptMsg + "takes the lead!";
	                                }
	                            }
	                            else {
	                                this.promptMsg = (this.ballX < 500 ? this.slimeColText[this.p1Col] : this.slimeColText[this.p2Col]) + "can\'t serve!";
	                            }
	                        }
	                        else {
	                            this.promptMsg = this.promptMsg + "aces the serve!";
	                        }
	                        var var6 = this.ballX;
	                        this.drawPrompt();
	                        if ((-this.scoringRun >= this.fP1Streak || this.scoringRun >= this.fP2Streak) && Math.abs(this.scoringRun) >= 3) {
	                            this.drawPrompt(this.fP1Streak + " << Longest streak >> " + this.fP2Streak, 2);
	                        }
	                        else if (var9) {
	                            this.drawPrompt(this.fP1Clangers + " << Clangers >> " + this.fP2Clangers, 2);
	                        }
	                        else if (var8) {
	                            this.drawPrompt(this.fP1Aces + " << Aces >> " + this.fP2Aces, 2);
	                        }
	                        else if (var3) {
	                            this.drawPrompt(this.fP1Winners + " << Winners >> " + this.fP2Winners, 2);
	                        }
	                        else {
	                            this.drawPrompt(this.fP1PointsWon + " << Points won >> " + this.fP2PointsWon, 2);
	                        }
	                        var9 = false;
	                        var8 = false;
	                        var3 = false;
	                        this.drawPrompt("Press space for replay...", 1);
	                        this.mousePressed = false;
	                        this.drawScores();
	                        this.DrawStatus();
	                        if (this.buffered) {
	                            this.getGraphics().drawImage(this.buffer, 0, 0, null);
	                        }
	                        shims_1.Thread.sleep(1000, true);
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = var6 >= 500 ? 200 : 800;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.nPlayOnFrames = -1;
	                        this.replayStart = this.replayPos = 0;
	                        this.fP1Touched = this.fP2Touched = false;
	                        this.fServerMoved = false;
	                        if (this.GAME_LENGTH <= this.gameTime) {
	                            this.endHalf();
	                        }
	                        this.repaint();
	                        this.startTime += shims_1.System.currentTimeMillis() - var4;
	                    }
	                }
	                if (this.gameThread != null) {
	                    try {
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var7) {
	                    }
	                    ;
	                }
	            }
	            ;
	            this.fEndGame = true;
	            this.fInPlay = false;
	            this.promptMsg = "";
	            this.repaint();
	        });
	    }
	    endHalf() {
	        if (this.firstHalf) {
	            this.gameTime = 0;
	            this.firstHalf = false;
	            this.promptMsg = "It\'s half time.";
	            this.drawPrompt();
	            if (this.buffered) {
	                this.getGraphics().drawImage(this.buffer, 0, 0, null);
	            }
	            this.promptMsg = "";
	        }
	        else {
	            this.promptMsg = "";
	            this.drawPrompt();
	            this.drawPrompt("... and that\'s the game.", 0);
	            if (this.buffered) {
	                this.getGraphics().drawImage(this.buffer, 0, 0, null);
	            }
	            this.promptMsg = "";
	            shims_1.Thread.sleep(1000, false);
	            if (this.fP1PointsWon > this.fP2PointsWon) {
	                this.drawPrompt(this.slimeColText[this.p1Col] + "Wins!", 1);
	            }
	            else if (this.fP2PointsWon > this.fP1PointsWon) {
	                this.drawPrompt(this.slimeColText[this.p2Col] + "Wins!", 1);
	            }
	            else {
	                this.drawPrompt("It\'s a draw!", 1);
	            }
	            if (this.buffered) {
	                this.getGraphics().drawImage(this.buffer, 0, 0, null);
	            }
	            this.gameTime = 0;
	            this.firstHalf = true;
	        }
	        shims_1.Thread.sleep(3000, false);
	        this.p1X = 200;
	        this.p1Y = 0;
	        this.p2X = 800;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.ballX = this.firstHalf ? 200 : 800;
	        this.ballY = 400;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.fServerMoved = false;
	        this.repaint();
	        this.gameThread = null;
	    }
	    DoReplay() {
	        var var1 = this.screen.getFontMetrics();
	        var var2 = var1.getHeight();
	        this.promptMsg = "Press space to continue...";
	        this.mousePressed = false;
	        var var3 = this.scoringRun;
	        this.scoringRun = this.oldScoringRun;
	        var var4 = this.replayStart;
	        var var5 = false;
	        this.drawCourt(this.screen);
	        while ((!this.mousePressed)) {
	            ++var4;
	            if (var4 >= 200) {
	                var4 = 0;
	            }
	            if (var4 === this.replayPos) {
	                this.screen.setColor(shims_1.Color.fromString("white"));
	                this.screen.fillRect(20, 20, 20, 20);
	                shims_1.Thread.sleep(1000, false);
	                var5 = !var5;
	                this.paint(this.screen);
	                this.screen.setColor(this.SKY_COL);
	                this.screen.fillRect(0, 0, this.nWidth, (this.nHeight / 20 | 0) + 22);
	                if (this.replayPos < this.replayStart) {
	                    var4 += 200;
	                }
	                while ((var4 > this.replayStart)) {
	                    var4 -= 5;
	                    this.drawCourt(this.screen);
	                    this.screen.setColor(shims_1.Color.fromString("white"));
	                    this.screen.fillPolygon(new shims_1.Polygon([20, 35, 35, 50, 50, 35, 35, 20], [30, 20, 30, 20, 40, 30, 40, 30], 8));
	                    if (var4 < this.replayStart) {
	                        var4 = this.replayStart;
	                    }
	                    this.ReplayFrame(var4 % 200);
	                    shims_1.Thread.sleep(20, false);
	                }
	                ;
	                this.drawCourt(this.screen);
	                this.screen.setColor(shims_1.Color.fromString("white"));
	                this.screen.fillRect(20, 20, 20, 20);
	                this.ReplayFrame(this.replayStart);
	                shims_1.Thread.sleep(500, false);
	                this.drawCourt(this.screen);
	            }
	            this.ReplayFrame(var4);
	            try {
	                shims_1.Thread.sleep(var5 ? 60 : 20);
	            }
	            catch (var6) {
	            }
	            ;
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillPolygon(new shims_1.Polygon([20, 35, 20], [20, 30, 40], 3));
	            this.screen.drawString(var5 ? "Slow motion replay" : "Replay", 60, 35 - (var2 / 2 | 0));
	        }
	        ;
	        this.scoringRun = var3;
	        this.promptMsg = "";
	        this.paint(this.screen);
	    }
	    drawCourt(var1) {
	        var1.setColor(this.SKY_COL);
	        var1.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        var1.setColor(this.COURT_COL);
	        var1.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        var1.setColor(shims_1.Color.fromString("white"));
	        var1.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	        this.drawPrompt();
	    }
	    unDrawParticles() {
	        this.screen.setColor(this.SKY_COL);
	        for (var var1 = 0; var1 < this.NUM_PARTICLES; ++var1) {
	            this.screen.fillOval(this.particle_x[var1], this.particle_y[var1], this.particle_size, this.particle_size);
	        }
	    }
	    updateParticles() {
	        for (var var1 = 0; var1 < this.NUM_PARTICLES; ++var1) {
	            this.particle_x[var1] = ((this.particle_x[var1] + this.particle_weight[var1] * this.wind / 3.0) | 0);
	            var var2 = ((this.particle_weight[var1] * 3.0) | 0);
	            this.particle_y[var1] += var2 > 0 ? var2 : 1;
	            if (this.particle_x[var1] < 0 || this.particle_x[var1] > this.nWidth || this.particle_y[var1] > this.floor) {
	                if (Math.random() > Math.abs(this.wind / 60.0)) {
	                    this.particle_x[var1] = ((Math.random() * this.nWidth) | 0);
	                    this.particle_y[var1] = 0;
	                }
	                else if (this.wind > 0) {
	                    this.particle_x[var1] = -1;
	                    this.particle_y[var1] = ((Math.random() * this.floor) | 0);
	                }
	                else {
	                    this.particle_x[var1] = this.nWidth + 1;
	                    this.particle_y[var1] = ((Math.random() * this.floor) | 0);
	                }
	            }
	        }
	    }
	    drawParticles() {
	        for (var var2 = 0; var2 < this.NUM_PARTICLES; ++var2) {
	            var var1 = ((170.0 * this.particle_weight[var2]) | 0);
	            this.screen.setColor(new shims_1.Color(85 + var1, 85 + var1, 255));
	            this.screen.fillOval(this.particle_x[var2], this.particle_y[var2], this.particle_size, this.particle_size);
	        }
	    }
	    sleep(var1, var3) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (this.gameThread != null) {
	                for (var var4 = 0; Math.round(var4) < Math.round(var1 / 20); ++var4) {
	                    try {
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var5) {
	                    }
	                    ;
	                    if (var3) {
	                        this.DrawStatus();
	                        if (this.windOn) {
	                            this.doWind();
	                            this.unDrawParticles();
	                            this.updateParticles();
	                            this.drawParticles();
	                            this.screen.setColor(shims_1.Color.fromString("white"));
	                            this.screen.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	                        }
	                    }
	                }
	            }
	        });
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Slime2P;


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const AutoPeer_1 = __webpack_require__(4);
	class Image {
	    constructor(root) {
	        this.root = null;
	        this.root = root;
	    }
	    getGraphics() {
	        return new Graphics(document.querySelector("canvas")["getContext"]("2d"));
	    }
	    getHeight(applet) {
	    }
	}
	exports.Image = Image;
	class Font {
	    constructor(name, modifier, size) {
	        this.name = name;
	        this.modifier = modifier;
	        this.size = size;
	    }
	    getName() {
	        return this.name;
	    }
	}
	exports.Font = Font;
	class Event {
	}
	// todo: check the right values for these on java Event
	Event.LEFT = 74;
	Event.RIGHT = 76;
	Event.UP = 73;
	Event.DOWN = 107;
	Event.KEY_ACTION = 401;
	Event.KEY_ACTION_RELEASE = 402;
	exports.Event = Event;
	class Graphics {
	    constructor(ctx) {
	        this.ctx = ctx;
	        this.color = Color.fromString("white");
	        this.background = { color: "", size: 0 };
	    }
	    getFontMetrics() {
	        return new FontMetrics();
	    }
	    setColor(color) {
	        this.ctx.strokeStyle = color.name;
	        this.ctx.fillStyle = color.name;
	        this.color = color;
	    }
	    fillRect(x, y, w, h) {
	        const size = w * h;
	        if (size >= this.background.size) {
	            this.background.color = this.color.name;
	            this.background.size = size;
	        }
	        else if (this.color.name === this.background.color) {
	            x--;
	            y--;
	            w++;
	            h++;
	        }
	        this.ctx.fillRect(x, y, w, h);
	    }
	    drawString(text, x, y) {
	        this.ctx.strokeText(text, x, y);
	    }
	    arcPath(x, y, width, height, startAngleDegrees, endAngleDegrees) {
	        this.ctx.beginPath();
	        var centreX = x + width / 2;
	        var centreY = y + height / 2;
	        var radiusX = width / 2;
	        var radiusY = height / 2;
	        var startAngleRadians = startAngleDegrees * Math.PI / 180;
	        var endAngleRadians = endAngleDegrees * Math.PI / 180;
	        var anticlockwise = endAngleRadians >= 0;
	        if (this.color.name === this.background.color) {
	            radiusX++;
	        }
	        if (startAngleRadians < 0 && endAngleRadians < 0) {
	            this.ctx.arc(centreX, centreY - radiusX / 2, radiusX, -endAngleRadians, -startAngleRadians, true);
	        }
	        else {
	            this.ctx.arc(centreX, centreY, radiusX, startAngleRadians, endAngleRadians, endAngleRadians >= 0);
	        }
	    }
	    fillArc(x, y, width, height, startAngleDegrees, endAngleDegrees) {
	        this.arcPath(x, y, width, height, startAngleDegrees, endAngleDegrees);
	        this.ctx.fill();
	    }
	    fillPolygon() {
	        let polygon;
	        if (arguments.length === 1) {
	            polygon = arguments[0];
	        }
	        else {
	            polygon = new Polygon(arguments[0], arguments[1], arguments[2]);
	        }
	        this.ctx.beginPath();
	        this.ctx.moveTo(polygon.xs[0], polygon.ys[0]);
	        for (var i = 1; i < polygon.n; i++) {
	            this.ctx.lineTo(polygon.xs[i], polygon.ys[i]);
	        }
	        this.ctx.closePath();
	        this.ctx.fill();
	    }
	    drawOval(x, y, width, height) {
	        this.drawArc(x, y, width, height, 0, 360);
	    }
	    fillOval(x, y, width, height) {
	        this.fillArc(x, y, width, height, 0, 360);
	    }
	    drawArc(x, y, width, height, startAngleDegrees, endAngleDegrees) {
	        this.arcPath(x, y, width, height, startAngleDegrees, endAngleDegrees);
	        this.ctx.stroke();
	    }
	    drawLine(xFrom, yFrom, xTo, yTo) {
	        this.ctx.moveTo(xFrom, yFrom);
	        this.ctx.lineTo(xTo, yTo);
	        this.ctx.stroke();
	    }
	    drawRect(x, y, w, h) {
	        this.drawLine(x, y, x + w, y);
	        this.drawLine(x + w, y, x + w, y + h);
	        this.drawLine(x + w, y + h, x, y + h);
	        this.drawLine(x, y + h, x, y);
	    }
	    getFont() {
	        return new Font(this.ctx.font, 0, Number(/\d+/.exec(this.ctx.font)[0]));
	    }
	    setFont(font) {
	        this.ctx.font = this.ctx.font.replace(/\d+/, font.size.toString());
	    }
	    drawImage(backBuffer, v1, v2, p) {
	    }
	}
	exports.Graphics = Graphics;
	class Color {
	    constructor(r, g, b) {
	        this.name = null;
	        this.name = `rgb(${r}, ${g}, ${b})`;
	    }
	    static fromString(v) {
	        var color = new Color(0, 0, 0);
	        color.name = v;
	        return color;
	    }
	}
	exports.Color = Color;
	class FontMetrics {
	    stringWidth(v) {
	        return v.length * 10;
	    }
	    getHeight() {
	        return 10;
	    }
	    getAscent() {
	        return 10;
	    }
	}
	exports.FontMetrics = FontMetrics;
	class Size {
	    constructor(width, height) {
	        this.width = width;
	        this.height = height;
	    }
	}
	exports.Size = Size;
	class AppletCore {
	    constructor() {
	        this.isInitialised = false;
	        this.canvasEl = null;
	        this.canvasEl = document.querySelector("canvas");
	        this.graphics = new Graphics(this.canvasEl.getContext("2d"));
	    }
	    size() {
	        return new Size(this.getWidth(), this.getHeight());
	    }
	    getImage() {
	        return new Image(document.body);
	    }
	    getWidth() {
	        return this.canvasEl.width;
	    }
	    getHeight() {
	        return this.canvasEl.height;
	    }
	    showStatus(text) {
	        var screen = this.getGraphics();
	        screen.setColor(Color.fromString("Green"));
	        screen.drawString(text, 10, 10);
	    }
	    requestFocus() {
	    }
	    getGraphics() {
	        return this.graphics;
	    }
	    createImage(nWidth, nHeight) {
	        if (document.querySelector("canvas")) {
	            return new Image(document.body);
	        }
	        var div = document.createElement("div");
	        var canv = document.createElement("canvas");
	        canv.width = nWidth;
	        canv.height = nHeight;
	        div.appendChild(canv);
	        document.body.appendChild(div);
	        return new Image(div);
	    }
	    repaint() {
	        if (!this.isInitialised)
	            return;
	        this.paint(this.getGraphics());
	    }
	    getCodeBase() {
	        return new URL(window.location.href + "?");
	    }
	    getDocumentBase() {
	        return new DocumentBase();
	    }
	    getAppletContext() {
	        return new AppletContext();
	    }
	    getAudioClip(url, name) {
	        return new AudioClip();
	    }
	}
	class Applet extends AppletCore {
	    constructor() {
	        super(...arguments);
	        this.guestSendTask = null;
	        this.autoPeer = AutoPeer_1.default.Get();
	        this.drawCalls = new Array();
	        this.drawCallSendTimeout = null;
	        this.screen = null;
	    }
	    start() {
	        this.init();
	        this.isInitialised = true;
	        this.registerEventListeners();
	        this.repaint();
	        // bit of a hack: volleyball-original has a start() method defined which needs to be called. Call it.
	        const _this = this;
	        if (_this.start && _this.start !== Applet.prototype.start) {
	            _this.start();
	        }
	    }
	    registerEventListeners() {
	        const game = this;
	        this.canvasEl.onmousedown = ev => {
	            var wevent = new Event();
	            wevent.id = 501;
	            wevent.x = ev.offsetX;
	            wevent.y = ev.offsetY;
	            this.handleEvent(wevent);
	        };
	        document.body.onkeypress = ev => {
	            var wevent = new Event();
	            wevent.id = 401;
	            wevent.key = ev.keyCode;
	            this.handleEvent(wevent);
	        };
	        document.body.onkeyup = ev => {
	            var wevent = new Event();
	            wevent.id = 402;
	            wevent.key = ev.keyCode;
	            this.handleEvent(wevent);
	        };
	        this.autoPeer.onconnected = () => {
	            if (this.autoPeer.isGuest) {
	                this.handleEvent = (evt) => __awaiter(this, void 0, void 0, function* () { return this.autoPeer.connection.send(evt); });
	            }
	            else {
	                this.captureDrawCalls();
	            }
	        };
	        this.autoPeer.ondatareceived = data => {
	            this.autoPeer.isGuest ? this.handleDrawCalls(data) : this.handleEvent(data);
	        };
	    }
	    captureDrawCalls() {
	        Object.getOwnPropertyNames(Graphics.prototype).forEach(method => {
	            const original = this.graphics[method];
	            if (method.startsWith("get") || typeof original !== "function")
	                return;
	            this.graphics[method] = (a, b, c, d, e, f, g, h, i, j) => {
	                const args = [a, b, c, d, e, f, g, h, i, j];
	                original.apply(this.graphics, args);
	                this.drawCalls.push({ method: method, arguments: args });
	                this.sendDrawCalls();
	            };
	        });
	    }
	    sendDrawCalls() {
	        if (this.drawCallSendTimeout)
	            return;
	        this.autoPeer.connection.send(this.drawCalls.splice(0, this.drawCalls.length));
	        this.drawCallSendTimeout = requestAnimationFrame(() => {
	            this.autoPeer.connection.send(this.drawCalls.splice(0, this.drawCalls.length));
	            this.drawCallSendTimeout = null;
	        });
	    }
	    handleDrawCalls(calls) {
	        const graphics = this.graphics;
	        calls && graphics && calls.forEach(call => {
	            graphics[call.method].apply(graphics, call.arguments);
	        });
	    }
	    handleEvent(wevent) {
	        const _this = this;
	        switch (wevent.id) {
	            case 401:
	                _this.keyDown(wevent, wevent.key);
	                break;
	            case 402:
	                _this.keyUp(wevent, wevent.key);
	                break;
	            case 501:
	                _this.mouseUp(wevent, wevent.x, wevent.y);
	                break;
	        }
	        return Promise.resolve(false);
	    }
	}
	exports.Applet = Applet;
	class Thread {
	    constructor(runnable) {
	        this.runnable = runnable;
	    }
	    static sleep(ms, b) {
	        return new Promise(res => setTimeout(res, ms));
	    }
	    start() {
	        this.runnable.run();
	    }
	    stop() {
	    }
	}
	exports.Thread = Thread;
	class PrintStream {
	    print(s) { console.log(s); }
	    println(s) { console.log(s); }
	}
	exports.PrintStream = PrintStream;
	class System {
	    static currentTimeMillis() {
	        return Date.now();
	    }
	}
	System.out = new PrintStream();
	exports.System = System;
	class AppletContext {
	    showDocument(url, str) { }
	}
	exports.AppletContext = AppletContext;
	class DocumentBase {
	    getHost() {
	        return "slimetennis.com";
	    }
	}
	exports.DocumentBase = DocumentBase;
	class URL {
	    constructor(location) {
	        this.location = location;
	    }
	    openStream() {
	        return new InputStream();
	    }
	    toString() {
	        return this.location;
	    }
	}
	exports.URL = URL;
	class BufferedImage extends Image {
	    constructor(x, y, z) {
	        super(null);
	        this.x = x;
	        this.y = y;
	        this.z = z;
	    }
	    getSubimage(x, y, w, h) {
	        return this;
	    }
	}
	exports.BufferedImage = BufferedImage;
	class Vector {
	    constructor(n) {
	        this.arr = new Array();
	    }
	    get(i) {
	        return this.arr[i];
	    }
	    size() {
	        return this.arr.length;
	    }
	    add(numbers) {
	        this.arr.push(numbers);
	    }
	    removeAllElements() {
	        this.arr = [];
	    }
	}
	exports.Vector = Vector;
	class Element {
	    add(el) {
	    }
	}
	exports.Element = Element;
	class Frame extends Element {
	    setTitle(s) {
	    }
	    pack() {
	    }
	    show() {
	    }
	    dispose() {
	    }
	    setLayout(layout) {
	    }
	}
	exports.Frame = Frame;
	class TextField extends Element {
	    constructor(size) {
	        super();
	    }
	    getText() {
	        console.error("not implemented");
	        return "?????????????";
	    }
	}
	exports.TextField = TextField;
	class Button extends Element {
	    constructor(label) {
	        super();
	        this.label = label;
	    }
	}
	exports.Button = Button;
	class Polygon {
	    constructor(xs, ys, n) {
	        this.xs = xs;
	        this.ys = ys;
	        this.n = n;
	    }
	}
	exports.Polygon = Polygon;
	class InputStream {
	    close() { }
	}
	exports.InputStream = InputStream;
	class BufferedReader {
	    constructor(reader) {
	        this.reader = reader;
	    }
	    readLine() {
	        return null;
	    }
	    close() {
	    }
	}
	exports.BufferedReader = BufferedReader;
	class InputStreamReader {
	    constructor(stream) {
	        this.stream = stream;
	    }
	}
	exports.InputStreamReader = InputStreamReader;
	class Panel extends Element {
	}
	exports.Panel = Panel;
	class Label extends Element {
	    constructor(text) {
	        super();
	        this.text = text;
	    }
	}
	exports.Label = Label;
	class GridLayout {
	    constructor(x, y) {
	        this.x = x;
	        this.y = y;
	    }
	}
	exports.GridLayout = GridLayout;
	class Long {
	    static parseLong(s) {
	        return Number(s);
	    }
	}
	exports.Long = Long;
	class Chars {
	    static charCodeArray(s) {
	        return s.split("").map(c => c.charCodeAt(0));
	    }
	}
	exports.Chars = Chars;
	class ImageObserver {
	}
	exports.ImageObserver = ImageObserver;
	class Random {
	    nextInt(max) {
	        return Math.floor(Math.random() * max);
	    }
	}
	exports.Random = Random;
	class AudioClip {
	    play() {
	    }
	}
	exports.AudioClip = AudioClip;
	class StringBuffer {
	    constructor(initial) {
	        this.pieces = new Array();
	        if (typeof initial !== "undefined")
	            this.append(initial);
	    }
	    append(text) {
	        this.pieces.push(text);
	        return this;
	    }
	    toString() {
	        return this.pieces.join("");
	    }
	}
	exports.StringBuffer = StringBuffer;


/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	class AutoPeer {
	    constructor(apiKey) {
	        this.connection = null;
	        this.peer = null;
	        this.peerOptions = null;
	        this.isHost = false;
	        this.isGuest = false;
	        this.ondatareceived = null;
	        this.onconnected = null;
	        this.server = "https://slimejs.herokuapp.com/";
	        this.peerOptions = {
	            key: apiKey
	        };
	        $.get(this.server + "ping").then(pong => {
	            this.log("Server is awake, and says: " + pong);
	        });
	    }
	    /** Get the AutoPeer instance. This will throw if there's no instance, so make sure it's initialised before calling this. */
	    static Get() {
	        if (!AutoPeer.instance) {
	            throw new Error("No instance of AutoPeer exists");
	        }
	        return AutoPeer.instance;
	    }
	    /** Create and return the AutoPeer instance. */
	    static Create(apiKey) {
	        if (AutoPeer.instance) {
	            throw new Error(`There's already an AutoPeer instance.`);
	        }
	        return AutoPeer.instance = new AutoPeer(apiKey);
	    }
	    log(text) {
	        console.log(text);
	        const logEl = document.getElementById("peerjs-log");
	        if (logEl)
	            logEl.innerText += "\r\n" + text;
	    }
	    register() {
	        return __awaiter(this, void 0, void 0, function* () {
	            const peer = new Peer(Date.now().toString(), this.peerOptions);
	            yield $.post(this.server + "host?" + $.param({ id: peer.id }));
	            return peer;
	        });
	    }
	    deleteHostId(id) {
	        return __awaiter(this, void 0, void 0, function* () {
	            return yield $.post(this.server + "deletehost?" + $.param({ id }));
	        });
	    }
	    takeHostId() {
	        return __awaiter(this, void 0, void 0, function* () {
	            return yield $.post(this.server + "takehost?" + $.param({ me: this.peer.id }));
	        });
	    }
	    handleNewConnection(connection) {
	        this.log(`Connection to ${connection.peer} established. Opening...`);
	        connection["once"]("data", d => this.log("Received some data from " + connection.peer + ": " + d));
	        connection.on("open", () => __awaiter(this, void 0, void 0, function* () {
	            this.log(`Connection to ${connection.peer} opened.`);
	            yield this.deleteHostId(this.peer.id);
	            if (this.connection) {
	                this.log(`New connection to ${connection.peer} arrived but we're already connected to ${this.connection.peer}. Closing the new connection.`);
	                connection.close();
	                return;
	            }
	            connection.on("close", () => {
	                this.log(`Connection with ${connection.peer} was closed. Try refreshing.`);
	            });
	            this.isHost = Number(this.peer.id) < Number(connection.peer);
	            this.isGuest = !this.isHost;
	            this.log(`Now connected to ${connection.peer}. You are ${this.isHost ? "host" : "guest"}.`);
	            connection.serialization = "json";
	            connection.send("Hi I'm " + this.peer.id);
	            this.connection = connection;
	            this.onconnected && this.onconnected();
	            this.connection.on("data", data => {
	                this.ondatareceived && this.ondatareceived(data);
	            });
	            this.connection.on("close", () => {
	                this.connection = null;
	            });
	        }));
	    }
	    connect() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.log("Connecting...");
	            this.peer = yield this.register();
	            this.log("Registered as host: " + this.peer.id);
	            this.peer.on("connection", conn => this.handleNewConnection(conn));
	            const otherHostId = yield this.takeHostId();
	            if (!otherHostId) {
	                return this.log("No hosts online. You'll have to wait.");
	            }
	            const connectionToOther = this.peer.connect(otherHostId);
	            this.handleNewConnection(connectionToOther);
	        });
	    }
	    disconnect() {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (this.connection) {
	                this.connection.close();
	                this.connection = null;
	            }
	            if (this.peer) {
	                yield this.deleteHostId(this.peer.id);
	            }
	        });
	    }
	}
	AutoPeer.instance = null;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = AutoPeer;


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class Slime2P extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 750;
	        this.recommended_height = 375;
	        this.scoringRunForSuper = 6;
	        this.nightTime = false;
	        this.psycho = false;
	        this.backwards = false;
	        this.timer = false;
	        this.buffered = false;
	        this.nyt = "night";
	        this.psy = "super";
	        this.bck = "toast";
	        this.tim = "clock";
	        this.wnd = "windy";
	        this.hl2 = "2mins";
	        this.hl3 = "3mins";
	        this.hl4 = "4mins";
	        this.hl5 = "5mins";
	        this.bfr = "uffer";
	        this.GAME_LENGTH = 120000;
	        this.holdingOn = false;
	        this.HOLDING_LENGTH = 5000;
	        this.windOn = false;
	        this.maxWind = 30;
	        this.NUM_PARTICLES = 60;
	        this.particle_size = 3;
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1X = 0;
	        this.p1Y = 0;
	        this.p2X = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldX = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Fire = false;
	        this.fP2Fire = false;
	        this.superFlash = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.fP1Touches = 0;
	        this.fP2Touches = 0;
	        this.fP1TouchesTot = 0;
	        this.fP2TouchesTot = 0;
	        this.fP1Clangers = 0;
	        this.fP2Clangers = 0;
	        this.fP1Aces = 0;
	        this.fP2Aces = 0;
	        this.fP1Winners = 0;
	        this.fP2Winners = 0;
	        this.fP1PointsWon = 0;
	        this.fP2PointsWon = 0;
	        this.fP1HitStill = false;
	        this.fP2HitStill = false;
	        this.fP1Frames = 0;
	        this.fP2Frames = 0;
	        this.fP1Super = 0;
	        this.fP2Super = 0;
	        this.fP1Streak = 0;
	        this.fP2Streak = 0;
	        this.fSelectedColours = false;
	        this.fServerMoved = false;
	        this.hitNetSinceTouched = false;
	        this.fEndGame = false;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.realStartTime = 0;
	        this.crossedNetTime = 0;
	        this.scoringRun = 0;
	        this.oldScoringRun = 0;
	        this.firstHalf = false;
	        this.wind = 0;
	        this.floor = 0;
	        this.particle_x = new Array(this.NUM_PARTICLES);
	        this.particle_y = new Array(this.NUM_PARTICLES);
	        this.particle_weight = new Array(this.NUM_PARTICLES);
	        this.floor = 280;
	    }
	    init() {
	        var var1 = "footyslime.com";
	        if (!(var1 === "footyslime.com")) {
	            try {
	                this.getAppletContext().showDocument(new shims_1.URL("http://footyslime.com/"), "_self");
	            }
	            catch (var6) {
	                shims_1.System.out.println("Couldn\'t initialise!");
	                throw new Error("Couldn\'t initialise!");
	            }
	            ;
	        }
	        this.SKY_COL = new shims_1.Color(85, 85, 255);
	        this.COURT_COL = new shims_1.Color(0, 168, 0);
	        this.BALL_COL = shims_1.Color.fromString("yellow");
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.promptMsg = "Click the mouse to play...";
	        this.screen = this.getGraphics();
	        this.baseFont = this.screen.getFont();
	        this.screen.setFont(new shims_1.Font(this.baseFont.getName(), 1, 15));
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 6]);
	        this.firstHalf = true;
	        var var2 = (this.nWidth / 10 | 0);
	        var var3 = (2 * this.nHeight / 10 | 0);
	        for (var var4 = 0; var4 < this.NUM_PARTICLES; ++var4) {
	            this.particle_x[var4] = ((Math.random() * this.nWidth) | 0);
	            this.particle_y[var4] = ((-Math.random() * 50.0) | 0);
	            this.particle_weight[var4] = (Math.random() * 0.95 + 0.05);
	        }
	        this.slimeColText = ["Bronco Slime ", "Canterbury Bullslime ", "Cowboy Slime ", "Dragon McSlimer ", "Slimy Eel Slime ", "Knight Slimer ", "Panther Slime ", "Rabbitoh Slime ", "Raider of the Lost Slime ", "Rooster Slime ", "Womanly Slime ", "Shark Slime ", "Stormy Slime ", "Tiger Slime ", "Warrior Slime "];
	        this.slimeColours = [new shims_1.Color(96, 10, 44), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("yellow"), new shims_1.Color(0, 48, 149), shims_1.Color.fromString("black"), new shims_1.Color(140, 78, 0), new shims_1.Color(167, 216, 11), new shims_1.Color(23, 33, 86), new shims_1.Color(106, 10, 35), new shims_1.Color(0, 173, 227), new shims_1.Color(117, 22, 158), new shims_1.Color(25, 25, 25), new shims_1.Color(48, 34, 37)];
	        this.slimeColours2 = [new shims_1.Color(231, 155, 36), new shims_1.Color(0, 34, 135), new shims_1.Color(6, 40, 79), new shims_1.Color(185, 0, 0), new shims_1.Color(0, 30, 76), new shims_1.Color(237, 37, 64), new shims_1.Color(0, 133, 152), new shims_1.Color(225, 8, 30), new shims_1.Color(0, 35, 154), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(31, 28, 28), new shims_1.Color(161, 161, 162), new shims_1.Color(255, 135, 10), new shims_1.Color(212, 211, 205)];
	        this.field_rn_Slime2P_pw_1 = (".....").split('');
	        this.buffer = this.createImage(this.nWidth, this.nHeight);
	        if (this.buffered) {
	            this.buffered = false;
	            for (var var5 = 0; var5 < this.bfr.length; ++var5) {
	                this.pwAddChar(/* toCharArray */ (this.bfr).split('')[var5]);
	            }
	        }
	    }
	    paint(var1) {
	        var var2 = this.buffered ? this.buffer.getGraphics() : this.getGraphics();
	        var2.setColor(this.SKY_COL);
	        var2.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        var2.setColor(this.COURT_COL);
	        var2.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        var2.setColor(shims_1.Color.fromString("white"));
	        var2.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	        this.drawScores();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var var3 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fP1PointsWon + this.fP2PointsWon > 0) {
	                if (this.firstHalf) {
	                    this.screen.drawString("NRL Slime Volleyball!", (this.nWidth / 2 | 0) - (var3.stringWidth("NRL Slime Volleyball!") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 5);
	                }
	                var2.setColor(shims_1.Color.fromString("white"));
	                var3 = var2.getFontMetrics();
	                if (!this.firstHalf) {
	                    var2.drawString("First half stats:", (this.nWidth / 2 | 0) - (var3.stringWidth("First half stats:") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 4);
	                }
	                else {
	                    var2.drawString("Last game\'s stats:", (this.nWidth / 2 | 0) - (var3.stringWidth("Last game\'s stats:") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 4);
	                }
	                var var4 = ["Possession", "Touches", "Points won", "Winners", "Aces", "Clangers", "Super Slimes", "Longest streak"];
	                var var5 = [["" + Math.round(100 * this.fP1Frames / (this.fP1Frames + this.fP2Frames)) + "%", "" + this.fP1TouchesTot, "" + this.fP1PointsWon, "" + this.fP1Winners, "" + this.fP1Aces, "" + this.fP1Clangers, "" + this.fP1Super, "" + this.fP1Streak], ["" + (100 - Math.round(100 * this.fP1Frames / (this.fP1Frames + this.fP2Frames))) + "%", "" + this.fP2TouchesTot, "" + this.fP2PointsWon, "" + this.fP2Winners, "" + this.fP2Aces, "" + this.fP2Clangers, "" + this.fP2Super, "" + this.fP2Streak]];
	                var var6 = 0;
	                for (var var7 = 0; var7 < var4.length; ++var7) {
	                    var6 = Math.max(var6, var3.stringWidth(var4[var7]));
	                }
	                for (var var8 = 0; var8 < var4.length; ++var8) {
	                    var2.drawString(var4[var8], (this.nWidth / 2 | 0) - (var3.stringWidth(var4[var8]) / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * (var8 - 2));
	                    var2.drawString(var5[0][var8], (this.nWidth / 2 | 0) - var6 - (var3.stringWidth(var5[0][var8]) / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * (var8 - 2));
	                    var2.drawString(var5[1][var8], (this.nWidth / 2 | 0) + var6 - (var3.stringWidth(var5[1][var8]) / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * (var8 - 2));
	                }
	                this.drawPrompt(!this.firstHalf ? "Swap sides and click the mouse to continue..." : "Click the mouse to start another game!", 0);
	            }
	            else {
	                this.screen.drawString("NRL Slime Volleyball!", (this.nWidth / 2 | 0) - (var3.stringWidth("NRL Slime Volleyball!") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight());
	                var2.setColor(shims_1.Color.fromString("white"));
	                var3 = var2.getFontMetrics();
	                var2.drawString("Code base by Quin Pendragon", (this.nWidth / 2 | 0) - (var3.stringWidth("Code base by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * 2);
	                var2.drawString("Mod by Daniel Wedge", (this.nWidth / 2 | 0) - (var3.stringWidth("Mod by Daniel Wedge") / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * 3);
	                var2.drawString("Wind particles by Tim Lightfoot", (this.nWidth / 2 | 0) - (var3.stringWidth("Wind particles by Tim Lightfoot") / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * 4);
	            }
	        }
	        if (this.buffered) {
	            var1.drawImage(this.buffer, 0, 0, this);
	        }
	    }
	    handleEvent(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((var1.id)) {
	                case 401:
	                case 403:
	                    if (!this.fEndGame) {
	                        if (!this.fSelectedColours) {
	                            this.pwAddChar(String.fromCharCode(var1.key));
	                        }
	                        switch ((var1.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                break;
	                            case 65:
	                            case 97:
	                                if (!this.backwards) {
	                                    this.moveP1Left();
	                                }
	                                else {
	                                    this.moveP1Right();
	                                }
	                                break;
	                            case 68:
	                            case 100:
	                                if (!this.backwards) {
	                                    this.moveP1Right();
	                                }
	                                else {
	                                    this.moveP1Left();
	                                }
	                                break;
	                            case 73:
	                            case 105:
	                                this.moveP2Jump();
	                                break;
	                            case 74:
	                            case 106:
	                                if (!this.backwards) {
	                                    this.moveP2Left();
	                                }
	                                else {
	                                    this.moveP2Right();
	                                }
	                                break;
	                            case 75:
	                            case 107:
	                                if (!this.fSelectedColours) {
	                                    this.changeP2Col();
	                                }
	                                break;
	                            case 76:
	                            case 108:
	                                if (!this.backwards) {
	                                    this.moveP2Right();
	                                }
	                                else {
	                                    this.moveP2Left();
	                                }
	                                break;
	                            case 83:
	                            case 115:
	                                if (!this.fSelectedColours) {
	                                    this.changeP1Col();
	                                }
	                                break;
	                            case 87:
	                            case 119:
	                                this.moveP1Jump();
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((var1.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV * (this.backwards ? -1 : 1) < 0) {
	                                this.moveP1Stop();
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV * (this.backwards ? -1 : 1) > 0) {
	                                this.moveP1Stop();
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                            if (this.p2XV * (this.backwards ? -1 : 1) < 0) {
	                                this.moveP2Stop();
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                            if (this.p2XV * (this.backwards ? -1 : 1) > 0) {
	                                this.moveP2Stop();
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 200;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.hitNetSinceTouched = false;
	                        this.promptMsg = "";
	                        this.repaint();
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    else if (!this.fSelectedColours) {
	                        this.fInPlay = true;
	                        this.replayStart = 0;
	                        this.replayPos = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 200;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.hitNetSinceTouched = false;
	                        this.promptMsg = "";
	                        this.fP1Touched = false;
	                        this.fP2Touched = false;
	                        this.fServerMoved = false;
	                        this.drawPrompt();
	                        this.DrawStatus();
	                        this.repaint();
	                        this.startTime = shims_1.System.currentTimeMillis();
	                        this.realStartTime = this.startTime;
	                        this.fSelectedColours = true;
	                    }
	                    break;
	                case 503:
	                    this.showStatus("NRL Slime Volleyball: http://footyslime.com/nrl/");
	            }
	            return false;
	        });
	    }
	    pwAddChar(var1) {
	        for (var var2 = 0; var2 < 4; this.field_rn_Slime2P_pw_1[var2++] = this.field_rn_Slime2P_pw_1[var2]) {
	        }
	        this.field_rn_Slime2P_pw_1[4] = var1;
	        var var3 = (new String(this.field_rn_Slime2P_pw_1)).toLowerCase();
	        var var4 = false;
	        if ((var3 === this.nyt)) {
	            var4 = true;
	            this.nightTime = !this.nightTime;
	            this.SKY_COL = this.nightTime ? new shims_1.Color(0, 0, 70) : new shims_1.Color(85, 85, 255);
	            this.COURT_COL = this.nightTime ? new shims_1.Color(0, 100, 0) : new shims_1.Color(0, 168, 0);
	            this.BALL_COL = this.nightTime ? shims_1.Color.fromString("white") : shims_1.Color.fromString("yellow");
	            this.repaint();
	            this.promptMsg = this.nightTime ? "... and the lights come on at Slime Stadium!" : "The Slime Sun has risen!";
	        }
	        else if ((var3 === this.psy)) {
	            var4 = true;
	            this.psycho = !this.psycho;
	            this.promptMsg = this.psycho ? "Can\'t get to the ball fast enough?" : "Can\'t handle the pace?";
	        }
	        else if ((var3 === this.bck)) {
	            var4 = true;
	            this.backwards = !this.backwards;
	            this.promptMsg = this.backwards ? "Slime God Clive blesses you!" : "Don\'t like challenges, huh?";
	        }
	        else if ((var3 === this.tim)) {
	            var4 = true;
	            this.timer = !this.timer;
	            this.promptMsg = this.timer ? "Don\'t like the uncertainty of time on? Pathetic." : "Welcome back from the other side.";
	        }
	        else if ((var3 === this.wnd)) {
	            var4 = true;
	            this.windOn = !this.windOn;
	            this.promptMsg = !this.windOn ? "Can\'t handle the challenge?" : "Yeah, wind is good.";
	            if (!this.windOn) {
	                this.unDrawParticles();
	            }
	        }
	        else if ((var3 === this.bfr)) {
	            var4 = true;
	            this.buffered = !this.buffered;
	            this.screen = this.buffered ? this.buffer.getGraphics() : this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.baseFont.getName(), 1, 15));
	            if (this.fInPlay) {
	                this.promptMsg = this.buffered ? "Double buffering is on." : "Do not adjust your set... the Slimes are flickery.";
	            }
	        }
	        else if ((var3 === this.hl2)) {
	            var4 = true;
	            this.GAME_LENGTH = 120000;
	            this.promptMsg = "Halves now two minutes long.";
	        }
	        else if ((var3 === this.hl3)) {
	            var4 = true;
	            this.GAME_LENGTH = 180000;
	            this.promptMsg = "Halves now three minutes long.";
	        }
	        else if ((var3 === this.hl4)) {
	            var4 = true;
	            this.GAME_LENGTH = 240000;
	            this.promptMsg = "Halves now four minutes long.";
	        }
	        else if ((var3 === this.hl5)) {
	            var4 = true;
	            this.GAME_LENGTH = 300000;
	            this.promptMsg = "Halves now five minutes long.";
	        }
	        if (var4) {
	            this.fServerMoved = true;
	            this.drawPrompt();
	        }
	    }
	    moveP1Left() {
	        this.p1XV = this.scoringRun > -6 && !this.psycho ? -8 : -16;
	        if (this.p1X === 200 && this.ballX === 200 && !this.fP2Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	        }
	    }
	    moveP1Right() {
	        this.p1XV = this.scoringRun > -6 && !this.psycho ? 8 : 16;
	        if (this.p1X === 200 && this.ballX === 200 && !this.fP2Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	        }
	    }
	    moveP1Stop() {
	        this.p1XV = 0;
	    }
	    moveP1Jump() {
	        if (this.p1Y === 0) {
	            this.p1YV = this.scoringRun > -6 && !this.psycho ? 31 : 45;
	        }
	    }
	    changeP1Col() {
	        do {
	            this.p1Col = (this.p1Col + 1) % this.slimeColText.length;
	        } while ((this.p1Col === this.p2Col));
	    }
	    moveP2Left() {
	        this.p2XV = this.scoringRun < 6 && !this.psycho ? -8 : -16;
	        if (this.p2X === 800 && this.ballX === 800 && !this.fP1Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	        }
	    }
	    moveP2Right() {
	        this.p2XV = this.scoringRun < 6 && !this.psycho ? 8 : 16;
	        if (this.p2X === 800 && this.ballX === 800 && !this.fP1Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	        }
	    }
	    moveP2Stop() {
	        this.p2XV = 0;
	    }
	    moveP2Jump() {
	        if (this.p2Y === 0) {
	            this.p2YV = this.scoringRun < 6 && !this.psycho ? 31 : 45;
	        }
	    }
	    changeP2Col() {
	        do {
	            this.p2Col = (this.p2Col + 1) % this.slimeColText.length;
	        } while ((this.p2Col === this.p1Col));
	    }
	    MoveSlimers() {
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 445) {
	            this.p1X = 445;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.scoringRun > -6 && !this.psycho ? 2 : 4;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 555) {
	            this.p2X = 555;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.scoringRun < 6 && !this.psycho ? 2 : 4;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    DrawSlimers() {
	        var var1 = (this.nWidth / 10 | 0);
	        var var2 = (this.nHeight / 10 | 0);
	        var var3 = (this.nWidth / 50 | 0);
	        var var4 = (this.nHeight / 25 | 0);
	        var var5 = (this.ballX * this.nWidth / 1000 | 0);
	        var var6 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var var7 = (this.p1OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var var8 = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.SKY_COL);
	        this.screen.fillRect(var7, var8, var1, var2);
	        var7 = (this.p2OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.SKY_COL);
	        this.screen.fillRect(var7, var8, var1, var2);
	        this.MoveBall();
	        var7 = (this.p1X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.fP1Fire = this.scoringRun <= -6 || this.psycho;
	        this.fP2Fire = this.scoringRun >= 6 || this.psycho;
	        if (this.fP1Fire || this.fP2Fire || this.psycho) {
	            this.superFlash = !this.superFlash;
	        }
	        this.DrawStrip(this.screen, var7, var8, var1, var2, this.p1Col);
	        var var9 = this.p1X + 38;
	        var var10 = this.p1Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var var11 = var7 - var5;
	        var var12 = var8 - var6;
	        var var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	        if (var13 > 0) {
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	        }
	        var7 = (this.p2X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.DrawStrip(this.screen, var7, var8, var1, var2, this.p2Col);
	        var9 = this.p2X - 18;
	        var10 = this.p2Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var11 = var7 - var5;
	        var12 = var8 - var6;
	        var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	        if (var13 > 0) {
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	        }
	        if (Math.abs(this.scoringRun) < 6 && !this.psycho) {
	            this.superFlash = false;
	        }
	    }
	    DrawStrip(var1, var2, var3, var4, var5, var6) {
	        var var7 = false;
	        if (var6 === this.p1Col && (this.fP1Fire || this.psycho) || var6 === this.p2Col && (this.fP2Fire || this.psycho)) {
	            var7 = this.superFlash;
	        }
	        var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);
	        var1.fillArc(var2, var3, var4, 2 * var5, 0, 180);
	        var1.setColor(var7 ? this.slimeColours[var6] : this.slimeColours2[var6]);
	        switch ((var6)) {
	            case 0:
	            case 2:
	            case 4:
	            case 5:
	            case 6:
	            case 8:
	            case 11:
	            case 13:
	                var1.setColor(var7 ? this.slimeColours[var6] : this.slimeColours2[var6]);
	                var1.fillArc(var2, var3, var4, 2 * var5, 0, 180);
	                var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);
	                var1.fillPolygon(new shims_1.Polygon([var2 + (var4 / 5 | 0), var2 + (4 * var4 / 5 | 0), var2 + (4 * var4 / 5 | 0), var2 + (var4 / 5 | 0)], [((0.2 * var5 + var3) | 0), ((0.2 * var5 + var3) | 0), var3 + var5, var3 + var5], 4));
	                var1.fillArc(var2, var3, var4, 2 * var5, 53, 74);
	                if (var6 === 2) {
	                    var1.setColor(var7 ? this.slimeColours[var6] : this.slimeColours2[var6]);
	                    var1.fillArc(var2, var3, var4, 2 * var5, 0, 19);
	                    var1.fillArc(var2, var3, var4, 2 * var5, 161, 19);
	                    var1.fillRect(((0.029 * var4 + var2) | 0), var3 + (2 * var5 / 3 | 0), ((0.942 * var4) | 0), (var5 / 3 | 0));
	                }
	                break;
	            case 1:
	            case 3:
	            case 9:
	            case 12:
	            case 14:
	                var1.fillArc(var2, var3, var4, 2 * var5, 40, 100);
	                if (var6 === 9) {
	                    var1.setColor(shims_1.Color.fromString("white"));
	                }
	                else if (var6 === 12) {
	                    var1.setColor(new shims_1.Color(0, 28, 87));
	                }
	                else {
	                    var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);
	                }
	                var1.fillArc(var2, var3, var4, 2 * var5, 70, 40);
	                break;
	            case 7:
	                var1.fillArc(var2, var3, var4, 2 * var5, 19, 23);
	                var1.fillArc(var2, var3, var4, 2 * var5, 138, 23);
	                var1.fillRect(((0.128 * var4 + var2) | 0), var3 + (var5 / 3 | 0), ((0.744 * var4) | 0), (2 * var5 / 3 | 0));
	                var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);
	                var1.fillArc(var2, var3, var4, 2 * var5, 0, 19);
	                var1.fillArc(var2, var3, var4, 2 * var5, 161, 19);
	                var1.fillRect(((0.029 * var4 + var2) | 0), var3 + (2 * var5 / 3 | 0), ((0.942 * var4) | 0), (var5 / 3 | 0));
	                break;
	            case 10:
	                var1.setColor(shims_1.Color.fromString("white"));
	                var1.drawLine(((0.128 * var4 + var2) | 0), var3 + (var5 / 3 | 0), ((0.872 * var4 + var2) | 0), var3 + (var5 / 3 | 0));
	                var1.drawLine(((0.029 * var4 + var2) | 0), var3 + (2 * var5 / 3 | 0), ((0.971 * var4 + var2) | 0), var3 + (2 * var5 / 3 | 0));
	        }
	    }
	    doWind() {
	        if (this.windOn && Math.random() >= 0.9) {
	            this.wind += ((2.0 - 4.0 * Math.random()) | 0);
	            if (this.wind > 30) {
	                this.wind = 30;
	            }
	            else if (this.wind < -30) {
	                this.wind = -30;
	            }
	        }
	    }
	    MoveBall() {
	        var var1 = (30 * this.nHeight / 1000 | 0);
	        var var2 = (this.ballOldX * this.nWidth / 1000 | 0);
	        var var3 = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.SKY_COL);
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (this.windOn && this.fServerMoved) {
	            this.ballX *= 10;
	            this.ballX += this.wind;
	            this.ballX /= 10;
	        }
	        if (!this.fEndGame) {
	            var var4 = (this.ballX - this.p1X) * 2;
	            var var5 = this.ballY - this.p1Y;
	            var var6 = var4 * var4 + var5 * var5;
	            var var7 = this.ballVX - this.p1XV;
	            var var8 = this.ballVY - this.p1YV;
	            var var9;
	            var var10;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p1X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p1Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    this.ballVX += this.p1XV - (2 * var4 * var10 / var9 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p1YV - (2 * var5 * var10 / var9 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                if (this.fServerMoved) {
	                    this.fP1Touched = true;
	                    ++this.fP1Touches;
	                    ++this.fP1TouchesTot;
	                    this.fP2Touches = 0;
	                    this.fP1HitStill = this.p1YV === 0 && this.p1XV === 0;
	                    this.hitNetSinceTouched = false;
	                }
	            }
	            var4 = (this.ballX - this.p2X) * 2;
	            var5 = this.ballY - this.p2Y;
	            var6 = var4 * var4 + var5 * var5;
	            var7 = this.ballVX - this.p2XV;
	            var8 = this.ballVY - this.p2YV;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p2X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p2Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    this.ballVX += this.p2XV - (2 * var4 * var10 / var9 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p2YV - (2 * var5 * var10 / var9 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                if (this.fServerMoved) {
	                    this.fP2Touched = true;
	                    this.fP1Touches = 0;
	                    ++this.fP2Touches;
	                    ++this.fP2TouchesTot;
	                    this.fP2HitStill = this.p2YV === 0 && this.p2XV === 0;
	                    this.hitNetSinceTouched = false;
	                }
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 480 && this.ballX < 520 && this.ballY < 140) {
	                if (this.ballVY < 0 && this.ballY > 130) {
	                    this.ballVY *= -1;
	                    this.ballY = 130;
	                }
	                else if (this.ballX < 500) {
	                    this.ballX = 480;
	                    this.ballVX = this.ballVX >= 0 ? -this.ballVX : this.ballVX;
	                    this.hitNetSinceTouched = true;
	                }
	                else {
	                    this.ballX = 520;
	                    this.ballVX = this.ballVX <= 0 ? -this.ballVX : this.ballVX;
	                    this.hitNetSinceTouched = true;
	                }
	            }
	        }
	        var2 = (this.ballX * this.nWidth / 1000 | 0);
	        var3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.BALL_COL);
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	    }
	    drawScores() {
	        var var1 = this.screen;
	        var var2 = var1.getFontMetrics();
	        var var3 = (this.nHeight / 25 | 0);
	        var var4 = (this.nHeight / 15 | 0);
	        var1.setColor(this.SKY_COL);
	        var1.fillRect(0, 0, this.nWidth, var4 + 22);
	        var var5 = 20;
	        for (var var6 = 0; var6 < (this.fP1PointsWon / 10 | 0); ++var6) {
	            var1.setColor(this.slimeColours[this.p1Col]);
	            var1.fillOval(var5, 30 - (var4 / 2 | 0), var4, var4);
	            var1.setColor(this.slimeColours2[this.p1Col]);
	            var1.drawOval(var5, 30 - (var4 / 2 | 0), var4, var4);
	            var5 += (var4 / 2 | 0);
	        }
	        if (this.fP1PointsWon >= 20) {
	            var1.drawString("" + (this.fP1PointsWon / 10 | 0), var5 - (var2.stringWidth("" + (this.fP1PointsWon / 10 | 0)) / 2 | 0), 30 + (var2.getAscent() / 2 | 0));
	        }
	        if (this.fP1PointsWon > 10) {
	            var5 += (var4 / 2 | 0) + 10;
	        }
	        for (var var7 = 0; var7 < this.fP1PointsWon % 10; ++var7) {
	            var1.setColor(this.slimeColours[this.p1Col]);
	            var1.fillOval(var5, 30 - (var3 / 2 | 0), var3, var3);
	            var1.setColor(this.slimeColours2[this.p1Col]);
	            var1.drawOval(var5, 30 - (var3 / 2 | 0), var3, var3);
	            var5 += var3 + 5;
	        }
	        var5 = this.nWidth - 20 - ((this.fP2PointsWon / 10 | 0) * var4 / 2 | 0) - (this.fP2PointsWon % 10 === 0 ? (var4 / 2 | 0) + 10 : 0) - this.fP2PointsWon % 10 * var3 - (this.fP2PointsWon % 10 > 0 ? this.fP2PointsWon % 10 - 1 : 0) * 5;
	        if (this.fP2PointsWon > 10 && this.fP2PointsWon % 10 !== 0) {
	            var5 -= (var4 / 2 | 0) + 10;
	        }
	        for (var var8 = 0; var8 < (this.fP2PointsWon / 10 | 0); ++var8) {
	            var1.setColor(this.slimeColours[this.p2Col]);
	            var1.fillOval(var5, 30 - (var4 / 2 | 0), var4, var4);
	            var1.setColor(this.slimeColours2[this.p2Col]);
	            var1.drawOval(var5, 30 - (var4 / 2 | 0), var4, var4);
	            var5 += (var4 / 2 | 0);
	        }
	        if (this.fP2PointsWon >= 20) {
	            var1.drawString("" + (this.fP2PointsWon / 10 | 0), var5 - (var2.stringWidth("" + (this.fP2PointsWon / 10 | 0)) / 2 | 0), 30 + (var2.getAscent() / 2 | 0));
	        }
	        if (this.fP2PointsWon > 10) {
	            var5 += (var4 / 2 | 0) + 10;
	        }
	        for (var var9 = 0; var9 < this.fP2PointsWon % 10; ++var9) {
	            var1.setColor(this.slimeColours[this.p2Col]);
	            var1.fillOval(var5, 30 - (var3 / 2 | 0), var3, var3);
	            var1.setColor(this.slimeColours2[this.p2Col]);
	            var1.drawOval(var5, 30 - (var3 / 2 | 0), var3, var3);
	            var5 += var3 + 5;
	        }
	    }
	    MakeTime(var1) {
	        var var3 = "";
	        var1 = Math.round((2400000.0 * var1 / this.GAME_LENGTH));
	        var var4 = Math.round(var1 / 10) % 100;
	        var var6 = Math.round(var1 / 1000) % 60;
	        var var8 = Math.round(var1 / 60000) % 60;
	        var var10 = Math.round(var1 / 3600000);
	        var3 = var3 + var8 + ":";
	        if (var6 < 10) {
	            var3 = var3 + "0";
	        }
	        var3 = var3 + var6;
	        return var3;
	    }
	    DrawStatus() {
	        var var1 = this.screen;
	        var var2 = var1.getFontMetrics();
	        var var3;
	        if (this.fSelectedColours) {
	            var3 = (this.firstHalf ? "1st" : "2nd") + " half: " + this.MakeTime(this.timer ? this.GAME_LENGTH - this.gameTime : shims_1.System.currentTimeMillis() - this.realStartTime);
	        }
	        else {
	            var3 = this.slimeColText[this.p1Col] + "v " + this.slimeColText[this.p2Col];
	        }
	        if (this.gameTime > this.GAME_LENGTH) {
	            var3 = (this.firstHalf ? "1st" : "2nd") + " half: Final point!";
	        }
	        var var4 = var2.getHeight() * 3;
	        var var5 = var2.stringWidth(var3);
	        var var6 = (this.nWidth / 2 | 0) - (var5 / 2 | 0) - 10;
	        var1.setColor(this.SKY_COL);
	        if (this.fSelectedColours) {
	            var1.fillRect(var6, 0, var5 + 20, var4 + 22);
	        }
	        else {
	            var1.fillRect(0, 0, this.nWidth, var4 + 22);
	        }
	        var1.setColor(shims_1.Color.fromString("white"));
	        var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), var2.getHeight() * 2);
	        if (this.windOn) {
	            if (this.wind < 0) {
	                var3 = "<< " + -this.wind + " km/h";
	            }
	            else if (this.wind > 0) {
	                var3 = this.wind + " km/h >>";
	            }
	            else {
	                var3 = "no wind";
	            }
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), var2.getHeight() * 3);
	        }
	        if (!this.fSelectedColours) {
	            var1.setColor(shims_1.Color.fromString("red"));
	            var3 = "WARM UP ONLY";
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), var2.getHeight() * 4);
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(this.COURT_COL);
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(var1, var2) {
	        if (((typeof var1 === 'string') || var1 === null) && ((typeof var2 === 'number') || var2 === null)) {
	            return (() => {
	                var var3 = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("white"));
	                this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var3.getHeight() * (var2 + 1) + 10);
	            })();
	        }
	        else if (var1 === undefined && var2 === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    ReplayFrame(var1) {
	        var var2 = var1 !== 0 ? var1 - 1 : 199;
	        this.p1OldX = this.replayData[var2][0];
	        this.p1OldY = this.replayData[var2][1];
	        this.p2OldX = this.replayData[var2][2];
	        this.p2OldY = this.replayData[var2][3];
	        this.ballOldX = this.replayData[var2][4];
	        this.ballOldY = this.replayData[var2][5];
	        this.p1X = this.replayData[var1][0];
	        this.p1Y = this.replayData[var1][1];
	        this.p2X = this.replayData[var1][2];
	        this.p2Y = this.replayData[var1][3];
	        this.ballX = this.replayData[var1][4];
	        this.ballY = this.replayData[var1][5];
	        this.ballVX = 0;
	        this.ballVY = 1;
	        this.DrawSlimers();
	        if (this.buffered) {
	            this.getGraphics().drawImage(this.buffer, 0, 0, null);
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.replayPos = this.replayStart = 0;
	            if (this.firstHalf) {
	                this.fSelectedColours = false;
	                this.p1Col = 0;
	                this.p2Col = 1;
	                this.promptMsg = "Select a slime and click the mouse when warmed up.";
	                this.drawPrompt();
	                this.superFlash = false;
	                this.scoringRun = 0;
	                this.fP1Touches = 0;
	                this.fP2Touches = 0;
	                this.fP1TouchesTot = 0;
	                this.fP2TouchesTot = 0;
	                this.fP1Clangers = 0;
	                this.fP2Clangers = 0;
	                this.fP1Aces = 0;
	                this.fP2Aces = 0;
	                this.fP1Winners = 0;
	                this.fP2Winners = 0;
	                this.fP1PointsWon = 0;
	                this.fP2PointsWon = 0;
	                this.fP1Frames = 0;
	                this.fP2Frames = 0;
	                this.fP1Super = 0;
	                this.fP2Super = 0;
	                this.fP1Streak = 0;
	                this.fP2Streak = 0;
	                this.wind = ((30.0 - 60.0 * Math.random()) | 0);
	            }
	            else {
	                this.ballX = 200;
	                this.scoringRun = 0;
	                this.superFlash = false;
	                var var1 = this.p1Col;
	                this.p1Col = this.p2Col;
	                this.p2Col = var1;
	                var1 = this.fP1Touches;
	                this.fP1Touches = this.fP2Touches;
	                this.fP2Touches = var1;
	                var1 = this.fP1TouchesTot;
	                this.fP1TouchesTot = this.fP2TouchesTot;
	                this.fP2TouchesTot = var1;
	                var1 = this.fP1Clangers;
	                this.fP1Clangers = this.fP2Clangers;
	                this.fP2Clangers = var1;
	                var1 = this.fP1Aces;
	                this.fP1Aces = this.fP2Aces;
	                this.fP2Aces = var1;
	                var1 = this.fP1Winners;
	                this.fP1Winners = this.fP2Winners;
	                this.fP2Winners = var1;
	                var1 = this.fP1PointsWon;
	                this.fP1PointsWon = this.fP2PointsWon;
	                this.fP2PointsWon = var1;
	                var var2 = this.fP1Frames;
	                this.fP1Frames = this.fP2Frames;
	                this.fP2Frames = var2;
	                var1 = this.fP1Super;
	                this.fP1Super = this.fP2Super;
	                this.fP2Super = var1;
	                var1 = this.fP1Streak;
	                this.fP1Streak = this.fP2Streak;
	                this.fP2Streak = var1;
	                this.repaint();
	            }
	            this.fP1HitStill = false;
	            this.fP2HitStill = false;
	            this.fServerMoved = false;
	            this.crossedNetTime = 0;
	            this.drawScores();
	            this.fP1Touched = this.fP2Touched = false;
	            this.hitNetSinceTouched = false;
	            var var9 = false;
	            var var8 = false;
	            var var3 = false;
	            this.startTime = shims_1.System.currentTimeMillis();
	            this.realStartTime = this.startTime;
	            while ((this.gameThread != null)) {
	                if (!this.fSelectedColours) {
	                    this.startTime = shims_1.System.currentTimeMillis() - this.gameTime;
	                    this.realStartTime = this.startTime;
	                }
	                else {
	                    this.gameTime = shims_1.System.currentTimeMillis() - this.startTime;
	                }
	                this.SaveReplayData();
	                if (!this.fServerMoved) {
	                    this.crossedNetTime = shims_1.System.currentTimeMillis();
	                }
	                else if (this.crossedNetTime < 0 && this.ballX > 500 - (3 * this.nHeight / 50 | 0) || this.crossedNetTime > 0 && this.ballX < 500 + (3 * this.nHeight / 50 | 0)) {
	                    this.crossedNetTime = this.ballX <= 500 ? -shims_1.System.currentTimeMillis() : shims_1.System.currentTimeMillis();
	                    this.drawPrompt();
	                }
	                this.p1OldX = this.p1X;
	                this.p1OldY = this.p1Y;
	                this.p2OldX = this.p2X;
	                this.p2OldY = this.p2Y;
	                this.ballOldX = this.ballX;
	                this.ballOldY = this.ballY;
	                this.DrawStatus();
	                if (this.windOn) {
	                    this.doWind();
	                    this.unDrawParticles();
	                    this.updateParticles();
	                    this.drawParticles();
	                    this.screen.setColor(shims_1.Color.fromString("white"));
	                    this.screen.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	                }
	                this.MoveSlimers();
	                this.DrawSlimers();
	                if (this.buffered) {
	                    this.getGraphics().drawImage(this.buffer, 0, 0, null);
	                }
	                if (this.fServerMoved && this.fSelectedColours) {
	                    if (this.ballX < 500 - (3 * this.nHeight / 50 | 0)) {
	                        ++this.fP1Frames;
	                    }
	                    else if (this.ballX > 500 + (3 * this.nHeight / 50 | 0)) {
	                        ++this.fP2Frames;
	                    }
	                }
	                if (!this.fSelectedColours && this.ballY < 35) {
	                    shims_1.Thread.sleep(1000, false);
	                    this.p1X = 200;
	                    this.p1Y = 0;
	                    this.p2X = 800;
	                    this.p2Y = 0;
	                    this.p1XV = 0;
	                    this.p1YV = 0;
	                    this.p2XV = 0;
	                    this.p2YV = 0;
	                    this.ballX = this.ballX >= 500 ? 200 : 800;
	                    this.ballY = 400;
	                    this.ballVX = 0;
	                    this.ballVY = 0;
	                    this.fServerMoved = false;
	                    this.fP1Touched = this.fP2Touched = false;
	                    this.repaint();
	                }
	                else {
	                    var var4;
	                    if (this.fSelectedColours && this.holdingOn && Math.abs(this.crossedNetTime) + 5000 < shims_1.System.currentTimeMillis() && this.ballY >= 35) {
	                        var4 = shims_1.System.currentTimeMillis();
	                        this.promptMsg = "BALL... YES!";
	                        this.drawPrompt();
	                        this.promptMsg = "";
	                        this.drawPrompt("Holding the ball against " + (this.ballX <= 500 ? this.slimeColText[this.p1Col] : this.slimeColText[this.p2Col]) + "!!", 1);
	                        this.drawPrompt("Press space for replay...", 2);
	                        if (this.buffered) {
	                            this.getGraphics().drawImage(this.buffer, 0, 0, null);
	                        }
	                        this.mousePressed = false;
	                        if (this.ballX > 500) {
	                            ++this.fP1PointsWon;
	                            ++this.fP2Clangers;
	                        }
	                        else {
	                            ++this.fP2PointsWon;
	                            ++this.fP1Clangers;
	                        }
	                        this.oldScoringRun = this.scoringRun;
	                        if (this.ballX <= 500 && this.scoringRun >= 0) {
	                            ++this.scoringRun;
	                            if (this.scoringRun > this.fP2Streak) {
	                                this.fP2Streak = this.scoringRun;
	                            }
	                        }
	                        else if (this.ballX > 500 && this.scoringRun <= 0) {
	                            --this.scoringRun;
	                            if (-this.scoringRun > this.fP1Streak) {
	                                this.fP1Streak = -this.scoringRun;
	                            }
	                        }
	                        else if (this.ballX <= 500 && this.scoringRun <= 0) {
	                            this.scoringRun = 1;
	                            if (this.scoringRun > this.fP2Streak) {
	                                this.fP2Streak = this.scoringRun;
	                            }
	                        }
	                        else if (this.ballX > 500 && this.scoringRun >= 0) {
	                            this.scoringRun = -1;
	                            if (-this.scoringRun > this.fP1Streak) {
	                                this.fP1Streak = -this.scoringRun;
	                            }
	                        }
	                        this.drawScores();
	                        this.DrawStatus();
	                        shims_1.Thread.sleep(1000, true);
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = this.ballX >= 500 ? 200 : 800;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.fP1Touched = this.fP2Touched = false;
	                        this.fServerMoved = false;
	                        if (this.GAME_LENGTH <= this.gameTime) {
	                            this.endHalf();
	                        }
	                        this.repaint();
	                    }
	                    else if (this.fSelectedColours && this.holdingOn && Math.abs(this.crossedNetTime) + 5000 - 1000 < shims_1.System.currentTimeMillis() && this.ballY >= 35) {
	                        this.promptMsg = "BALL...";
	                        if (this.buffered) {
	                            this.getGraphics().drawImage(this.buffer, 0, 0, null);
	                        }
	                        this.drawPrompt();
	                        this.promptMsg = "";
	                    }
	                    else if (this.ballY < 35) {
	                        var4 = shims_1.System.currentTimeMillis();
	                        if (this.ballX > 500) {
	                            ++this.fP1PointsWon;
	                        }
	                        else {
	                            ++this.fP2PointsWon;
	                        }
	                        this.oldScoringRun = this.scoringRun;
	                        if (this.ballX <= 500 && this.scoringRun >= 0) {
	                            ++this.scoringRun;
	                            if (this.scoringRun > this.fP2Streak) {
	                                this.fP2Streak = this.scoringRun;
	                            }
	                        }
	                        else if (this.ballX > 500 && this.scoringRun <= 0) {
	                            --this.scoringRun;
	                            if (-this.scoringRun > this.fP1Streak) {
	                                this.fP1Streak = -this.scoringRun;
	                            }
	                        }
	                        else if (this.ballX <= 500 && this.scoringRun <= 0) {
	                            this.scoringRun = 1;
	                            if (this.scoringRun > this.fP2Streak) {
	                                this.fP2Streak = this.scoringRun;
	                            }
	                        }
	                        else if (this.ballX > 500 && this.scoringRun >= 0) {
	                            this.scoringRun = -1;
	                            if (-this.scoringRun > this.fP1Streak) {
	                                this.fP1Streak = -this.scoringRun;
	                            }
	                        }
	                        if (this.ballX > 500 || this.fP1Touches < 3 && (!this.hitNetSinceTouched || this.fP1Touches <= 0) && this.fP2Touched && (!this.fP1HitStill || this.fP1Touches <= 0)) {
	                            if (this.ballX > 500 && (this.fP2Touches >= 3 || this.hitNetSinceTouched && this.fP2Touches > 0 || !this.fP1Touched || this.fP2HitStill && this.fP2Touches > 0)) {
	                                ++this.fP2Clangers;
	                                var9 = true;
	                            }
	                        }
	                        else {
	                            ++this.fP1Clangers;
	                            var9 = true;
	                        }
	                        if (this.fP1Touched && !this.fP2Touched && this.ballX >= 500) {
	                            ++this.fP1Aces;
	                            var8 = true;
	                        }
	                        else if (this.fP2Touched && !this.fP1Touched && this.ballX < 500) {
	                            ++this.fP2Aces;
	                            var8 = true;
	                        }
	                        else if (this.ballX > 500 && this.fP1Touches > 0) {
	                            ++this.fP1Winners;
	                            var3 = true;
	                        }
	                        else if (this.ballX <= 500 && this.fP2Touches > 0) {
	                            ++this.fP2Winners;
	                            var3 = true;
	                        }
	                        if (Math.abs(this.scoringRun) > 6) {
	                            this.promptMsg = "Super " + (this.ballX <= 500 ? this.slimeColText[this.p2Col] : this.slimeColText[this.p1Col]);
	                        }
	                        else {
	                            this.promptMsg = this.ballX <= 500 ? this.slimeColText[this.p2Col] : this.slimeColText[this.p1Col];
	                        }
	                        if (!this.fP1Touched && !this.fP2Touched) {
	                            this.promptMsg = "What can I say?";
	                        }
	                        else if ((this.scoringRun < 0 ? -this.scoringRun : this.scoringRun) === 5) {
	                            this.promptMsg = this.promptMsg + "is heating up!";
	                        }
	                        else if ((this.scoringRun < 0 ? -this.scoringRun : this.scoringRun) === 6) {
	                            this.promptMsg = this.promptMsg + "is on fire!";
	                            if (this.scoringRun < 0) {
	                                ++this.fP1Super;
	                            }
	                            else {
	                                ++this.fP2Super;
	                            }
	                        }
	                        else if ((this.ballX <= 500 || !this.fP1Touched || this.fP2Touched) && (this.ballX > 500 || this.fP1Touched || !this.fP2Touched)) {
	                            if (this.ballX > 500 && !this.fP1Touched && this.fP2Touched || this.ballX <= 500 && this.fP1Touched && !this.fP2Touched) {
	                                this.promptMsg = (this.ballX < 500 ? this.slimeColText[this.p1Col] : this.slimeColText[this.p2Col]) + "can\'t serve!";
	                            }
	                            else if (this.fP1PointsWon === this.fP2PointsWon) {
	                                this.promptMsg = this.promptMsg + "draws level!";
	                            }
	                            else if ((this.ballX <= 500 || this.fP1PointsWon !== this.fP2PointsWon + 1) && (this.ballX > 500 || this.fP1PointsWon + 1 !== this.fP2PointsWon)) {
	                                this.promptMsg = this.promptMsg + "scores!";
	                            }
	                            else {
	                                this.promptMsg = this.promptMsg + "takes the lead!";
	                            }
	                        }
	                        else {
	                            this.promptMsg = this.promptMsg + "aces the serve!";
	                        }
	                        var var6 = this.ballX;
	                        this.drawPrompt();
	                        if ((-this.scoringRun >= this.fP1Streak || this.scoringRun >= this.fP2Streak) && Math.abs(this.scoringRun) >= 3) {
	                            this.drawPrompt("" + this.fP1Streak + " << Longest streak >> " + this.fP2Streak, 2);
	                        }
	                        else if (var9) {
	                            this.drawPrompt("" + this.fP1Clangers + " << Clangers >> " + this.fP2Clangers, 2);
	                        }
	                        else if (var8) {
	                            this.drawPrompt("" + this.fP1Aces + " << Aces >> " + this.fP2Aces, 2);
	                        }
	                        else if (var3) {
	                            this.drawPrompt("" + this.fP1Winners + " << Winners >> " + this.fP2Winners, 2);
	                        }
	                        else {
	                            this.drawPrompt("" + this.fP1PointsWon + " << Points won >> " + this.fP2PointsWon, 2);
	                        }
	                        var9 = false;
	                        var8 = false;
	                        var3 = false;
	                        this.drawPrompt("Press space for replay...", 1);
	                        this.mousePressed = false;
	                        this.drawScores();
	                        this.DrawStatus();
	                        if (this.buffered) {
	                            this.getGraphics().drawImage(this.buffer, 0, 0, null);
	                        }
	                        shims_1.Thread.sleep(1000, true);
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = var6 >= 500 ? 200 : 800;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.fP1Touched = this.fP2Touched = false;
	                        this.fServerMoved = false;
	                        if (this.GAME_LENGTH <= this.gameTime) {
	                            this.endHalf();
	                        }
	                        this.repaint();
	                    }
	                }
	                if (this.gameThread != null) {
	                    try {
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var7) {
	                    }
	                    ;
	                }
	            }
	            ;
	            this.fEndGame = true;
	            this.fInPlay = false;
	            this.promptMsg = "";
	            this.repaint();
	        });
	    }
	    endHalf() {
	        if (this.firstHalf) {
	            this.gameTime = 0;
	            this.firstHalf = false;
	            this.promptMsg = "It\'s half time.";
	            this.drawPrompt();
	            if (this.buffered) {
	                this.getGraphics().drawImage(this.buffer, 0, 0, null);
	            }
	            this.promptMsg = "";
	        }
	        else {
	            this.promptMsg = "";
	            this.drawPrompt();
	            this.drawPrompt("... and that\'s the game.", 0);
	            if (this.buffered) {
	                this.getGraphics().drawImage(this.buffer, 0, 0, null);
	            }
	            this.promptMsg = "";
	            shims_1.Thread.sleep(1000, false);
	            if (this.fP1PointsWon > this.fP2PointsWon) {
	                this.drawPrompt(this.slimeColText[this.p1Col] + "Wins!", 1);
	            }
	            else if (this.fP2PointsWon > this.fP1PointsWon) {
	                this.drawPrompt(this.slimeColText[this.p2Col] + "Wins!", 1);
	            }
	            else {
	                this.drawPrompt("It\'s a draw!", 1);
	            }
	            if (this.buffered) {
	                this.getGraphics().drawImage(this.buffer, 0, 0, null);
	            }
	            this.gameTime = 0;
	            this.firstHalf = true;
	        }
	        shims_1.Thread.sleep(3000, false);
	        this.p1X = 200;
	        this.p1Y = 0;
	        this.p2X = 800;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.ballX = this.firstHalf ? 200 : 800;
	        this.ballY = 400;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.fServerMoved = false;
	        this.repaint();
	        this.gameThread = null;
	    }
	    DoReplay() {
	        var var1 = this.screen.getFontMetrics();
	        var var2 = var1.getHeight();
	        this.promptMsg = "Press space to continue...";
	        this.mousePressed = false;
	        var var3 = this.scoringRun;
	        this.scoringRun = this.oldScoringRun;
	        var var4 = this.replayStart;
	        var var5 = false;
	        this.drawCourt(this.screen);
	        while ((!this.mousePressed)) {
	            ++var4;
	            if (var4 >= 200) {
	                var4 = 0;
	            }
	            if (var4 === this.replayPos) {
	                this.screen.setColor(shims_1.Color.fromString("white"));
	                this.screen.fillRect(20, 20, 20, 20);
	                shims_1.Thread.sleep(1000, false);
	                var5 = !var5;
	                this.paint(this.screen);
	                this.screen.setColor(this.SKY_COL);
	                this.screen.fillRect(0, 0, this.nWidth, (this.nHeight / 20 | 0) + 22);
	                if (this.replayPos < this.replayStart) {
	                    var4 += 200;
	                }
	                while ((var4 > this.replayStart)) {
	                    var4 -= 5;
	                    this.drawCourt(this.screen);
	                    this.screen.setColor(shims_1.Color.fromString("white"));
	                    this.screen.fillPolygon(new shims_1.Polygon([20, 35, 35, 50, 50, 35, 35, 20], [30, 20, 30, 20, 40, 30, 40, 30], 8));
	                    if (var4 < this.replayStart) {
	                        var4 = this.replayStart;
	                    }
	                    this.ReplayFrame(var4 % 200);
	                    shims_1.Thread.sleep(20, false);
	                }
	                ;
	                this.drawCourt(this.screen);
	                this.screen.setColor(shims_1.Color.fromString("white"));
	                this.screen.fillRect(20, 20, 20, 20);
	                this.ReplayFrame(this.replayStart);
	                shims_1.Thread.sleep(500, false);
	                this.drawCourt(this.screen);
	            }
	            this.ReplayFrame(var4);
	            try {
	                shims_1.Thread.sleep(var5 ? 60 : 20);
	            }
	            catch (var7) {
	            }
	            ;
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillPolygon(new shims_1.Polygon([20, 35, 20], [20, 30, 40], 3));
	            this.screen.drawString(var5 ? "Slow motion replay" : "Replay", 60, 35 - (var2 / 2 | 0));
	        }
	        ;
	        this.scoringRun = var3;
	        this.promptMsg = "";
	        this.paint(this.screen);
	    }
	    drawCourt(var1) {
	        var1.setColor(this.SKY_COL);
	        var1.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        var1.setColor(this.COURT_COL);
	        var1.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        var1.setColor(shims_1.Color.fromString("white"));
	        var1.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	        this.drawPrompt();
	    }
	    unDrawParticles() {
	        this.screen.setColor(this.SKY_COL);
	        for (var var1 = 0; var1 < this.NUM_PARTICLES; ++var1) {
	            this.screen.fillOval(this.particle_x[var1], this.particle_y[var1], this.particle_size, this.particle_size);
	        }
	    }
	    updateParticles() {
	        for (var var1 = 0; var1 < this.NUM_PARTICLES; ++var1) {
	            this.particle_x[var1] = ((this.particle_x[var1] + this.particle_weight[var1] * this.wind / 3.0) | 0);
	            var var2 = ((this.particle_weight[var1] * 3.0) | 0);
	            this.particle_y[var1] += var2 > 0 ? var2 : 1;
	            if (this.particle_x[var1] < 0 || this.particle_x[var1] > this.nWidth || this.particle_y[var1] > this.floor) {
	                if (Math.random() > Math.abs(this.wind / 60.0)) {
	                    this.particle_x[var1] = ((Math.random() * this.nWidth) | 0);
	                    this.particle_y[var1] = 0;
	                }
	                else if (this.wind > 0) {
	                    this.particle_x[var1] = -1;
	                    this.particle_y[var1] = ((Math.random() * this.floor) | 0);
	                }
	                else {
	                    this.particle_x[var1] = this.nWidth + 1;
	                    this.particle_y[var1] = ((Math.random() * this.floor) | 0);
	                }
	            }
	        }
	    }
	    drawParticles() {
	        for (var var2 = 0; var2 < this.NUM_PARTICLES; ++var2) {
	            var var1 = ((170.0 * this.particle_weight[var2]) | 0);
	            this.screen.setColor(new shims_1.Color(85 + var1, 85 + var1, 255));
	            this.screen.fillOval(this.particle_x[var2], this.particle_y[var2], this.particle_size, this.particle_size);
	        }
	    }
	    sleep(var1, var3) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (this.gameThread != null) {
	                for (var var4 = 0; Math.round(var4) < Math.round(var1 / 20); ++var4) {
	                    try {
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var6) {
	                    }
	                    ;
	                    if (var3) {
	                        this.DrawStatus();
	                        if (this.windOn) {
	                            this.doWind();
	                            this.unDrawParticles();
	                            this.updateParticles();
	                            this.drawParticles();
	                            this.screen.setColor(shims_1.Color.fromString("white"));
	                            this.screen.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	                        }
	                    }
	                }
	            }
	        });
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Slime2P;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class Class_rn_c_1 {
	    constructor() {
	        this.field_rn_c_void_13 = 0;
	        this.field_rn_c_else_14 = 0;
	        this.field_rn_c_do_15 = 0;
	        this.field_rn_c_if_16 = 0;
	        this.field_rn_c_g_17 = 0;
	        this.field_rn_c_e_18 = 0;
	        this.field_rn_c_byte_19 = 0;
	        this.field_rn_c_try_20 = 0;
	        this.field_rn_c_int_21 = 0;
	        this.field_rn_c_for_22 = 0;
	        this.field_rn_c_d_23 = 0;
	        this.field_rn_c_b_24 = 0;
	        this.field_rn_c_new_25 = false;
	        this.field_rn_c_f_26 = false;
	        this.field_rn_c_c_27 = 0;
	    }
	    method_rn_c_a_9(var1, var2) {
	        this.field_rn_c_case_28 = var1;
	        this.field_rn_c_c_27 = var2;
	    }
	    method_rn_c_a_10(var1, var2, var3) {
	        this.field_rn_c_void_13 = this.field_rn_c_c_27 === 2 ? var1[0] : 1000 - var1[0];
	        this.field_rn_c_else_14 = var1[1];
	        this.field_rn_c_do_15 = this.field_rn_c_c_27 === 2 ? var1[2] : -var1[2];
	        this.field_rn_c_if_16 = var1[3];
	        this.field_rn_c_g_17 = this.field_rn_c_c_27 === 2 ? var1[4] : 1000 - var1[8];
	        this.field_rn_c_e_18 = this.field_rn_c_c_27 === 2 ? var1[5] : var1[9];
	        this.field_rn_c_byte_19 = this.field_rn_c_c_27 === 2 ? var1[6] : -var1[10];
	        this.field_rn_c_try_20 = this.field_rn_c_c_27 === 2 ? var1[7] : var1[11];
	        this.field_rn_c_int_21 = this.field_rn_c_c_27 === 2 ? var1[8] : 1000 - var1[4];
	        this.field_rn_c_for_22 = this.field_rn_c_c_27 === 2 ? var1[9] : var1[5];
	        this.field_rn_c_d_23 = this.field_rn_c_c_27 === 2 ? var1[10] : -var1[6];
	        this.field_rn_c_b_24 = this.field_rn_c_c_27 === 2 ? var1[11] : var1[7];
	        this.field_rn_c_new_25 = this.field_rn_c_c_27 === 2 ? var2 : var3;
	        this.field_rn_c_f_26 = this.field_rn_c_c_27 === 2 ? var3 : var2;
	    }
	    method_rn_c_a_12(var1) {
	        if (this.field_rn_c_c_27 === 1) {
	            switch ((var1)) {
	                case 0:
	                    this.field_rn_c_case_28.method_rn_Slime1P_b_82();
	                    break;
	                case 1:
	                    this.field_rn_c_case_28.method_rn_Slime1P_c_81();
	                    break;
	                case 2:
	                    this.field_rn_c_case_28.method_rn_Slime1P_char_84();
	                    break;
	                case 3:
	                    this.field_rn_c_case_28.method_rn_Slime1P_try_83();
	            }
	        }
	        else if (this.field_rn_c_c_27 === 2) {
	            switch ((var1)) {
	                case 0:
	                    this.field_rn_c_case_28.method_rn_Slime1P_e_85();
	                    break;
	                case 1:
	                    this.field_rn_c_case_28.method_rn_Slime1P_j_86();
	                    break;
	                case 2:
	                    this.field_rn_c_case_28.method_rn_Slime1P_long_88();
	                    break;
	                case 3:
	                    this.field_rn_c_case_28.method_rn_Slime1P_else_87();
	            }
	        }
	    }
	}
	Class_rn_c_1.field_rn_c_goto_29 = 0;
	Class_rn_c_1.field_rn_c_char_30 = 1;
	Class_rn_c_1.field_rn_c_long_31 = 2;
	Class_rn_c_1.field_rn_c_a_32 = 3;
	class Class_rn_g_7 {
	    constructor() {
	        this.field_rn_g_do_73 = true;
	        this.field_rn_g_a_74 = true;
	    }
	    static field_rn_g_if_75_$LI$() { if (Class_rn_g_7.field_rn_g_if_75 == null)
	        Class_rn_g_7.field_rn_g_if_75 = ['r', 'o', '>', '<', 'o', 'r', 'z']; return Class_rn_g_7.field_rn_g_if_75; }
	    ;
	    static method_rn_g_a_65() {
	        return true;
	    }
	    static method_rn_g_a_66(var0, var1) {
	        var var3 = 1000000;
	        try {
	            var var5 = (new shims_1.URL(var0.getCodeBase() + "highscores.php?min")).openStream();
	            var var6 = new shims_1.BufferedReader(new shims_1.InputStreamReader(var5));
	            var3 = shims_1.Long.parseLong(var6.readLine());
	            var6.close();
	            var5.close();
	        }
	        catch (var7) {
	            shims_1.System.out.println("Couldn\'t connect to server!\n" + var7);
	            return false;
	        }
	        ;
	        return var1 > var3;
	    }
	    static method_rn_g_a_67(var0, var1, var3, var5) {
	        try {
	            var var6 = (new shims_1.URL(var0.getCodeBase() + "submitscore.php?scr=" + var1 + "&lev=" + var3 + "&nam=" + var5 + "&danno=" + new String(Class_rn_g_7.field_rn_g_if_75_$LI$()) + "&chk=" + Class_rn_g_7.method_rn_g_a_70(Class_rn_g_7.method_rn_g_a_68(Class_rn_g_7.method_rn_g_if_69(var5)), var3, var1))).openStream();
	            var6.close();
	        }
	        catch (var7) {
	            shims_1.System.out.println("Couldn\'t send high score!\n" + var7);
	        }
	        ;
	    }
	    static method_rn_g_a_68(var0) {
	        var var1 = var0.trim();
	        if (var1.length > 20) {
	            var1 = var1.substring(0, 20);
	        }
	        return var1;
	    }
	    static method_rn_g_if_69(var0) {
	        var var1;
	        var var2;
	        for (var2 = new String(var0); (var1 = var2.indexOf(" ")) >= 0; var2 = var2.substring(0, var1) + var2.substring(var1 + 1)) {
	        }
	        return var2;
	    }
	    static method_rn_g_a_70(var0, var1, var3) {
	        var var5 = var3;
	        for (var var7 = 0; Math.round(var7) < Class_rn_g_7.method_rn_g_a_71(var1) + 1; ++var7) {
	            var5 = Class_rn_g_7.method_rn_g_if_72(var0, var1, var5);
	        }
	        return var5;
	    }
	    static method_rn_g_a_71(var0) {
	        return var0 * var0;
	    }
	    static method_rn_g_if_72(var0, var1, var3) {
	        var var5 = (var0).split('');
	        var var6 = 0;
	        for (var var8 = 0; var8 < var5.length; ++var8) {
	            var6 += (Math.round((var5[var8].charCodeAt(0))) + var1) * var3 % (var1 + 6 + Math.round(var8));
	        }
	        return var6;
	    }
	}
	class Class_rn_h_8 {
	    constructor(var1, var2, var3, var4, var5, var6) {
	        var var7 = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([var1.length, var1[0].length]);
	        for (var var8 = 0; var8 < var1.length; ++var8) {
	            for (var var9 = 0; var9 < var1[0].length; ++var9) {
	                var7[var8][var9] = var1[var8][var9];
	            }
	        }
	        try {
	            var var17 = var6.getCodeBase();
	            var var10 = "" + var2 + ":" + var3 + ":" + var4 + ":" + var5;
	            var var11 = new shims_1.URL(var17 + "newreplay.php?data=" + var10);
	            var var12 = new shims_1.BufferedReader(new shims_1.InputStreamReader(var11.openStream()));
	            var var13 = var12.readLine().trim();
	            var11 = new shims_1.URL(var17 + "savefield.php?id=" + var13 + "&field=initial&data=" + var10);
	            var11.openStream();
	            for (var var14 = 0; var14 < 6; ++var14) {
	                var10 = "id=" + var13 + "&field=";
	                switch ((var14)) {
	                    case 0:
	                        var10 = var10 + "p1x";
	                        break;
	                    case 1:
	                        var10 = var10 + "p1y";
	                        break;
	                    case 2:
	                        var10 = var10 + "p2x";
	                        break;
	                    case 3:
	                        var10 = var10 + "p2y";
	                        break;
	                    case 4:
	                        var10 = var10 + "ballX";
	                        break;
	                    case 5:
	                        var10 = var10 + "ballY";
	                }
	                var10 = var10 + "&data=" + var7[0][var14];
	                for (var var15 = 1; var15 < var1.length; ++var15) {
	                    var10 = var10 + ":" + (var7[var15][var14] - var7[var15 - 1][var14]);
	                }
	                var11 = new shims_1.URL(var17 + "savefield.php?" + var10);
	                var11.openStream();
	            }
	        }
	        catch (var16) {
	        }
	        ;
	    }
	}
	class Class_rn_f_2 extends Class_rn_c_1 {
	    constructor() {
	        super(...arguments);
	        this.field_rn_f_m_37 = 0.85;
	        this.field_rn_f_n_38 = -1;
	    }
	    method_rn_f_long_33(var1) {
	        return var1 * var1;
	    }
	    method_rn_f_goto_34(var1) {
	        var var2 = 0;
	        var var3 = this.field_rn_c_else_14;
	        var var4 = this.field_rn_c_if_16;
	        while ((true)) {
	            --var4;
	            if ((var3 += var4) <= var1) {
	                return var2;
	            }
	            ++var2;
	        }
	        ;
	    }
	    method_rn_f_else_35(var1) {
	        var var2 = this.method_rn_f_goto_34(var1);
	        var var3 = this.field_rn_c_void_13;
	        var var4 = this.field_rn_c_do_15;
	        for (var var5 = 0; var5 < var2; ++var5) {
	            var3 += var4;
	            if (var3 < 0) {
	                var3 = 0;
	                var4 = -var4;
	            }
	            else if (var3 > 1000) {
	                var3 = 1000;
	                var4 = -var4;
	            }
	        }
	        return var3;
	    }
	    method_rn_c_a_11() {
	        if (this.field_rn_c_void_13 < 500 && this.field_rn_f_n_38 !== -1) {
	            this.field_rn_f_n_38 = -1;
	        }
	        var var1 = this.method_rn_f_else_35(125);
	        var var2 = this.method_rn_f_goto_34(125);
	        var var3;
	        if (this.field_rn_c_for_22 !== 0 && this.field_rn_c_int_21 < 575) {
	            var3 = 0;
	        }
	        else {
	            var3 = 25 + ((10.0 * Math.random()) | 0);
	        }
	        if ((this.field_rn_c_do_15 !== 0 || this.field_rn_c_void_13 !== 800) && this.field_rn_f_n_38 === -1) {
	            if (var1 < 500) {
	                if (Math.abs(this.field_rn_c_int_21 - 666) < 20) {
	                    this.method_rn_c_a_12(3);
	                }
	                else if (this.field_rn_c_int_21 > 666) {
	                    this.method_rn_c_a_12(0);
	                }
	                else if (this.field_rn_c_int_21 < 666) {
	                    this.method_rn_c_a_12(1);
	                }
	            }
	            else {
	                if (Math.abs(this.field_rn_c_int_21 - var1) < var3) {
	                    if (this.field_rn_c_for_22 !== 0 || this.field_rn_c_f_26 && Math.random() < 0.3) {
	                        return;
	                    }
	                    if ((this.field_rn_c_int_21 >= 900 && this.field_rn_c_void_13 > 830 || this.field_rn_c_int_21 <= 580 && this.field_rn_c_void_13 < 530) && Math.abs(this.field_rn_c_void_13 - this.field_rn_c_int_21) < 100) {
	                        this.method_rn_f_try_36();
	                    }
	                    else if (this.method_rn_f_long_33(this.field_rn_c_void_13 - this.field_rn_c_int_21) * 2 + this.method_rn_f_long_33(this.field_rn_c_else_14 - this.field_rn_c_for_22) < this.method_rn_f_long_33(170) && this.field_rn_c_void_13 !== this.field_rn_c_int_21) {
	                        this.method_rn_f_try_36();
	                    }
	                    else if (this.field_rn_c_do_15 * this.field_rn_c_do_15 + this.field_rn_c_if_16 * this.field_rn_c_if_16 < 20 && this.field_rn_c_void_13 - this.field_rn_c_int_21 < 30 && this.field_rn_c_void_13 !== this.field_rn_c_int_21) {
	                        this.method_rn_f_try_36();
	                    }
	                    else if (Math.abs(this.field_rn_c_void_13 - this.field_rn_c_int_21) < 150 && this.field_rn_c_else_14 > 50 && this.field_rn_c_else_14 < 400 && Math.random() < 0.666) {
	                        this.method_rn_f_try_36();
	                    }
	                }
	                if (this.field_rn_c_for_22 === 0 && this.field_rn_f_n_38 === -1) {
	                    if (Math.abs(this.field_rn_c_int_21 - var1) < var3) {
	                        this.method_rn_c_a_12(3);
	                    }
	                    else if (var1 + var3 < this.field_rn_c_int_21) {
	                        this.method_rn_c_a_12(0);
	                    }
	                    else if (var1 + var3 > this.field_rn_c_int_21) {
	                        this.method_rn_c_a_12(1);
	                    }
	                }
	                else if (this.field_rn_f_n_38 === -1) {
	                    if (this.field_rn_c_int_21 < 575) {
	                        return;
	                    }
	                    if (this.field_rn_c_int_21 > 900) {
	                        this.method_rn_c_a_12(1);
	                        return;
	                    }
	                    if (Math.abs(this.field_rn_c_int_21 - this.field_rn_c_void_13) < var3) {
	                        this.method_rn_c_a_12(3);
	                    }
	                    else if (this.field_rn_c_void_13 < this.field_rn_c_int_21) {
	                        this.method_rn_c_a_12(0);
	                    }
	                    else if (this.field_rn_c_void_13 > this.field_rn_c_int_21) {
	                        this.method_rn_c_a_12(1);
	                    }
	                }
	            }
	        }
	        else {
	            if (this.field_rn_f_n_38 === -1) {
	                if (this.field_rn_c_g_17 > 250) {
	                    this.field_rn_f_n_38 = 0;
	                }
	                else {
	                    this.field_rn_f_n_38 = 1;
	                }
	                if (Math.random() < 0.35) {
	                    this.field_rn_f_n_38 = ((2.0 * Math.random()) | 0);
	                }
	            }
	            switch ((this.field_rn_f_n_38)) {
	                case 0:
	                    if (this.field_rn_c_else_14 < 250 && this.field_rn_c_if_16 < -3) {
	                        this.method_rn_c_a_12(1);
	                        this.method_rn_c_a_12(2);
	                    }
	                    break;
	                case 1:
	                    if (this.field_rn_c_else_14 < 250 && this.field_rn_c_if_16 < 0) {
	                        this.method_rn_c_a_12(0);
	                        this.method_rn_c_a_12(2);
	                    }
	            }
	        }
	    }
	    method_rn_f_try_36() {
	        if (Math.random() < 0.85) {
	            this.method_rn_c_a_12(2);
	        }
	    }
	}
	class Class_rn_e_3 extends Class_rn_c_1 {
	    constructor() {
	        super(...arguments);
	        this.field_rn_e_k_43 = 0.4;
	        this.field_rn_e_l_44 = -1;
	    }
	    method_rn_e_char_39(var1) {
	        return var1 * var1;
	    }
	    method_rn_e_case_40(var1) {
	        var var2 = 0;
	        var var3 = this.field_rn_c_else_14;
	        var var4 = this.field_rn_c_if_16;
	        while ((true)) {
	            --var4;
	            if ((var3 += var4) <= var1) {
	                return var2;
	            }
	            ++var2;
	        }
	        ;
	    }
	    method_rn_e_byte_41(var1) {
	        var var2 = this.method_rn_e_case_40(var1);
	        var var3 = this.field_rn_c_void_13;
	        var var4 = this.field_rn_c_do_15;
	        for (var var5 = 0; var5 < var2; ++var5) {
	            var3 += var4;
	            if (var3 < 0) {
	                var3 = 0;
	                var4 = -var4;
	            }
	            else if (var3 > 1000) {
	                var3 = 1000;
	                var4 = -var4;
	            }
	        }
	        return var3;
	    }
	    method_rn_c_a_11() {
	        if (this.field_rn_c_void_13 < 500 && this.field_rn_e_l_44 !== -1) {
	            this.field_rn_e_l_44 = -1;
	        }
	        var var1 = this.method_rn_e_byte_41(125);
	        var var2 = this.method_rn_e_case_40(125);
	        var var3;
	        if (this.field_rn_c_for_22 !== 0 && this.field_rn_c_int_21 < 575) {
	            var3 = 0;
	        }
	        else {
	            var3 = 23 + ((15.0 * Math.random()) | 0);
	        }
	        if ((this.field_rn_c_do_15 !== 0 || this.field_rn_c_void_13 !== 800) && this.field_rn_e_l_44 === -1) {
	            if (var1 < 500) {
	                if (Math.abs(this.field_rn_c_int_21 - 800) < 20) {
	                    this.method_rn_c_a_12(3);
	                }
	                else if (this.field_rn_c_int_21 > 800) {
	                    this.method_rn_c_a_12(0);
	                }
	                else if (this.field_rn_c_int_21 < 800) {
	                    this.method_rn_c_a_12(1);
	                }
	            }
	            else {
	                if (Math.abs(this.field_rn_c_int_21 - var1) < var3) {
	                    if (this.field_rn_c_for_22 !== 0 || this.field_rn_c_f_26 && Math.random() < 0.3) {
	                        return;
	                    }
	                    if ((this.field_rn_c_int_21 >= 900 && this.field_rn_c_void_13 > 830 || this.field_rn_c_int_21 <= 580 && this.field_rn_c_void_13 < 530) && Math.abs(this.field_rn_c_void_13 - this.field_rn_c_int_21) < 100) {
	                        this.method_rn_e_new_42();
	                    }
	                    else if (this.method_rn_e_char_39(this.field_rn_c_void_13 - this.field_rn_c_int_21) * 2 + this.method_rn_e_char_39(this.field_rn_c_else_14 - this.field_rn_c_for_22) < this.method_rn_e_char_39(170) && this.field_rn_c_void_13 !== this.field_rn_c_int_21) {
	                        this.method_rn_e_new_42();
	                    }
	                    else if (this.field_rn_c_do_15 * this.field_rn_c_do_15 + this.field_rn_c_if_16 * this.field_rn_c_if_16 < 20 && this.field_rn_c_void_13 - this.field_rn_c_int_21 < 30 && this.field_rn_c_void_13 !== this.field_rn_c_int_21) {
	                        this.method_rn_e_new_42();
	                    }
	                    else if (Math.abs(this.field_rn_c_void_13 - this.field_rn_c_int_21) < 150 && this.field_rn_c_else_14 > 50 && this.field_rn_c_else_14 < 400 && Math.random() < 0.5) {
	                        this.method_rn_e_new_42();
	                    }
	                }
	                if (this.field_rn_c_for_22 === 0 && this.field_rn_e_l_44 === -1) {
	                    if (Math.abs(this.field_rn_c_int_21 - var1) < var3) {
	                        this.method_rn_c_a_12(3);
	                    }
	                    else if (var1 + var3 < this.field_rn_c_int_21) {
	                        this.method_rn_c_a_12(0);
	                    }
	                    else if (var1 + var3 > this.field_rn_c_int_21) {
	                        this.method_rn_c_a_12(1);
	                    }
	                }
	                else if (this.field_rn_e_l_44 === -1) {
	                    if (this.field_rn_c_int_21 < 575) {
	                        return;
	                    }
	                    if (this.field_rn_c_int_21 > 900) {
	                        this.method_rn_c_a_12(1);
	                        return;
	                    }
	                    if (Math.abs(this.field_rn_c_int_21 - this.field_rn_c_void_13) < var3) {
	                        this.method_rn_c_a_12(3);
	                    }
	                    else if (this.field_rn_c_void_13 < this.field_rn_c_int_21) {
	                        this.method_rn_c_a_12(0);
	                    }
	                    else if (this.field_rn_c_void_13 > this.field_rn_c_int_21) {
	                        this.method_rn_c_a_12(1);
	                    }
	                }
	            }
	        }
	        else {
	            if (this.field_rn_e_l_44 === -1) {
	                if (this.field_rn_c_g_17 > 250) {
	                    this.field_rn_e_l_44 = 0;
	                }
	                else if (this.field_rn_c_g_17 < 200) {
	                    this.field_rn_e_l_44 = 1;
	                }
	                else if (this.field_rn_c_g_17 < 250) {
	                    this.field_rn_e_l_44 = 2;
	                }
	                if (Math.random() < 0.35) {
	                    this.field_rn_e_l_44 = ((3.0 * Math.random()) | 0);
	                }
	            }
	            switch ((this.field_rn_e_l_44)) {
	                case 0:
	                    if (this.field_rn_c_else_14 < 300 && this.field_rn_c_if_16 < -3) {
	                        this.method_rn_c_a_12(1);
	                        this.method_rn_c_a_12(2);
	                    }
	                    break;
	                case 1:
	                    if (this.field_rn_c_else_14 < 300 && this.field_rn_c_if_16 < 0) {
	                        this.method_rn_c_a_12(0);
	                        this.method_rn_c_a_12(2);
	                    }
	                    break;
	                case 2:
	                    var var4 = 860;
	                    if (this.field_rn_c_if_16 > 12 && this.field_rn_c_int_21 < var4) {
	                        this.method_rn_c_a_12(1);
	                    }
	                    if (this.field_rn_c_int_21 >= var4) {
	                        this.method_rn_c_a_12(3);
	                    }
	                    if (this.field_rn_c_if_16 === -3 && this.field_rn_c_int_21 !== 800) {
	                        this.method_rn_c_a_12(2);
	                    }
	                    if (this.field_rn_c_if_16 < -12 && this.field_rn_c_for_22 !== 0 && this.field_rn_c_int_21 >= var4 - 15) {
	                        this.method_rn_c_a_12(0);
	                    }
	            }
	        }
	    }
	    method_rn_e_new_42() {
	        if (Math.random() < 0.4) {
	            this.method_rn_c_a_12(2);
	        }
	    }
	}
	class Class_rn_b_5 extends Class_rn_c_1 {
	    constructor() {
	        super(...arguments);
	        this.field_rn_b_h_57 = -1;
	    }
	    method_rn_c_a_11() {
	        if (this.field_rn_b_h_57 === -1 && (this.field_rn_c_void_13 !== 800 || this.field_rn_c_do_15 !== 0)) {
	            var var2 = this.method_rn_b_if_53(this.field_rn_c_for_22 + this.field_rn_c_b_24 + 30);
	            var var1;
	            if (var2 < 600) {
	                var1 = 0;
	            }
	            else if (var2 < 700) {
	                var1 = 10;
	            }
	            else {
	                var1 = 20;
	            }
	            if (var2 < 450) {
	                if (Math.abs(this.field_rn_c_int_21 - 666) < 10) {
	                    this.method_rn_c_a_12(3);
	                }
	                else if (666 < this.field_rn_c_int_21) {
	                    this.method_rn_c_a_12(0);
	                }
	                else if (666 > this.field_rn_c_int_21) {
	                    this.method_rn_c_a_12(1);
	                }
	            }
	            else if (Math.abs(this.field_rn_c_int_21 - var2 - var1) < 10) {
	                this.method_rn_c_a_12(3);
	            }
	            else if (var2 + var1 < this.field_rn_c_int_21) {
	                this.method_rn_c_a_12(0);
	            }
	            else if (var2 + var1 > this.field_rn_c_int_21) {
	                this.method_rn_c_a_12(1);
	            }
	            if ((this.field_rn_c_int_21 <= 900 || Math.random() >= 0.4) && var2 >= 620 && (this.field_rn_c_else_14 >= 130 || this.field_rn_c_if_16 >= 0) && (!this.field_rn_c_f_26 || Math.random() >= 0.6)) {
	                if ((this.field_rn_c_int_21 >= 900 && this.field_rn_c_void_13 > 830 || this.field_rn_c_int_21 <= 580 && this.field_rn_c_void_13 < 530) && Math.abs(this.field_rn_c_void_13 - this.field_rn_c_int_21) < 100) {
	                    this.method_rn_c_a_12(2);
	                }
	                else if (this.method_rn_b_for_51(this.field_rn_c_void_13 - this.field_rn_c_int_21) * 2 + this.method_rn_b_for_51(this.field_rn_c_else_14 - this.field_rn_c_for_22) < this.method_rn_b_for_51(185) && this.field_rn_c_void_13 !== this.field_rn_c_int_21) {
	                    this.method_rn_c_a_12(2);
	                }
	                else if (this.field_rn_c_do_15 * this.field_rn_c_do_15 + this.field_rn_c_if_16 * this.field_rn_c_if_16 < 20 && this.field_rn_c_void_13 - this.field_rn_c_int_21 < 30 && this.field_rn_c_void_13 !== this.field_rn_c_int_21) {
	                    this.method_rn_c_a_12(2);
	                }
	                else if (Math.abs(this.field_rn_c_void_13 - this.field_rn_c_int_21) < (this.field_rn_c_f_26 ? 135 : 150) && this.field_rn_c_else_14 > 50 && this.field_rn_c_else_14 < 250) {
	                    this.method_rn_c_a_12(2);
	                }
	            }
	        }
	        else {
	            this.method_rn_b_do_55();
	        }
	    }
	    method_rn_b_for_51(var1) {
	        return var1 * var1;
	    }
	    method_rn_b_do_52(var1) {
	        var var2 = 0;
	        var var3 = this.field_rn_c_else_14;
	        var var4 = this.field_rn_c_if_16;
	        while ((true)) {
	            --var4;
	            if ((var3 += var4) <= 0) {
	                return var2;
	            }
	            ++var2;
	        }
	        ;
	    }
	    method_rn_b_if_53(var1) {
	        var var2 = this.field_rn_c_void_13;
	        var var3 = this.field_rn_c_else_14;
	        var var4 = this.field_rn_c_if_16;
	        while ((true)) {
	            --var4;
	            if ((var3 += var4) <= var1) {
	                return var2;
	            }
	            var2 += this.field_rn_c_do_15;
	            if (var2 <= 0) {
	                var2 = 0;
	                this.field_rn_c_do_15 = -this.field_rn_c_do_15;
	            }
	            else if (var2 >= 1000) {
	                var2 = 1000;
	                this.field_rn_c_do_15 = -this.field_rn_c_do_15;
	            }
	        }
	        ;
	    }
	    method_rn_b_for_54() {
	        var var1 = this.field_rn_c_int_21 - this.field_rn_c_void_13;
	        var var2 = this.field_rn_c_for_22 - this.field_rn_c_else_14;
	        return (Math.sqrt((var1 * var1 + var2 * var2)) | 0);
	    }
	    method_rn_b_do_55() {
	        if (this.field_rn_b_h_57 === -1) {
	            if (Math.random() < 0.3) {
	                if (this.field_rn_c_g_17 < 300 && !this.field_rn_c_f_26) {
	                    this.field_rn_b_h_57 = 0;
	                }
	                else if (this.field_rn_c_g_17 > 200) {
	                    this.field_rn_b_h_57 = 1;
	                }
	                else {
	                    this.field_rn_b_h_57 = 2;
	                }
	            }
	            else {
	                this.field_rn_b_h_57 = 2;
	            }
	            if (this.field_rn_b_h_57 === -1 || Math.random() < 0.3) {
	                this.field_rn_b_h_57 = ((Math.random() * 3.0) | 0);
	            }
	            if (this.field_rn_c_f_26 && this.field_rn_b_h_57 === 0) {
	                this.field_rn_b_h_57 = 1 + ((Math.random() * 2.0) | 0);
	            }
	        }
	        var var1;
	        switch ((this.field_rn_b_h_57)) {
	            case 0:
	            case 1:
	                var var2 = this.field_rn_b_h_57 === 0 ? 860 : 840;
	                if (this.field_rn_c_if_16 > 12 && this.field_rn_c_int_21 < var2) {
	                    this.method_rn_c_a_12(1);
	                }
	                if (this.field_rn_c_int_21 >= var2) {
	                    this.method_rn_c_a_12(3);
	                }
	                if (this.field_rn_c_if_16 === -3 && this.field_rn_c_int_21 !== 800) {
	                    this.method_rn_c_a_12(2);
	                }
	                if (this.field_rn_c_if_16 < -12 && this.field_rn_c_for_22 !== 0 && this.field_rn_c_int_21 >= var2 - 15 && this.field_rn_b_h_57 === 0) {
	                    this.method_rn_c_a_12(0);
	                }
	                if (this.field_rn_c_void_13 < 700) {
	                    this.field_rn_b_h_57 = -1;
	                }
	                break;
	            case 2:
	                var var3 = 770;
	                if (this.field_rn_c_if_16 > 12 && this.field_rn_c_int_21 > var3) {
	                    this.method_rn_c_a_12(0);
	                }
	                if (this.field_rn_c_int_21 <= var3) {
	                    this.method_rn_c_a_12(3);
	                }
	                if (this.field_rn_c_if_16 === -2 && this.field_rn_c_int_21 !== 800) {
	                    this.method_rn_c_a_12(2);
	                }
	                if (this.field_rn_c_for_22 !== 0 && this.field_rn_c_void_13 > 800) {
	                    this.field_rn_b_h_57 = 3 + this.method_rn_b_if_56();
	                }
	                break;
	            case 3:
	                var1 = !this.field_rn_c_f_26 ? 585 : 555;
	                if (this.field_rn_c_int_21 > var1) {
	                    this.method_rn_c_a_12(0);
	                }
	                if (this.field_rn_c_int_21 <= var1) {
	                    this.method_rn_c_a_12(3);
	                }
	                if (this.field_rn_c_void_13 <= (!this.field_rn_c_f_26 ? 730 : 740)) {
	                    this.method_rn_c_a_12(2);
	                }
	                if (this.field_rn_c_void_13 < 540) {
	                    this.field_rn_b_h_57 = -1;
	                }
	                break;
	            case 4:
	                var1 = !this.field_rn_c_f_26 ? 585 : 555;
	                if (this.field_rn_c_int_21 > var1) {
	                    this.method_rn_c_a_12(0);
	                }
	                if (this.field_rn_c_int_21 <= var1) {
	                    this.method_rn_c_a_12(3);
	                }
	                if (this.field_rn_c_void_13 <= (!this.field_rn_c_f_26 ? 730 : 700)) {
	                    this.method_rn_c_a_12(2);
	                }
	                if (this.field_rn_c_void_13 < 600) {
	                    this.method_rn_c_a_12(1);
	                }
	                if (this.field_rn_c_void_13 < 580) {
	                    this.method_rn_c_a_12(3);
	                }
	                if (this.field_rn_c_void_13 < 540) {
	                    this.field_rn_b_h_57 = -1;
	                }
	        }
	    }
	    method_rn_b_if_56() {
	        var var1 = false;
	        if (this.field_rn_c_g_17 < 200) {
	            var1 = Math.random() < 0.7;
	        }
	        else if (this.field_rn_c_g_17 > 300) {
	            var1 = Math.random() < 0.3;
	        }
	        else {
	            var1 = Math.random() < 0.5;
	        }
	        return var1 ? 1 : 0;
	    }
	}
	class Class_rn_a_6 extends Class_rn_c_1 {
	    constructor() {
	        super(...arguments);
	        this.field_rn_a_o_64 = -1;
	    }
	    method_rn_c_a_11() {
	        if (this.field_rn_a_o_64 === -1 && (this.field_rn_c_void_13 !== 800 || this.field_rn_c_do_15 !== 0)) {
	            var var2 = this.method_rn_a_void_60(this.field_rn_c_for_22 + this.field_rn_c_b_24 + 30);
	            var var1;
	            if (var2 < 600) {
	                var1 = 0;
	            }
	            else if (var2 < 700) {
	                var1 = 10;
	            }
	            else {
	                var1 = 20;
	            }
	            if (var2 < 450) {
	                if (Math.abs(this.field_rn_c_int_21 - 666) < 10) {
	                    this.method_rn_c_a_12(3);
	                }
	                else if (666 < this.field_rn_c_int_21) {
	                    this.method_rn_c_a_12(0);
	                }
	                else if (666 > this.field_rn_c_int_21) {
	                    this.method_rn_c_a_12(1);
	                }
	            }
	            else if (Math.abs(this.field_rn_c_int_21 - var2 - var1) < 10) {
	                this.method_rn_c_a_12(3);
	            }
	            else if (var2 + var1 < this.field_rn_c_int_21) {
	                this.method_rn_c_a_12(0);
	            }
	            else if (var2 + var1 > this.field_rn_c_int_21) {
	                this.method_rn_c_a_12(1);
	            }
	            if ((this.field_rn_c_int_21 <= 900 || Math.random() >= 0.4) && var2 >= 720 && (this.field_rn_c_else_14 >= 150 || this.field_rn_c_if_16 <= -3)) {
	                if ((this.field_rn_c_int_21 >= 900 && this.field_rn_c_void_13 > 830 || this.field_rn_c_int_21 <= 580 && this.field_rn_c_void_13 < 530) && Math.abs(this.field_rn_c_void_13 - this.field_rn_c_int_21) < 100) {
	                    this.method_rn_c_a_12(2);
	                }
	                else if (this.method_rn_a_c_58(this.field_rn_c_void_13 - this.field_rn_c_int_21) * 2 + this.method_rn_a_c_58(this.field_rn_c_else_14 - this.field_rn_c_for_22) < this.method_rn_a_c_58(185) && this.field_rn_c_void_13 !== this.field_rn_c_int_21) {
	                    this.method_rn_c_a_12(2);
	                }
	                else if (this.field_rn_c_do_15 * this.field_rn_c_do_15 + this.field_rn_c_if_16 * this.field_rn_c_if_16 < 20 && this.field_rn_c_void_13 - this.field_rn_c_int_21 < 30 && this.field_rn_c_void_13 !== this.field_rn_c_int_21) {
	                    this.method_rn_c_a_12(2);
	                }
	                else if (Math.abs(this.field_rn_c_void_13 - this.field_rn_c_int_21) < 150 && this.field_rn_c_else_14 > 50 && this.field_rn_c_else_14 < 250) {
	                    this.method_rn_c_a_12(2);
	                }
	            }
	        }
	        else {
	            this.method_rn_a_case_62();
	        }
	    }
	    method_rn_a_c_58(var1) {
	        return var1 * var1;
	    }
	    method_rn_a_b_59(var1) {
	        var var2 = 0;
	        var var3 = this.field_rn_c_else_14;
	        var var4 = this.field_rn_c_if_16;
	        while ((true)) {
	            --var4;
	            if ((var3 += var4) <= 0) {
	                return var2;
	            }
	            ++var2;
	        }
	        ;
	    }
	    method_rn_a_void_60(var1) {
	        var var2 = this.field_rn_c_void_13;
	        var var3 = this.field_rn_c_else_14;
	        var var4 = this.field_rn_c_if_16;
	        while ((true)) {
	            --var4;
	            if ((var3 += var4) <= var1) {
	                return var2;
	            }
	            var2 += this.field_rn_c_do_15;
	            if (var2 <= 0) {
	                var2 = 0;
	                this.field_rn_c_do_15 = -this.field_rn_c_do_15;
	            }
	            else if (var2 >= 1000) {
	                var2 = 1000;
	                this.field_rn_c_do_15 = -this.field_rn_c_do_15;
	            }
	        }
	        ;
	    }
	    method_rn_a_char_61() {
	        var var1 = this.field_rn_c_int_21 - this.field_rn_c_void_13;
	        var var2 = this.field_rn_c_for_22 - this.field_rn_c_else_14;
	        return (Math.sqrt((var1 * var1 + var2 * var2)) | 0);
	    }
	    method_rn_a_case_62() {
	        if (this.field_rn_a_o_64 === -1) {
	            if (Math.random() < 0.3) {
	                if (this.field_rn_c_g_17 < 300) {
	                    this.field_rn_a_o_64 = 0;
	                }
	                else if (this.field_rn_c_g_17 > 200) {
	                    this.field_rn_a_o_64 = 1;
	                }
	                else {
	                    this.field_rn_a_o_64 = 2;
	                }
	            }
	            else {
	                this.field_rn_a_o_64 = 2;
	            }
	            if (this.field_rn_a_o_64 === -1 || Math.random() < 0.3) {
	                this.field_rn_a_o_64 = ((Math.random() * 3.0) | 0);
	            }
	        }
	        var var1;
	        switch ((this.field_rn_a_o_64)) {
	            case 0:
	            case 1:
	                var var2 = this.field_rn_a_o_64 === 0 ? 860 : 840;
	                if (this.field_rn_c_if_16 > 12 && this.field_rn_c_int_21 < var2) {
	                    this.method_rn_c_a_12(1);
	                }
	                if (this.field_rn_c_int_21 >= var2) {
	                    this.method_rn_c_a_12(3);
	                }
	                if (this.field_rn_c_if_16 === -3 && this.field_rn_c_int_21 !== 800) {
	                    this.method_rn_c_a_12(2);
	                }
	                if (this.field_rn_c_if_16 < -12 && this.field_rn_c_for_22 !== 0 && this.field_rn_c_int_21 >= var2 - 15 && this.field_rn_a_o_64 === 0) {
	                    this.method_rn_c_a_12(0);
	                }
	                if (this.field_rn_c_void_13 < 700) {
	                    this.field_rn_a_o_64 = -1;
	                }
	                break;
	            case 2:
	                var1 = 770;
	                if (this.field_rn_c_if_16 > 12 && this.field_rn_c_int_21 > var1) {
	                    this.method_rn_c_a_12(0);
	                }
	                if (this.field_rn_c_int_21 <= var1) {
	                    this.method_rn_c_a_12(3);
	                }
	                if (this.field_rn_c_if_16 === -2 && this.field_rn_c_int_21 !== 800) {
	                    this.method_rn_c_a_12(2);
	                }
	                if (this.field_rn_c_for_22 !== 0 && this.field_rn_c_void_13 > 800) {
	                    this.field_rn_a_o_64 = 3 + this.method_rn_a_byte_63();
	                }
	                break;
	            case 3:
	                var1 = 585;
	                if (this.field_rn_c_int_21 > var1) {
	                    this.method_rn_c_a_12(0);
	                }
	                if (this.field_rn_c_int_21 <= var1) {
	                    this.method_rn_c_a_12(3);
	                }
	                if (this.field_rn_c_void_13 <= 730) {
	                    this.method_rn_c_a_12(2);
	                }
	                if (this.field_rn_c_void_13 < 600) {
	                    this.method_rn_c_a_12(1);
	                }
	                if (this.field_rn_c_void_13 < 580) {
	                    this.method_rn_c_a_12(3);
	                }
	                if (this.field_rn_c_void_13 < 540) {
	                    this.field_rn_a_o_64 = -1;
	                }
	            case 4:
	                var1 = 585;
	                if (this.field_rn_c_int_21 > var1) {
	                    this.method_rn_c_a_12(0);
	                }
	                if (this.field_rn_c_int_21 <= var1) {
	                    this.method_rn_c_a_12(3);
	                }
	                if (this.field_rn_c_void_13 <= 755) {
	                    this.method_rn_c_a_12(2);
	                }
	                if (this.field_rn_c_void_13 < 600) {
	                    this.method_rn_c_a_12(1);
	                }
	                if (this.field_rn_c_void_13 < 580) {
	                    this.method_rn_c_a_12(3);
	                }
	                if (this.field_rn_c_void_13 < 540) {
	                    this.field_rn_a_o_64 = -1;
	                }
	        }
	    }
	    method_rn_a_byte_63() {
	        var var1 = 0;
	        if (this.field_rn_c_g_17 < 200) {
	            var1 = 1;
	        }
	        else if (this.field_rn_c_g_17 > 300) {
	            var1 = 0;
	        }
	        if (Math.random() < 0.35) {
	            var1 = 1 - var1;
	        }
	        return var1;
	    }
	}
	class Class_rn_d_4 extends Class_rn_c_1 {
	    constructor() {
	        super(...arguments);
	        this.field_rn_d_i_49 = 0.85;
	        this.field_rn_d_j_50 = -1;
	    }
	    method_rn_d_try_45(var1) {
	        return var1 * var1;
	    }
	    method_rn_d_new_46(var1) {
	        var var2 = 0;
	        var var3 = this.field_rn_c_else_14;
	        var var4 = this.field_rn_c_if_16;
	        while ((true)) {
	            --var4;
	            if ((var3 += var4) <= var1) {
	                return var2;
	            }
	            ++var2;
	        }
	        ;
	    }
	    method_rn_d_int_47(var1) {
	        var var2 = this.method_rn_d_new_46(var1);
	        var var3 = this.field_rn_c_void_13;
	        var var4 = this.field_rn_c_do_15;
	        for (var var5 = 0; var5 < var2; ++var5) {
	            var3 += var4;
	            if (var3 < 0) {
	                var3 = 0;
	                var4 = -var4;
	            }
	            else if (var3 > 1000) {
	                var3 = 1000;
	                var4 = -var4;
	            }
	        }
	        return var3;
	    }
	    method_rn_c_a_11() {
	        if (this.field_rn_c_void_13 < 500 && this.field_rn_d_j_50 !== -1) {
	            this.field_rn_d_j_50 = -1;
	        }
	        var var1 = this.method_rn_d_int_47(125);
	        var var2 = this.method_rn_d_new_46(125);
	        var var3;
	        if (this.field_rn_c_for_22 !== 0 && this.field_rn_c_int_21 < 575) {
	            var3 = 0;
	        }
	        else {
	            var3 = 25 + ((10.0 * Math.random()) | 0);
	        }
	        if ((this.field_rn_c_do_15 !== 0 || this.field_rn_c_void_13 !== 800) && this.field_rn_d_j_50 === -1) {
	            if (var1 < 500) {
	                if (Math.abs(this.field_rn_c_int_21 - 666) < 20) {
	                    this.method_rn_c_a_12(3);
	                }
	                else if (this.field_rn_c_int_21 > 666) {
	                    this.method_rn_c_a_12(0);
	                }
	                else if (this.field_rn_c_int_21 < 666) {
	                    this.method_rn_c_a_12(1);
	                }
	            }
	            else {
	                if (Math.abs(this.field_rn_c_int_21 - var1) < var3) {
	                    if (this.field_rn_c_for_22 !== 0 || this.field_rn_c_f_26 && Math.random() < 0.3) {
	                        return;
	                    }
	                    if ((this.field_rn_c_int_21 >= 900 && this.field_rn_c_void_13 > 830 || this.field_rn_c_int_21 <= 580 && this.field_rn_c_void_13 < 530) && Math.abs(this.field_rn_c_void_13 - this.field_rn_c_int_21) < 100) {
	                        this.method_rn_d_int_48();
	                    }
	                    else if (this.method_rn_d_try_45(this.field_rn_c_void_13 - this.field_rn_c_int_21) * 2 + this.method_rn_d_try_45(this.field_rn_c_else_14 - this.field_rn_c_for_22) < this.method_rn_d_try_45(170) && this.field_rn_c_void_13 !== this.field_rn_c_int_21) {
	                        this.method_rn_d_int_48();
	                    }
	                    else if (this.field_rn_c_do_15 * this.field_rn_c_do_15 + this.field_rn_c_if_16 * this.field_rn_c_if_16 < 20 && this.field_rn_c_void_13 - this.field_rn_c_int_21 < 30 && this.field_rn_c_void_13 !== this.field_rn_c_int_21) {
	                        this.method_rn_d_int_48();
	                    }
	                    else if (Math.abs(this.field_rn_c_void_13 - this.field_rn_c_int_21) < 150 && this.field_rn_c_else_14 > 50 && this.field_rn_c_else_14 < 400 && Math.random() < 0.666) {
	                        this.method_rn_d_int_48();
	                    }
	                }
	                if (this.field_rn_c_for_22 === 0 && this.field_rn_d_j_50 === -1) {
	                    if (Math.abs(this.field_rn_c_int_21 - var1) < var3) {
	                        this.method_rn_c_a_12(3);
	                    }
	                    else if (var1 + var3 < this.field_rn_c_int_21) {
	                        this.method_rn_c_a_12(0);
	                    }
	                    else if (var1 + var3 > this.field_rn_c_int_21) {
	                        this.method_rn_c_a_12(1);
	                    }
	                }
	                else if (this.field_rn_d_j_50 === -1) {
	                    if (this.field_rn_c_int_21 < 575) {
	                        return;
	                    }
	                    if (this.field_rn_c_int_21 > 900) {
	                        this.method_rn_c_a_12(1);
	                        return;
	                    }
	                    if (Math.abs(this.field_rn_c_int_21 - this.field_rn_c_void_13) < var3) {
	                        this.method_rn_c_a_12(3);
	                    }
	                    else if (this.field_rn_c_void_13 < this.field_rn_c_int_21) {
	                        this.method_rn_c_a_12(0);
	                    }
	                    else if (this.field_rn_c_void_13 > this.field_rn_c_int_21) {
	                        this.method_rn_c_a_12(1);
	                    }
	                }
	            }
	        }
	        else {
	            if (this.field_rn_d_j_50 === -1) {
	                if (this.field_rn_c_g_17 > 250) {
	                    this.field_rn_d_j_50 = 0;
	                }
	                else {
	                    this.field_rn_d_j_50 = 1;
	                }
	                if (Math.random() < 0.35) {
	                    this.field_rn_d_j_50 = ((2.0 * Math.random()) | 0);
	                }
	            }
	            switch ((this.field_rn_d_j_50)) {
	                case 0:
	                    if (this.field_rn_c_else_14 < 300 && this.field_rn_c_if_16 < -3) {
	                        this.method_rn_c_a_12(1);
	                        this.method_rn_c_a_12(2);
	                    }
	                    break;
	                case 1:
	                    if (this.field_rn_c_else_14 < 300 && this.field_rn_c_if_16 < 0) {
	                        this.method_rn_c_a_12(0);
	                        this.method_rn_c_a_12(2);
	                    }
	            }
	        }
	    }
	    method_rn_d_int_48() {
	        if (Math.random() < 0.85) {
	            this.method_rn_c_a_12(2);
	        }
	    }
	}
	class ServerCheck extends shims_1.Frame {
	    constructor() {
	        super();
	        this.setLayout(new shims_1.GridLayout(4, 1));
	        var var1 = new shims_1.Panel();
	        var1.add(new shims_1.Label("Couldn\'t connect to server!"));
	        this.add(var1);
	        var var2 = new shims_1.Panel();
	        var2.add(new shims_1.Label("Your high scores may not be saved on the server."));
	        this.add(var2);
	        var var3 = new shims_1.Panel();
	        var3.add(new shims_1.Label("To fix this, close all browser windows and try again."));
	        this.setTitle("Error!");
	        this.field_rn_ServerCheck_ok_76 = new shims_1.Button("Damn. Oh well if that\'s how it is...");
	        this.add(var3);
	        this.add(this.field_rn_ServerCheck_ok_76);
	        this.pack();
	        this.show();
	    }
	    action(var1, var2) {
	        if (var1.target === this.field_rn_ServerCheck_ok_76) {
	            this.dispose();
	        }
	        return false;
	    }
	}
	class NameFrame extends shims_1.Frame {
	    constructor(var1, var2, var4) {
	        if (((var1 != null && var1 instanceof Slime1P) || var1 === null) && ((typeof var2 === 'number') || var2 === null) && ((typeof var4 === 'number') || var4 === null)) {
	            super();
	            this.score = 0;
	            this.level = 0;
	            (() => {
	                this.app = var1;
	                this.score = var2;
	                this.level = var4;
	                this.setLayout(new shims_1.GridLayout(2, 1));
	                var var5 = new shims_1.Panel();
	                var5.add(new shims_1.Label("Your score: " + var2));
	                this.add(var5);
	                var var6 = new shims_1.Panel();
	                var6.add(new shims_1.Label("Enter your name:"));
	                this.name = new shims_1.TextField(20);
	                var6.add(this.name);
	                this.field_rn_NameFrame_ok_110 = new shims_1.Button("OK");
	                var6.add(this.field_rn_NameFrame_ok_110);
	                this.add(var6);
	                this.setTitle("New High Score!");
	                this.pack();
	                this.show();
	            })();
	        }
	        else if (var1 === undefined && var2 === undefined && var4 === undefined) {
	            super();
	            this.score = 0;
	            this.level = 0;
	            (() => {
	            })();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    action(var1, var2) {
	        if (var1.target === this.field_rn_NameFrame_ok_110) {
	            Class_rn_g_7.method_rn_g_a_67(this.app, this.score, Math.round(this.level), this.name.getText());
	            this.dispose();
	        }
	        return false;
	    }
	}
	class Slime1P extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 750;
	        this.recommended_height = 375;
	        this.pointsToWin = 6;
	        this.aiMode = 0;
	        this.boundsP1select = new Array(0);
	        this.boundsP2select = new Array(0);
	        this.oneplayer = false;
	        this.ballRad = 25;
	        this.buffered = false;
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1X = 0;
	        this.p1Y = 0;
	        this.p2X = 0;
	        this.p2Y = 0;
	        this.p1Diam = 0;
	        this.p2Diam = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldX = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.mousePressed = false;
	        this.fInPlay = false;
	        this.fP1Fire = false;
	        this.fP2Fire = false;
	        this.superFlash = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.fP1Touches = 0;
	        this.fP2Touches = 0;
	        this.fP1TouchesTot = 0;
	        this.fP2TouchesTot = 0;
	        this.fP1Clangers = 0;
	        this.fP2Clangers = 0;
	        this.fP1Aces = 0;
	        this.fP2Aces = 0;
	        this.fP1Winners = 0;
	        this.fP2Winners = 0;
	        this.fP1PointsWon = 0;
	        this.fP2PointsWon = 0;
	        this.fP1HitStill = false;
	        this.fP2HitStill = false;
	        this.fP1Frames = 0;
	        this.fP2Frames = 0;
	        this.fP1Super = 0;
	        this.fP2Super = 0;
	        this.fServerMoved = false;
	        this.hitNetSinceTouched = false;
	        this.fEndGame = false;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.crossedNetTime = 0;
	        this.pausedTime = 0;
	        this.paused = false;
	        this.scoringRun = 0;
	        this.oldScoringRun = 0;
	        this.p1Run = 0;
	        this.p2Run = 0;
	        this.p1Jump = 0;
	        this.p2Jump = 0;
	        this.gameScore = 0;
	        this.gameOver = false;
	        this.replayIndex = 0;
	        this.replayStart = 0;
	        this.replaying = false;
	    }
	    init() {
	        var var1 = "oneslime.net";
	        if (!(var1 === "oneslime.net")) {
	            try {
	                this.getAppletContext().showDocument(new shims_1.URL("http://oneslime.net/"), "_self");
	            }
	            catch (var5) {
	            }
	            ;
	        }
	        else {
	            shims_1.System.out.println("One Slime: http://oneslime.net/");
	            new Class_rn_e_3();
	            new Class_rn_d_4();
	            new Class_rn_b_5();
	            new Class_rn_a_6();
	            this.nWidth = this.size().width;
	            this.nHeight = this.size().height;
	            this.fInPlay = this.fEndGame = false;
	            this.promptMsg = "Click the mouse to play!";
	            this.buffer = new shims_1.BufferedImage(this.nWidth, this.nHeight, 1);
	            this.fInPlay = this.fEndGame = false;
	            this.promptMsg = "Click the mouse to play!";
	            this.screen = this.buffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	            this.slimeColText = ["Inferior Human Controlled Slime ", "The Pathetic White Slime ", "Angry Red Slimons ", "The Slime Master ", "Psycho Slime ", "The Big Blue Boss "];
	            this.slimeColours = [shims_1.Color.fromString("yellow"), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), shims_1.Color.fromString("black"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("blue")];
	            this.loserText1 = ["You are a loser!", this.slimeColText[2] + "gives you the gong!", this.slimeColText[3] + "says \"You are seriously inept.\"", this.slimeColText[4] + "laughs at the pathetic slow opposition.", this.slimeColText[5] + "devours you!"];
	            this.loserText2 = ["Better luck next time.", "So who has the red face bombing out on level 2, huh?", "Congrats on reaching level 3.", "Congrats on reaching level 4!", "Yum."];
	            this.p1Col = 0;
	            this.p1Run = 8;
	            this.p1Jump = 31;
	            this.p1Diam = 100;
	            this.gameScore = 0;
	            this.gameOver = true;
	            this.paused = false;
	            this.method_rn_Slime1P_new_77();
	            this.method_rn_Slime1P_for_80();
	            this.redrawRegions = new shims_1.Vector(0);
	            this.method_rn_Slime1P_void_78();
	            this.repaint();
	            this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	                return undefined;
	            }
	            else {
	                var array = [];
	                for (var i = 0; i < dims[0]; i++) {
	                    array.push(allocate(dims.slice(1)));
	                }
	                return array;
	            } }; return allocate(dims); })([1000, 8]);
	            try {
	                shims_1.System.out.println(this.getCodeBase());
	                var var3 = (new shims_1.URL(this.getCodeBase() + "bler")).openStream();
	                var var4 = new shims_1.BufferedReader(new shims_1.InputStreamReader(var3));
	                if (!(var4.readLine() === "bler")) {
	                    var4.close();
	                    var3.close();
	                }
	                var4.close();
	                var3.close();
	            }
	            catch (var6) {
	                shims_1.System.out.println("Error...\n" + var6);
	                new ServerCheck();
	            }
	            ;
	        }
	    }
	    method_rn_Slime1P_new_77() {
	        this.fP1PointsWon = this.fP2PointsWon = 0;
	        this.p1Diam = this.p2Diam = 100;
	        this.p2Run = 8;
	        this.p2Jump = 31;
	        this.fP2Fire = false;
	        if (!this.oneplayer) {
	            this.aiMode = 0;
	        }
	        switch ((this.aiMode)) {
	            case 0:
	                this.field_rn_Slime1P_ai_109 = new Class_rn_d_4();
	                this.fP2Fire = false;
	                this.SKY_COL = shims_1.Color.fromString("blue");
	                this.COURT_COL = shims_1.Color.fromString("gray");
	                this.BALL_COL = shims_1.Color.fromString("yellow");
	                break;
	            case 1:
	                this.field_rn_Slime1P_ai_109 = new Class_rn_e_3();
	                this.fP2Fire = false;
	                this.SKY_COL = new shims_1.Color(30, 80, 0);
	                this.COURT_COL = shims_1.Color.fromString("darkGray");
	                this.BALL_COL = new shims_1.Color(128, 128, 255);
	                break;
	            case 2:
	                this.field_rn_Slime1P_ai_109 = new Class_rn_b_5();
	                this.fP2Fire = false;
	                this.SKY_COL = new shims_1.Color(98, 57, 57);
	                this.COURT_COL = new shims_1.Color(0, 168, 0);
	                this.BALL_COL = shims_1.Color.fromString("white");
	                break;
	            case 3:
	                this.field_rn_Slime1P_ai_109 = new Class_rn_b_5();
	                this.fP2Fire = true;
	                this.SKY_COL = shims_1.Color.fromString("black");
	                this.COURT_COL = shims_1.Color.fromString("red");
	                this.BALL_COL = shims_1.Color.fromString("yellow");
	                break;
	            case 4:
	                this.field_rn_Slime1P_ai_109 = new Class_rn_a_6();
	                this.p2Diam = 150;
	                this.fP2Fire = false;
	                this.SKY_COL = shims_1.Color.fromString("black");
	                this.COURT_COL = shims_1.Color.fromString("red");
	                this.BALL_COL = shims_1.Color.fromString("yellow");
	        }
	        if (this.oneplayer) {
	            this.p2Col = this.aiMode + 1;
	        }
	        else {
	            this.p2Col = this.p1Col;
	        }
	        this.field_rn_Slime1P_ai_109.method_rn_c_a_9(this, 2);
	    }
	    update(var1) {
	        if (this.buffered) {
	            var1.drawImage(this.buffer, 0, 0, null);
	        }
	        else {
	            this.method_rn_Slime1P_void_78();
	        }
	        this.redrawRegions = new shims_1.Vector(0);
	    }
	    paint(var1) {
	        this.update(var1);
	    }
	    method_rn_Slime1P_void_78() {
	        var var1;
	        if (this.buffered) {
	            var1 = this.buffer.getGraphics();
	        }
	        else {
	            var1 = this.getGraphics();
	        }
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        var1.setColor(this.SKY_COL);
	        var1.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        var1.setColor(this.COURT_COL);
	        var1.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        var1.setColor(shims_1.Color.fromString("white"));
	        var1.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	        var var2 = var1.getFontMetrics();
	        var var3;
	        if (this.gameOver) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            var var4 = var1.getFont();
	            var1.setFont(this.screen.getFont());
	            var3 = "Slime Volleyball: One Slime";
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (this.screen.getFontMetrics().stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0) - var2.getHeight());
	            var1.setFont(var4);
	            var1.setColor(shims_1.Color.fromString("white"));
	            var3 = "Written by Quin Pendragon and Daniel Wedge";
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0) + var2.getHeight() * 2);
	            var3 = "http://oneslime.net/";
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0) + (var2.getHeight() * 7 / 2 | 0));
	            var1.setColor(shims_1.Color.fromString("white"));
	            var3 = "Click here to start a one player game!";
	            this.boundsP1select[0] = (this.nWidth / 4 | 0) - (var2.stringWidth(var3) / 2 | 0) - 10;
	            this.boundsP1select[1] = (this.nHeight / 3 | 0) + var2.getHeight() * 5;
	            this.boundsP1select[2] = this.boundsP1select[0] + var2.stringWidth(var3) + 20;
	            this.boundsP1select[3] = this.boundsP1select[1] + var2.getHeight() * 3;
	            var1.fillRect((this.nWidth / 4 | 0) - (var2.stringWidth(var3) / 2 | 0) - 10, (this.nHeight / 3 | 0) + var2.getHeight() * 5, var2.stringWidth(var3) + 20, var2.getHeight() * 3);
	            var1.setColor(this.SKY_COL);
	            if (this.aiMode !== 0) {
	                var1.drawString(var3, (this.nWidth / 4 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0) + (var2.getHeight() * 13 / 2 | 0));
	                var3 = "or press C to continue...";
	                var1.drawString(var3, (this.nWidth / 4 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0) + (var2.getHeight() * 15 / 2 | 0));
	            }
	            else {
	                var1.drawString(var3, (this.nWidth / 4 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0) + var2.getHeight() * 7);
	            }
	            var1.setColor(shims_1.Color.fromString("white"));
	            var3 = "Click here to start a two player game!";
	            var1.fillRect((this.nWidth * 3 / 4 | 0) - (var2.stringWidth(var3) / 2 | 0) - 10, (this.nHeight / 3 | 0) + var2.getHeight() * 5, var2.stringWidth(var3) + 20, var2.getHeight() * 3);
	            var1.setColor(this.SKY_COL);
	            var1.drawString(var3, (this.nWidth * 3 / 4 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0) + var2.getHeight() * 7);
	            this.boundsP2select[0] = (this.nWidth * 3 / 4 | 0) - (var2.stringWidth(var3) / 2 | 0) - 10;
	            this.boundsP2select[1] = (this.nHeight / 3 | 0) + var2.getHeight() * 5;
	            this.boundsP2select[2] = this.boundsP2select[0] + var2.stringWidth(var3) + 20;
	            this.boundsP2select[3] = this.boundsP2select[1] + var2.getHeight() * 3;
	            if (!this.replaying) {
	                this.method_rn_Slime1P_goto_93();
	                this.method_rn_Slime1P_byte_95();
	            }
	        }
	        else if (!this.fInPlay) {
	            var1.setColor(shims_1.Color.fromString("white"));
	            var3 = "Your score: " + this.gameScore;
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 2 | 0) - var2.getHeight());
	            if (this.fP1PointsWon === 6) {
	                var3 = "Level bonus: " + (1000 * this.fP1PointsWon / (this.fP1PointsWon + this.fP2PointsWon) | 0) * this.method_rn_Slime1P_case_108() + " points";
	                var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 2 | 0) + var2.getHeight());
	                var3 = "Time bonus: " + Math.round((this.gameTime < 300000 ? 300000 - this.gameTime : 0) / 1000) * Math.round(this.method_rn_Slime1P_case_108()) + " points";
	                var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 2 | 0) + var2.getHeight() * 2);
	                if (this.fP2PointsWon === 0) {
	                    var3 = "Flawless Victory: " + 1000 * this.method_rn_Slime1P_case_108() + " points";
	                    var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 2 | 0) + var2.getHeight() * 3);
	                }
	            }
	            var1.setFont(this.screen.getFont());
	            var2 = this.screen.getFontMetrics();
	            var3 = "Level " + (this.aiMode + 1) + " clear!";
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0));
	            var3 = "Click the mouse to continue...";
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var2.getHeight() + 10);
	            this.method_rn_Slime1P_goto_93();
	        }
	        else {
	            this.method_rn_Slime1P_goto_93();
	        }
	    }
	    method_rn_Slime1P_do_79() {
	        if (!this.buffered) {
	            this.redrawRegions.removeAllElements();
	        }
	        else {
	            for (var var1 = 0; var1 < this.redrawRegions.size(); ++var1) {
	                var var2 = this.redrawRegions.get(var1);
	                var var3 = var2[0];
	                var var4 = var2[1];
	                var var5 = var2[2];
	                var var6 = var2[3];
	                if (var3 < 0) {
	                    var3 = 0;
	                }
	                if (var5 > this.nWidth) {
	                    var5 = this.nWidth - 1;
	                }
	                if (var4 < 0) {
	                    var4 = 0;
	                }
	                if (var6 > this.nHeight) {
	                    var6 = this.nHeight - 1;
	                }
	                var var7 = var5 - var3;
	                var var8 = var6 - var4;
	                if (var7 > 0 && var8 > 0) {
	                    var var9 = this.buffer.getSubimage(var3, var4, var7, var8);
	                    this.getGraphics().drawImage(var9, var3, var4, null);
	                }
	            }
	            this.redrawRegions.removeAllElements();
	        }
	    }
	    method_rn_Slime1P_for_80() {
	        this.p1X = this.p1OldX = 200;
	        this.p1Y = this.p1OldY = 0;
	        this.p2X = this.p2OldX = 800;
	        this.p2Y = this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.ballX = this.ballOldX = 200;
	        this.ballY = this.ballOldY = 400;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.hitNetSinceTouched = false;
	        this.fServerMoved = this.fP1Touched = this.fP2Touched = false;
	        this.fP1Touches = this.fP2Touches = 0;
	        this.repaint();
	        this.promptMsg = "";
	        this.replayStart = this.replayIndex = 0;
	        this.replaying = false;
	    }
	    handleEvent(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((var1.id)) {
	                case 401:
	                case 403:
	                    switch ((var1.key)) {
	                        case 32:
	                            this.mousePressed = true;
	                            return false;
	                        case 65:
	                        case 97:
	                            this.method_rn_Slime1P_c_81();
	                            return false;
	                        case 66:
	                        case 98:
	                            this.buffered = !this.buffered;
	                            this.method_rn_Slime1P_void_78();
	                            return false;
	                        case 67:
	                        case 99:
	                            if (this.gameOver) {
	                                this.fEndGame = false;
	                                this.fInPlay = true;
	                                this.promptMsg = "";
	                                this.gameOver = false;
	                                this.gameScore = 0;
	                                this.method_rn_Slime1P_for_80();
	                                this.method_rn_Slime1P_new_77();
	                                this.repaint();
	                                this.gameThread = new shims_1.Thread(this);
	                                this.gameThread.start();
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            this.method_rn_Slime1P_b_82();
	                            return false;
	                        case 73:
	                        case 105:
	                            if (!this.oneplayer) {
	                                this.method_rn_Slime1P_long_88();
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                            if (!this.oneplayer) {
	                                this.method_rn_Slime1P_e_85();
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                            if (this.oneplayer) {
	                                this.fP1PointsWon = this.fP2PointsWon = 0;
	                                this.fP1Fire = false;
	                                this.gameScore = 0;
	                                this.method_rn_Slime1P_new_77();
	                                this.method_rn_Slime1P_for_80();
	                                this.method_rn_Slime1P_void_78();
	                                this.repaint();
	                                this.startTime = shims_1.System.currentTimeMillis();
	                                this.paused = false;
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                            if (!this.oneplayer) {
	                                this.method_rn_Slime1P_j_86();
	                            }
	                            return false;
	                        case 79:
	                        case 111:
	                            if (!this.paused) {
	                                this.pausedTime = shims_1.System.currentTimeMillis();
	                                try {
	                                    this.getAppletContext().showDocument(new shims_1.URL("http://oneslime.net/boss/launch.html"), "_blank");
	                                }
	                                catch (var3) {
	                                    shims_1.System.out.println(var3);
	                                }
	                                ;
	                                this.paused = true;
	                            }
	                            else {
	                                this.startTime += shims_1.System.currentTimeMillis() - this.pausedTime;
	                                this.paused = false;
	                            }
	                            return false;
	                        case 80:
	                        case 112:
	                            if (!this.paused) {
	                                this.pausedTime = shims_1.System.currentTimeMillis();
	                                this.paused = true;
	                            }
	                            else {
	                                this.startTime += shims_1.System.currentTimeMillis() - this.pausedTime;
	                                this.paused = false;
	                            }
	                            return false;
	                        case 87:
	                        case 119:
	                            this.method_rn_Slime1P_char_84();
	                            return false;
	                        case 1004:
	                            if (this.oneplayer) {
	                                this.method_rn_Slime1P_char_84();
	                            }
	                            else {
	                                this.method_rn_Slime1P_long_88();
	                            }
	                            return false;
	                        case 1006:
	                            if (this.oneplayer) {
	                                this.method_rn_Slime1P_c_81();
	                            }
	                            else {
	                                this.method_rn_Slime1P_e_85();
	                            }
	                            return false;
	                        case 1007:
	                            if (this.oneplayer) {
	                                this.method_rn_Slime1P_b_82();
	                            }
	                            else {
	                                this.method_rn_Slime1P_j_86();
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 402:
	                case 404:
	                    switch ((var1.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.method_rn_Slime1P_try_83();
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.method_rn_Slime1P_try_83();
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                            if (this.p2XV < 0) {
	                                this.method_rn_Slime1P_else_87();
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                            if (this.p2XV > 0) {
	                                this.method_rn_Slime1P_else_87();
	                            }
	                            return false;
	                        case 1006:
	                            if (this.oneplayer && this.p1XV < 0) {
	                                this.method_rn_Slime1P_try_83();
	                            }
	                            else if (!this.oneplayer && this.p2XV < 0) {
	                                this.method_rn_Slime1P_else_87();
	                                return false;
	                            }
	                            return false;
	                        case 1007:
	                            if (this.oneplayer && this.p1XV > 0) {
	                                this.method_rn_Slime1P_try_83();
	                            }
	                            else if (!this.oneplayer && this.p2XV > 0) {
	                                this.method_rn_Slime1P_else_87();
	                                return false;
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    if (this.gameOver) {
	                        if (var1.x > this.boundsP1select[0] && var1.y > this.boundsP1select[1] && var1.x < this.boundsP1select[2] && var1.y < this.boundsP1select[3]) {
	                            this.oneplayer = true;
	                        }
	                        else {
	                            if (var1.x <= this.boundsP2select[0] || var1.y <= this.boundsP2select[1] || var1.x >= this.boundsP2select[2] || var1.y >= this.boundsP2select[3]) {
	                                break;
	                            }
	                            this.oneplayer = false;
	                        }
	                    }
	                    this.mousePressed = true;
	                    if (!this.fInPlay) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.promptMsg = "";
	                        if (this.gameScore !== 0) {
	                            if (this.aiMode < 5) {
	                                ++this.aiMode;
	                            }
	                            else {
	                                this.aiMode = 0;
	                            }
	                        }
	                        if (this.gameOver) {
	                            this.aiMode = 0;
	                            this.gameOver = false;
	                            this.gameScore = 0;
	                        }
	                        this.method_rn_Slime1P_new_77();
	                        this.repaint();
	                        this.ballX = 200;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball: One Slime: http://oneslime.net/");
	            }
	            return false;
	        });
	    }
	    method_rn_Slime1P_c_81() {
	        this.p1XV = this.fP1Fire ? -2 * this.p1Run : -this.p1Run;
	        if (this.p1X === 200 && this.ballX === 200 && !this.fP2Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	        }
	    }
	    method_rn_Slime1P_b_82() {
	        this.p1XV = this.fP1Fire ? 2 * this.p1Run : this.p1Run;
	        if (this.p1X === 200 && this.ballX === 200 && !this.fP2Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	        }
	    }
	    method_rn_Slime1P_try_83() {
	        this.p1XV = 0;
	    }
	    method_rn_Slime1P_char_84() {
	        if (this.p1Y === 0) {
	            this.p1YV = this.fP1Fire ? (45 * this.p1Jump / 31 | 0) : this.p1Jump;
	        }
	    }
	    method_rn_Slime1P_e_85() {
	        this.p2XV = this.fP2Fire ? -2 * this.p2Run : -this.p2Run;
	        if (this.p2X === 800 && this.ballX === 800 && !this.fP1Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	        }
	    }
	    method_rn_Slime1P_j_86() {
	        this.p2XV = this.fP2Fire ? 2 * this.p2Run : this.p2Run;
	        if (this.p2X === 800 && this.ballX === 800 && !this.fP1Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	        }
	    }
	    method_rn_Slime1P_else_87() {
	        this.p2XV = 0;
	    }
	    method_rn_Slime1P_long_88() {
	        if (this.p2Y === 0) {
	            this.p2YV = this.fP2Fire ? (45 * this.p2Jump / 31 | 0) : this.p2Jump;
	        }
	    }
	    method_rn_Slime1P_d_89() {
	        if (this.oneplayer) {
	            var var1 = [this.ballX, this.ballY, this.ballVX, this.ballVY, this.p1X, this.p1Y, this.p1XV, this.p1YV, this.p2X, this.p2Y, this.p2XV, this.p2YV];
	            this.field_rn_Slime1P_ai_109.method_rn_c_a_10(var1, this.fP1Fire, this.fP2Fire);
	            this.field_rn_Slime1P_ai_109.method_rn_c_a_11();
	        }
	    }
	    method_rn_Slime1P_i_90() {
	        this.method_rn_Slime1P_d_89();
	        this.p1X += this.p1XV;
	        if (this.p1X < (this.p1Diam / 2 | 0)) {
	            this.p1X = (this.p1Diam / 2 | 0);
	        }
	        if (this.p1X > 495 - (this.p1Diam / 2 | 0)) {
	            this.p1X = 495 - (this.p1Diam / 2 | 0);
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.fP1Fire ? 4 : 2;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 1000 - (this.p2Diam / 2 | 0)) {
	            this.p2X = 1000 - (this.p2Diam / 2 | 0);
	        }
	        if (this.p2X < 505 + (this.p2Diam / 2 | 0)) {
	            this.p2X = 505 + (this.p2Diam / 2 | 0);
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.fP2Fire ? 4 : 2;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    method_rn_Slime1P_if_91() {
	        var var1 = new Array(0);
	        var var2;
	        if (this.buffered) {
	            var2 = this.buffer.getGraphics();
	        }
	        else {
	            var2 = this.getGraphics();
	        }
	        var var3 = 5;
	        var var4 = ((this.ballRad + var3) * this.nHeight / 1000 | 0);
	        var var5 = (this.ballOldX * this.nWidth / 1000 | 0);
	        var var6 = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        var2.setColor(this.SKY_COL);
	        var2.fillRect(var5 - var4, var6 - var4, 2 * var4, 2 * var4);
	        var var7 = var5;
	        var var8 = var6;
	        this.superFlash = !this.superFlash;
	        var var9 = (this.nWidth * this.p1Diam / 1000 | 0);
	        var var10 = (this.nHeight * this.p1Diam / 1000 | 0);
	        var var11 = (this.p1OldX * this.nWidth / 1000 | 0) - (var9 / 2 | 0);
	        var var12 = (4 * this.nHeight / 5 | 0) - var10 - (this.p1OldY * this.nHeight / 1000 | 0);
	        var2.setColor(this.SKY_COL);
	        var2.fillRect(var11, var12, var9, var10);
	        var1[0] = var11;
	        var1[1] = var12;
	        var1[2] = var11 + var9;
	        var1[3] = var12 + var10;
	        var9 = (this.nWidth * this.p1Diam / 1000 | 0);
	        var10 = (this.nHeight * this.p1Diam / 1000 | 0);
	        var11 = (this.p1X * this.nWidth / 1000 | 0) - (var9 / 2 | 0);
	        var12 = (4 * this.nHeight / 5 | 0) - var10 - (this.p1Y * this.nHeight / 1000 | 0);
	        var2.setColor(this.fP1Fire && this.superFlash ? shims_1.Color.fromString("white") : this.slimeColours[this.p1Col]);
	        var2.fillArc(var11, var12, var9, 2 * var10, 0, 180);
	        if (var11 < var1[0]) {
	            var1[0] = var11;
	        }
	        if (var12 < var1[1]) {
	            var1[1] = var12;
	        }
	        if (var11 + var9 > var1[2]) {
	            var1[2] = var11 + var9;
	        }
	        if (var12 + var10 > var1[3]) {
	            var1[3] = var12 + var10;
	        }
	        this.redrawRegions.add(var1);
	        var var15 = this.p1X + (38 * this.p1Diam / 100 | 0);
	        var var16 = this.p1Y - (60 * this.p1Diam / 100 | 0);
	        var11 = (var15 * this.nWidth / 1000 | 0);
	        var12 = (4 * this.nHeight / 5 | 0) - var10 - (var16 * this.nHeight / 1000 | 0);
	        var var17 = var11 - var5;
	        var var18 = var12 - var6;
	        var var19 = (Math.sqrt((var17 * var17 + var18 * var18)) | 0);
	        var var20 = ((this.nWidth / 50 | 0) * this.p1Diam / 100 | 0);
	        var var21 = ((this.nHeight / 25 | 0) * this.p1Diam / 100 | 0);
	        var2.setColor(shims_1.Color.fromString("white"));
	        var2.fillOval(var11 - var20, var12 - var21, var20, var21);
	        var2.setColor(shims_1.Color.fromString("black"));
	        var2.fillOval(var11 - (4 * var17 / var19 | 0) - (3 * var20 / 4 | 0), var12 - (4 * var18 / var19 | 0) - (3 * var21 / 4 | 0), (var20 / 2 | 0), (var21 / 2 | 0));
	        var9 = (this.nWidth * this.p2Diam / 1000 | 0);
	        var10 = (this.nHeight * this.p2Diam / 1000 | 0);
	        var11 = (this.p2OldX * this.nWidth / 1000 | 0) - (var9 / 2 | 0);
	        var12 = (4 * this.nHeight / 5 | 0) - var10 - (this.p2OldY * this.nHeight / 1000 | 0);
	        var2.setColor(this.SKY_COL);
	        var2.fillRect(var11, var12, var9, var10);
	        var1 = [var11, var12, var11 + var9, var12 + var10];
	        var9 = (this.nWidth * this.p2Diam / 1000 | 0);
	        var10 = (this.nHeight * this.p2Diam / 1000 | 0);
	        var11 = (this.p2X * this.nWidth / 1000 | 0) - (var9 / 2 | 0);
	        var12 = (4 * this.nHeight / 5 | 0) - (this.p2Diam * this.nHeight / 1000 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        var2.setColor(this.fP2Fire && this.superFlash ? shims_1.Color.fromString("white") : this.slimeColours[this.p2Col]);
	        if (var11 < var1[0]) {
	            var1[0] = var11;
	        }
	        if (var12 < var1[1]) {
	            var1[1] = var12;
	        }
	        if (var11 + var9 > var1[2]) {
	            var1[2] = var11 + var9;
	        }
	        if (var12 + var10 > var1[3]) {
	            var1[3] = var12 + var10;
	        }
	        this.redrawRegions.add(var1);
	        var2.fillArc(var11, var12, var9, 2 * var10, 0, 180);
	        var15 = this.p2X - (18 * this.p2Diam / 100 | 0);
	        var16 = this.p2Y - (60 * this.p2Diam / 100 | 0);
	        var11 = (var15 * this.nWidth / 1000 | 0);
	        var12 = (4 * this.nHeight / 5 | 0) - var10 - (var16 * this.nHeight / 1000 | 0);
	        var17 = var11 - var5;
	        var18 = var12 - var6;
	        var19 = (Math.sqrt((var17 * var17 + var18 * var18)) | 0);
	        var20 = ((this.nWidth / 50 | 0) * this.p2Diam / 100 | 0);
	        var21 = ((this.nHeight / 25 | 0) * this.p2Diam / 100 | 0);
	        var2.setColor(shims_1.Color.fromString("white"));
	        var2.fillOval(var11 - var20, var12 - var21, var20, var21);
	        var2.setColor(shims_1.Color.fromString("black"));
	        var2.fillOval(var11 - (4 * var17 / var19 | 0) - (3 * var20 / 4 | 0), var12 - (4 * var18 / var19 | 0) - (3 * var21 / 4 | 0), (var20 / 2 | 0), (var21 / 2 | 0));
	        if (!this.fP1Fire && !this.fP2Fire) {
	            this.superFlash = false;
	        }
	        var5 = (this.ballX * this.nWidth / 1000 | 0);
	        var6 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var2.setColor(this.BALL_COL);
	        var2.fillOval(var5 - var4, var6 - var4, 2 * var4, 2 * var4);
	        var1 = [var7 - var4, var8 - var4, var7 + var4, var8 + var4];
	        if (var5 - var4 < var1[0]) {
	            var1[0] = var5 - var4;
	        }
	        if (var6 - var4 < var1[1]) {
	            var1[1] = var6 - var4;
	        }
	        if (var5 + var4 > var1[2]) {
	            var1[2] = var5 + var4;
	        }
	        if (var6 + var4 > var1[3]) {
	            var1[3] = var6 + var4;
	        }
	        this.redrawRegions.add(var1);
	    }
	    method_rn_Slime1P_h_92() {
	        var var1 = 5;
	        var var2 = 15;
	        var var3 = 22;
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var var4 = 2 * (this.ballX - this.p1X);
	            var var5 = this.ballY - this.p1Y;
	            var var6 = (Math.sqrt((var4 * var4 + var5 * var5)) | 0);
	            var var7 = this.ballVX - this.p1XV;
	            var var8 = this.ballVY - this.p1YV;
	            var var9;
	            if (var5 > 0 && var6 < this.p1Diam + this.ballRad && var6 > var1) {
	                var9 = ((var4 * var7 + var5 * var8) / var6 | 0);
	                this.ballX = this.p1X + (((this.p1Diam + this.ballRad) / 2 | 0) * var4 / var6 | 0);
	                this.ballY = this.p1Y + ((this.p1Diam + this.ballRad) * var5 / var6 | 0);
	                if (var9 <= 0) {
	                    this.ballVX += this.p1XV - (2 * var4 * var9 / var6 | 0);
	                    if (this.ballVX < -var2) {
	                        this.ballVX = -var2;
	                    }
	                    if (this.ballVX > var2) {
	                        this.ballVX = var2;
	                    }
	                    this.ballVY += this.p1YV - (2 * var5 * var9 / var6 | 0);
	                    if (this.ballVY < -var3) {
	                        this.ballVY = -var3;
	                    }
	                    if (this.ballVY > var3) {
	                        this.ballVY = var3;
	                    }
	                }
	                if (this.fServerMoved) {
	                    this.fP1Touched = true;
	                    ++this.fP1Touches;
	                    this.fP2Touches = 0;
	                    this.fP1HitStill = this.p1YV === 0 && this.p1XV === 0;
	                    this.hitNetSinceTouched = false;
	                }
	            }
	            var4 = 2 * (this.ballX - this.p2X);
	            var5 = this.ballY - this.p2Y;
	            var6 = (Math.sqrt((var4 * var4 + var5 * var5)) | 0);
	            var7 = this.ballVX - this.p2XV;
	            var8 = this.ballVY - this.p2YV;
	            if (var5 > 0 && var6 < this.p2Diam + this.ballRad && var6 > var1) {
	                var9 = ((var4 * var7 + var5 * var8) / var6 | 0);
	                this.ballX = this.p2X + (((this.p2Diam + this.ballRad) / 2 | 0) * var4 / var6 | 0);
	                this.ballY = this.p2Y + ((this.p2Diam + this.ballRad) * var5 / var6 | 0);
	                if (var9 <= 0) {
	                    this.ballVX += this.p2XV - (2 * var4 * var9 / var6 | 0);
	                    if (this.ballVX < -var2) {
	                        this.ballVX = -var2;
	                    }
	                    if (this.ballVX > var2) {
	                        this.ballVX = var2;
	                    }
	                    this.ballVY += this.p2YV - (2 * var5 * var9 / var6 | 0);
	                    if (this.ballVY < -var3) {
	                        this.ballVY = -var3;
	                    }
	                    if (this.ballVY > var3) {
	                        this.ballVY = var3;
	                    }
	                }
	                if (this.fServerMoved) {
	                    this.fP2Touched = true;
	                    ++this.fP2Touches;
	                    this.fP1Touches = 0;
	                    this.fP2HitStill = this.p2YV === 0 && this.p2XV === 0;
	                    this.hitNetSinceTouched = false;
	                }
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 480 && this.ballX < 520 && this.ballY < 140) {
	                if (this.ballVY < 0 && this.ballY > 130) {
	                    this.ballVY *= -1;
	                    this.ballY = 130;
	                }
	                else if (this.ballX < 500) {
	                    this.ballX = 480;
	                    this.ballVX = this.ballVX >= 0 ? -this.ballVX : this.ballVX;
	                    this.hitNetSinceTouched = true;
	                }
	                else {
	                    this.ballX = 520;
	                    this.ballVX = this.ballVX <= 0 ? -this.ballVX : this.ballVX;
	                    this.hitNetSinceTouched = true;
	                }
	            }
	        }
	    }
	    method_rn_Slime1P_goto_93() {
	        if (!this.replaying) {
	            var var1 = this.getGraphics();
	            var var2 = var1.getFontMetrics();
	            var var3 = (this.nHeight / 15 | 0);
	            var var4 = 20;
	            var var5;
	            for (var5 = 0; var5 < 6; ++var5) {
	                if (this.fP1PointsWon >= var5 + 1) {
	                    var1.setColor(this.slimeColours[this.p1Col]);
	                    var1.fillOval(var4, 30 - (var3 / 2 | 0), var3, var3);
	                }
	                var1.setColor(shims_1.Color.fromString("white"));
	                var1.drawOval(var4, 30 - (var3 / 2 | 0), var3, var3);
	                var4 += var3 + 10;
	            }
	            var4 = this.nWidth - 20 - 6 * (var3 + 10);
	            for (var5 = 0; var5 < 6; ++var5) {
	                if (this.fP2PointsWon >= 6 - var5) {
	                    var1.setColor(this.slimeColours[this.p2Col]);
	                    var1.fillOval(var4, 30 - (var3 / 2 | 0), var3, var3);
	                }
	                var1.setColor(shims_1.Color.fromString("white"));
	                var1.drawOval(var4, 30 - (var3 / 2 | 0), var3, var3);
	                var4 += var3 + 10;
	            }
	        }
	    }
	    method_rn_Slime1P_a_94(var1) {
	        var var3 = "";
	        var var4 = Math.round(var1 / 10) % 100;
	        var var6 = Math.round(var1 / 1000) % 60;
	        var var8 = Math.round(var1 / 60000) % 60;
	        var var10 = Math.round(var1 / 3600000);
	        var3 = var3 + var8 + ":";
	        if (var6 < 10) {
	            var3 = var3 + "0";
	        }
	        var3 = var3 + var6;
	        return var3;
	    }
	    method_rn_Slime1P_byte_95() {
	        var var1;
	        if (this.buffered) {
	            var1 = this.buffer.getGraphics();
	        }
	        else {
	            var1 = this.getGraphics();
	        }
	        var var2 = (this.nHeight / 20 | 0);
	        var1.setColor(this.SKY_COL);
	        var1.setFont(this.screen.getFont());
	        var var3 = var1.getFontMetrics();
	        var var4 = (this.oneplayer ? "Score: " + this.gameScore : "") + (!this.fInPlay ? "" : " Time: " + this.method_rn_Slime1P_a_94((this.paused ? this.pausedTime : shims_1.System.currentTimeMillis()) - this.startTime));
	        var var5 = var3.stringWidth(var4);
	        var var6 = (this.nWidth / 2 | 0) - (var5 / 2 | 0) - 10;
	        var1.fillRect(var6, 0, var5 + 20, var2 + 22);
	        var1.setColor(shims_1.Color.fromString("white"));
	        var var7 = var3.stringWidth(var4);
	        var var8 = (this.nWidth / 2 | 0) - (var7 / 2 | 0);
	        var var9 = var3.getHeight() * 2;
	        var1.drawString(var4, var8, var9);
	        this.redrawRegions.add([var8, 0, var8 + var7, var9 + (var9 / 2 | 0)]);
	    }
	    method_rn_Slime1P_int_96() {
	        var var1;
	        if (this.buffered) {
	            var1 = this.buffer.getGraphics();
	        }
	        else {
	            var1 = this.getGraphics();
	        }
	        var1.setFont(this.screen.getFont());
	        this.screen.setColor(this.COURT_COL);
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.method_rn_Slime1P_a_97(this.promptMsg, 0);
	    }
	    method_rn_Slime1P_a_97(var1, var2) {
	        var var3 = this.getGraphics();
	        var3.setFont(new shims_1.Font(var3.getFont().getName(), 1, 15));
	        var var4 = var3.getFontMetrics();
	        var3.setColor(shims_1.Color.fromString("white"));
	        var var5 = var4.stringWidth(var1);
	        var var6 = ((this.nWidth - var5) / 2 | 0);
	        var var7 = (this.nHeight * 4 / 5 | 0) + var4.getHeight() * (var2 + 1) + 10;
	        var3.drawString(var1, var6, var7);
	        this.method_rn_Slime1P_goto_93();
	        this.method_rn_Slime1P_byte_95();
	        this.redrawRegions.add([var6, var7, var6 + var5 + 1, var7 + var4.getHeight()]);
	    }
	    method_rn_Slime1P_a_98(var1) {
	        this.method_rn_Slime1P_a_99(var1, true);
	    }
	    method_rn_Slime1P_a_99(var1, var2) {
	        var var3 = var1 !== 0 ? var1 - 1 : this.replayData.length - 1;
	        this.p1OldX = this.replayData[var3][0];
	        this.p1OldY = this.replayData[var3][1];
	        this.p2OldX = this.replayData[var3][2];
	        this.p2OldY = this.replayData[var3][3];
	        this.ballOldX = this.replayData[var3][4];
	        this.ballOldY = this.replayData[var3][5];
	        this.p1X = this.replayData[var1][0];
	        this.p1Y = this.replayData[var1][1];
	        this.p2X = this.replayData[var1][2];
	        this.p2Y = this.replayData[var1][3];
	        this.ballX = this.replayData[var1][4];
	        this.ballY = this.replayData[var1][5];
	        this.ballVX = 0;
	        this.ballVY = 1;
	        if (this.ballOldX === 0 && this.ballOldY === 0) {
	            this.ballOldX = this.ballOldY = -500;
	        }
	        if (this.ballX === this.ballOldX && this.ballY === this.ballOldY) {
	            this.ballOldX = this.ballOldY = -500;
	        }
	        this.method_rn_Slime1P_if_91();
	        if (this.buffered) {
	            this.getGraphics().drawImage(this.buffer, 0, 0, null);
	        }
	    }
	    method_rn_Slime1P_g_100() {
	        this.replayData[this.replayIndex][0] = this.p1X;
	        this.replayData[this.replayIndex][1] = this.p1Y;
	        this.replayData[this.replayIndex][2] = this.p2X;
	        this.replayData[this.replayIndex][3] = this.p2Y;
	        this.replayData[this.replayIndex][4] = this.ballX;
	        this.replayData[this.replayIndex][5] = this.ballY;
	        this.replayData[this.replayIndex][6] = this.p1Col;
	        this.replayData[this.replayIndex][7] = this.p2Col;
	        ++this.replayIndex;
	        if (this.replayIndex >= this.replayData.length) {
	            this.replayIndex = 0;
	        }
	        if (this.replayStart === this.replayIndex) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= this.replayData.length) {
	            this.replayStart = 0;
	        }
	    }
	    method_rn_Slime1P_f_101() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.replaying = true;
	            this.method_rn_Slime1P_void_78();
	            var var1 = this.buffered ? this.buffer.getGraphics() : this.getGraphics();
	            var var2 = var1.getFontMetrics();
	            var var3 = var2.getHeight();
	            this.promptMsg = "Press space to continue...";
	            this.mousePressed = false;
	            var var4 = this.scoringRun;
	            this.scoringRun = this.oldScoringRun;
	            var var5 = this.replayStart;
	            var var6 = false;
	            while ((!this.mousePressed)) {
	                ++var5;
	                if (var5 >= this.replayData.length) {
	                    var5 = 0;
	                }
	                if (var5 === this.replayIndex) {
	                    var1.setColor(shims_1.Color.fromString("white"));
	                    var1.fillRect(20, 20, 20, 20);
	                    yield this.method_rn_Slime1P_a_107(1000, false);
	                    var6 = !var6;
	                    this.paint(var1);
	                    var1.setColor(this.SKY_COL);
	                    var1.fillRect(0, 0, this.nWidth, (this.nHeight / 20 | 0) + 22);
	                    if (this.replayIndex < this.replayStart) {
	                        var5 += this.replayData.length;
	                    }
	                    while ((var5 > this.replayStart)) {
	                        var5 -= 5;
	                        this.method_rn_Slime1P_void_78();
	                        var1.setColor(shims_1.Color.fromString("white"));
	                        var1.fillPolygon(new shims_1.Polygon([20, 35, 35, 50, 50, 35, 35, 20], [30, 20, 30, 20, 40, 30, 40, 30], 8));
	                        if (var5 < this.replayStart) {
	                            var5 = this.replayStart;
	                        }
	                        this.method_rn_Slime1P_a_99(var5 % this.replayData.length, false);
	                        yield this.method_rn_Slime1P_a_107(20, false);
	                    }
	                    ;
	                    this.method_rn_Slime1P_void_78();
	                    var1.setColor(shims_1.Color.fromString("white"));
	                    var1.fillRect(20, 20, 20, 20);
	                    this.method_rn_Slime1P_a_98(this.replayStart);
	                    yield this.method_rn_Slime1P_a_107(500, false);
	                    this.method_rn_Slime1P_void_78();
	                }
	                this.method_rn_Slime1P_a_98(var5);
	                try {
	                    shims_1.Thread.sleep(var6 ? 60 : 20);
	                }
	                catch (var8) {
	                }
	                ;
	                var1.setColor(shims_1.Color.fromString("white"));
	                var1.fillPolygon(new shims_1.Polygon([20, 35, 20], [20, 30, 40], 3));
	            }
	            ;
	            this.scoringRun = var4;
	            this.promptMsg = "";
	            this.paint(var1);
	            this.replaying = false;
	        });
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.replayIndex = this.replayStart = 0;
	            this.method_rn_Slime1P_int_96();
	            this.superFlash = false;
	            this.scoringRun = 0;
	            this.fP1Touches = 0;
	            this.fP2Touches = 0;
	            this.fP1TouchesTot = 0;
	            this.fP2TouchesTot = 0;
	            this.fP1Clangers = 0;
	            this.fP2Clangers = 0;
	            this.fP1Aces = 0;
	            this.fP2Aces = 0;
	            this.fP1Winners = 0;
	            this.fP2Winners = 0;
	            this.fP1Frames = 0;
	            this.fP2Frames = 0;
	            this.fP1Super = 0;
	            this.fP2Super = 0;
	            this.fP1HitStill = false;
	            this.fP2HitStill = false;
	            this.fServerMoved = false;
	            this.method_rn_Slime1P_goto_93();
	            this.fP1Touched = this.fP2Touched = false;
	            this.hitNetSinceTouched = false;
	            var var1 = false;
	            var var2 = false;
	            var var3 = false;
	            this.gameOver = false;
	            var var4 = this.buffer.getGraphics();
	            this.startTime = shims_1.System.currentTimeMillis();
	            this.method_rn_Slime1P_void_78();
	            this.repaint();
	            while ((this.gameThread != null && !this.gameOver)) {
	                if (!this.paused) {
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.method_rn_Slime1P_i_90();
	                    this.method_rn_Slime1P_h_92();
	                    this.method_rn_Slime1P_byte_95();
	                    this.method_rn_Slime1P_goto_93();
	                    this.method_rn_Slime1P_if_91();
	                    this.method_rn_Slime1P_do_79();
	                    this.method_rn_Slime1P_g_100();
	                }
	                if (this.ballY < 35) {
	                    var var5 = shims_1.System.currentTimeMillis();
	                    if (this.ballX > 500) {
	                        ++this.fP1PointsWon;
	                    }
	                    else {
	                        ++this.fP2PointsWon;
	                    }
	                    if (this.ballX > 500 || this.fP1Touches < 3 && (!this.hitNetSinceTouched || this.fP1Touches <= 0) && this.fP2Touched && (!this.fP1HitStill || this.fP1Touches <= 0)) {
	                        if (this.ballX > 500 && (this.fP2Touches >= 3 || this.hitNetSinceTouched && this.fP2Touches > 0 || !this.fP1Touched || this.fP2HitStill && this.fP2Touches > 0)) {
	                            ++this.fP2Clangers;
	                            var1 = true;
	                        }
	                    }
	                    else {
	                        ++this.fP1Clangers;
	                        var1 = true;
	                    }
	                    if (this.fP1Touched && !this.fP2Touched && this.ballX >= 500) {
	                        ++this.fP1Aces;
	                        var2 = true;
	                        this.gameScore += 200 * this.method_rn_Slime1P_case_108();
	                    }
	                    else if (this.fP2Touched && !this.fP1Touched && this.ballX < 500) {
	                        ++this.fP2Aces;
	                        var2 = true;
	                    }
	                    else if (this.ballX > 500 && this.fP1Touches > 0) {
	                        ++this.fP1Winners;
	                        var3 = true;
	                        this.gameScore += 100 * this.method_rn_Slime1P_case_108();
	                    }
	                    else if (this.ballX <= 500 && this.fP2Touches > 0) {
	                        ++this.fP2Winners;
	                        var3 = true;
	                    }
	                    if (this.ballX > 500 && !var3 && !var2) {
	                        this.gameScore += 50 * this.method_rn_Slime1P_case_108();
	                    }
	                    if (this.oneplayer) {
	                        this.promptMsg = this.ballX <= 500 ? this.slimeColText[this.p2Col] : this.slimeColText[this.p1Col];
	                    }
	                    else {
	                        this.promptMsg = this.slimeColText[this.p1Col] + (this.ballX <= 500 ? "2 " : "1 ");
	                    }
	                    if (this.fP1PointsWon !== 6 && this.fP2PointsWon !== 6) {
	                        if (var2) {
	                            this.promptMsg = this.promptMsg + "aces the serve!";
	                        }
	                        else if (var3) {
	                            this.promptMsg = this.promptMsg + "scores a winner!";
	                        }
	                        else if (this.ballX > 500 && !this.fP1Touched && this.fP2Touched || this.ballX <= 500 && this.fP1Touched && !this.fP2Touched) {
	                            this.promptMsg = this.promptMsg + "laughs at his opponent\'s inability to serve!";
	                        }
	                        else if (this.fP1PointsWon === this.fP2PointsWon) {
	                            this.promptMsg = this.promptMsg + "draws level!";
	                        }
	                        else if ((this.ballX <= 500 || this.fP1PointsWon !== this.fP2PointsWon + 1) && (this.ballX > 500 || this.fP1PointsWon + 1 !== this.fP2PointsWon)) {
	                            this.promptMsg = this.promptMsg + "scores!";
	                        }
	                        else {
	                            this.promptMsg = this.promptMsg + "takes the lead!";
	                        }
	                    }
	                    else {
	                        this.promptMsg = this.promptMsg + "wins!";
	                    }
	                    var var7 = this.ballX;
	                    this.method_rn_Slime1P_int_96();
	                    this.method_rn_Slime1P_goto_93();
	                    this.method_rn_Slime1P_byte_95();
	                    var1 = false;
	                    var2 = false;
	                    var3 = false;
	                    this.mousePressed = false;
	                    yield this.method_rn_Slime1P_a_107(1500, true);
	                    if (this.mousePressed) {
	                        this.method_rn_Slime1P_g_100();
	                        yield this.method_rn_Slime1P_f_101();
	                    }
	                    if (this.fP1PointsWon === 6 || this.fP2PointsWon === 6) {
	                        yield this.method_rn_Slime1P_a_102();
	                    }
	                    this.promptMsg = "";
	                    this.method_rn_Slime1P_for_80();
	                    this.ballX = var7 >= 500 ? 200 : 800;
	                    this.method_rn_Slime1P_void_78();
	                    this.repaint();
	                    this.startTime += shims_1.System.currentTimeMillis() - var5;
	                }
	                if (this.gameThread != null) {
	                    yield this.method_rn_Slime1P_a_107(20, true);
	                }
	            }
	            ;
	            this.fEndGame = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    method_rn_Slime1P_a_102() {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (!this.oneplayer) {
	                yield this.method_rn_Slime1P_a_103(this.fP1PointsWon > this.fP2PointsWon);
	            }
	            else if (this.fP1PointsWon === 6) {
	                this.gameTime = shims_1.System.currentTimeMillis() - this.startTime;
	                if (this.fP1PointsWon === 6) {
	                    this.gameScore += (1000 * this.fP1PointsWon / (this.fP1PointsWon + this.fP2PointsWon) | 0) * this.method_rn_Slime1P_case_108();
	                    this.gameScore = ((Math.round(this.gameScore) + Math.round((this.gameTime < 300000 ? 300000 - this.gameTime : 0) / 1000) * Math.round(this.method_rn_Slime1P_case_108())) | 0);
	                }
	                if (this.fP2PointsWon === 0) {
	                    this.gameScore += 1000 * this.method_rn_Slime1P_case_108();
	                }
	                if (this.aiMode === 4) {
	                    this.aiMode = 5;
	                    yield this.method_rn_Slime1P_if_104(true);
	                }
	            }
	            else {
	                yield this.method_rn_Slime1P_if_104(false);
	            }
	            this.fInPlay = false;
	            this.gameThread = null;
	            this.method_rn_Slime1P_void_78();
	            this.repaint();
	        });
	    }
	    method_rn_Slime1P_a_103(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var2 = this.screen.getFontMetrics();
	            this.method_rn_Slime1P_goto_93();
	            this.method_rn_Slime1P_byte_95();
	            var var3;
	            if (this.buffered) {
	                var3 = this.buffer.getGraphics();
	            }
	            else {
	                var3 = this.getGraphics();
	            }
	            var var4 = var3.getFontMetrics();
	            var3.setColor(this.COURT_COL);
	            var var5 = ["C\'mon player " + (var1 ? 1 : 2) + ", I\'ll take you on!", "Inferior human controlled slime " + (var1 ? 2 : 1) + " is insipid!", "Inferior human controlled slime " + (var1 ? 2 : 1) + " is rubbish!", "Super inferior human controlled slime " + (var1 ? 1 : 2) + " wins!", "You\'re both yellow cowards. Play me instead!"];
	            var var6 = var5[((var5.length * Math.random()) | 0)];
	            var3.fillRect(((this.nWidth - var4.stringWidth(var6)) / 2 | 0) - 30, (this.nHeight / 2 | 0) - var4.getAscent() * 5, var4.stringWidth(var6) + 60, var4.getAscent() * 5 + var2.getAscent() * 2);
	            var3.setColor(shims_1.Color.fromString("white"));
	            var3.drawString(var6, ((this.nWidth - var4.stringWidth(var6)) / 2 | 0), (this.nHeight / 2 | 0) - var4.getAscent() * 3);
	            var3.setFont(this.screen.getFont());
	            var3.drawString("GAME OVER", ((this.nWidth - var2.stringWidth("GAME OVER")) / 2 | 0), (this.nHeight / 2 | 0) + var2.getAscent());
	            this.repaint();
	            yield this.method_rn_Slime1P_a_107(3000, false);
	            this.gameOver = true;
	        });
	    }
	    method_rn_Slime1P_if_104(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var2 = this.screen.getFontMetrics();
	            this.method_rn_Slime1P_goto_93();
	            this.method_rn_Slime1P_byte_95();
	            var var3;
	            if (this.buffered) {
	                var3 = this.buffer.getGraphics();
	            }
	            else {
	                var3 = this.getGraphics();
	            }
	            var var4 = var3.getFontMetrics();
	            if (!var1) {
	                var3.setColor(this.COURT_COL);
	                var3.fillRect(((this.nWidth - this.method_rn_Slime1P_a_106(var4.stringWidth(this.loserText1[this.aiMode]), var4.stringWidth(this.loserText2[this.aiMode]))) / 2 | 0) - 30, (this.nHeight / 2 | 0) - var4.getAscent() * 5, this.method_rn_Slime1P_a_106(var4.stringWidth(this.loserText1[this.aiMode]), var4.stringWidth(this.loserText2[this.aiMode])) + 60, var4.getAscent() * 5 + var2.getAscent() * 2);
	                var3.setColor(shims_1.Color.fromString("white"));
	                var3.drawString(this.loserText1[this.aiMode], ((this.nWidth - var4.stringWidth(this.loserText1[this.aiMode])) / 2 | 0), (this.nHeight / 2 | 0) - var4.getAscent() * 3);
	                var3.drawString(this.loserText2[this.aiMode], ((this.nWidth - var4.stringWidth(this.loserText2[this.aiMode])) / 2 | 0), (this.nHeight / 2 | 0) - var4.getAscent() * 2);
	                var3.setFont(this.screen.getFont());
	                var3.drawString("GAME OVER", ((this.nWidth - var2.stringWidth("GAME OVER")) / 2 | 0), (this.nHeight / 2 | 0) + var2.getAscent());
	            }
	            else {
	                this.method_rn_Slime1P_a_105(var3);
	                var3.setColor(shims_1.Color.fromString("white"));
	                var3.setFont(this.screen.getFont());
	                var3.drawString("YOU WIN!", ((this.nWidth - var2.stringWidth("YOU WIN!")) / 2 | 0), (this.nHeight / 2 | 0));
	                var3.drawString("The Slimes bow down before the new Slime King!", ((this.nWidth - var4.stringWidth("The Slimes bow down before the new Slime King!")) / 2 | 0), (this.nHeight / 2 | 0) + var4.getAscent());
	            }
	            if (this.buffered) {
	                this.repaint();
	            }
	            try {
	                if (Class_rn_g_7.method_rn_g_a_66(this, Math.round(this.gameScore))) {
	                    new NameFrame(this, Math.round(this.gameScore), this.aiMode);
	                }
	            }
	            catch (var6) {
	            }
	            ;
	            yield this.method_rn_Slime1P_a_107(3000, false);
	            this.gameOver = true;
	            this.method_rn_Slime1P_void_78();
	            this.repaint();
	        });
	    }
	    method_rn_Slime1P_a_105(var1) {
	    }
	    method_rn_Slime1P_a_106(var1, var2) {
	        return var1 > var2 ? var1 : var2;
	    }
	    method_rn_Slime1P_a_107(var1, var3) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (this.gameThread != null) {
	                for (var var4 = 0; Math.round(var4) < Math.round(var1 / 20); ++var4) {
	                    try {
	                        var var10000 = this.gameThread;
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var6) {
	                    }
	                    ;
	                }
	            }
	        });
	    }
	    method_rn_Slime1P_case_108() {
	        return (Math.pow(2.0, this.aiMode) | 0);
	    }
	    destroy() {
	        if (this.gameThread != null) {
	            this.gameThread.stop();
	            this.gameThread = null;
	        }
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Slime1P;
	Class_rn_g_7.field_rn_g_if_75_$LI$();


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class BalancingPoleSlime extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 600;
	        this.recommended_height = 300;
	        this.slimeColText = ["Blue Slime", "Red Slime", "Green Slime", "Black Slime", "Yellow Slime", "Night Elves"];
	        this.darkRed = new shims_1.Color(128, 0, 0);
	        this.darkGreen = new shims_1.Color(0, 128, 0);
	        this.darkBlue = new shims_1.Color(0, 0, 128);
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Sticky = false;
	        this.fP2Sticky = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.p1TouchingGoal = 0;
	        this.p2TouchingGoal = 0;
	        this.fEndGame = false;
	        this.fPlayOn = false;
	        this.nScoreX = 0;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.playOnTicks = 0;
	        this.SMILE_DIFF = 0;
	        this.DAMPING = 0;
	        this.MAX_TICKS_TOUCHING_GOAL = 0;
	        this.JUMPVEL = 0;
	        this.SLIMEVEL = 0;
	        this.GRAVITY = 0;
	        this.gameLength = 0;
	        this.p1Fall = 0;
	        this.p2Fall = 0;
	        this.p1Stage = 0;
	        this.p2Stage = 0;
	        this.counting = 0;
	        this.p1XVar = 0;
	        this.p1YVar = 0;
	        this.p2XVar = 0;
	        this.p2YVar = 0;
	        this.countTime = 0;
	        this.turnLikely = 0;
	        this.likelyness = 0;
	        this.countDown = 0;
	        this.NUM_PARTICLES = 0;
	        this.totalDegrees = 0;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fSuperSlime = false;
	        this.doubleBuffered = false;
	        this.slimaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("blue")];
	        this.secondaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("blue")];
	        this.frenzyCol = 0;
	        this.SMILE_DIFF = 2;
	        this.DAMPING = 7;
	        this.MAX_TICKS_TOUCHING_GOAL = 60;
	        this.p1Fall = 0;
	        this.p2Fall = 0;
	        this.p1Stage = 0;
	        this.p2Stage = 0;
	        this.counting = 1;
	        this.p1XVar = 0;
	        this.p1YVar = 0;
	        this.p2XVar = 0;
	        this.p2YVar = 0;
	        this.countTime = 0;
	        this.turnLikely = 0;
	        this.likelyness = 1;
	        this.countDown = 100;
	        this.NUM_PARTICLES = 100;
	        this.particle_x = new Array(this.NUM_PARTICLES);
	        this.particle_y = new Array(this.NUM_PARTICLES);
	        this.particle_yv = new Array(this.NUM_PARTICLES);
	        this.particle_xv = new Array(this.NUM_PARTICLES);
	        this.totalDegrees = 360;
	        this.p1EyeStageX = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 41, 41, 41, 41, 41, 40, 40, 40, 40, 39, 39, 39, 39, 38, 38, 38, 38, 37, 37, 37, 37, 36, 36, 36, 35, 35, 35, 35, 34, 34, 34, 34, 33, 33, 33, 32, 32, 32, 31, 31, 31, 30, 30, 29, 29, 28, 28, 27, 27, 26, 26, 25, 25, 24, 24, 23, 23, 22, 22, 21, 21, 20, 20, 19, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0, -1, -1, -2, -2, -3, -3, -4, -4, -5, -5, -6, -6, -7, -7, -8, -8, -9, -9, -9, -9, -10, -10, -20, -10, -10, -10, -10, -10, -10, -10, -10, -10, -11, -11, -11, -11, -11, -11, -11, -11, -11, -11, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -12, -11, -11, -11, -11, -11, -11, -11, -11, -11, -10, -10, -10, -10, -10, -10, -10, -10, -9, -9, -9, -9, -9, -9, -9, -8, -8, -8, -8, -8, -8, -8, -8, -7, -7, -7, -7, -7, -6, -6, -6, -6, -6, -6, -5, -5, -5, -5, -5, -5, -4, -4, -4, -4, -3, -3, -3, -3, -2, -2, -2, -2, -1, -1, -1, -1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
	        this.p1EyeStageY = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3, -4, -4, -4, -4, -4, -5, -5, -5, -5, -5, -6, -6, -6, -6, -6, -7, -7, -7, -7, -7, -8, -8, -8, -8, -8, -9, -9, -9, -9, -9, -10, -10, -10, -10, -10, -11, -11, -11, -11, -11, -12, -12, -12, -12, -13, -13, -13, -13, -14, -14, -14, -14, -15, -15, -15, -15, -16, -16, -16, -16, -17, -17, -17, -17, -18, -18, -18, -19, -19, -19, -20, -20, -21, -21, -22, -22, -23, -23, -24, -24, -25, -25, -26, -26, -27, -27, -28, -28, -29, -29, -30, -30, -31, -31, -32, -32, -33, -33, -34, -34, -35, -35, -35, -36, -36, -36, -37, -37, -37, -37, -38, -38, -39, -39, -40, -40, -40, -40, -39, -39, -39, -39, -39, -39, -38, -38, -38, -38, -38, -38, -37, -37, -37, -37, -37, -37, -36, -36, -36, -36, -36, -36, -35, -35, -35, -35, -35, -35, -34, -34, -34, -34, -34, -34, -33, -33, -33, -33, -33, -33, -32, -32, -32, -32, -32, -32, -31, -31, -31, -31, -31, -31, -30, -30, -30, -30, -30, -30, -30, -29, -29, -29, -29, -28, -28, -28, -28, -28, -27, -27, -27, -27, -27, -26, -26, -26, -26, -25, -25, -25, -25, -25, -24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, -16, -16, -16, -16, -15, -15, -15, -15, -15, -14, -14, -14, -14, -13, -13, -13, -12, -12, -12, -12, -11, -11, -11, -11, -10, -10, -10, -10, -9, -9, -8, -8, -8, -7, -7, -6, -6, -6, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5];
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.pointsX = new Array(0);
	        this.pointsY = new Array(0);
	        this.p2Col = 1;
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    initStuff() {
	        this.countDown = 100;
	        this.turnLikely = 0;
	        this.likelyness = 2;
	        this.countTime = 0;
	        this.counting = 1;
	        this.p1Stage = 0;
	        this.p2Stage = 0;
	        this.p1Fall = 0;
	        this.p2Fall = 0;
	        this.fEndGame = true;
	        this.p1X = 200;
	        this.p1Y = 300;
	        this.p2X = 800;
	        this.p2Y = 300;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.ballOldX = this.ballX = 500;
	        this.ballOldY = this.ballY = 200;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.playOnTicks = 10;
	        this.fPlayOn = false;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.JUMPVEL = !this.fSuperSlime ? 31 : 65;
	        this.SLIMEVEL = !this.fSuperSlime ? 2 : 4;
	        this.GRAVITY = !this.fSuperSlime ? 2 : 8;
	    }
	    drawButtons() {
	        var buttons = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "World Cup"];
	        var fm = this.screen.getFontMetrics();
	        var darkBlue = new shims_1.Color(0, 0, 128);
	        for (var i = 0; i < 5; ++i) {
	            this.screen.setColor(darkBlue);
	            this.screen.fillRect(((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(buttons[i], ((2 * i + 1) * this.nWidth / 10 | 0) - (fm.stringWidth(buttons[i]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (fm.getHeight() / 2 | 0));
	        }
	        this.flip();
	    }
	    testButton(x, y) {
	        for (var i = 0; i < 5; ++i) {
	            if (x > ((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) && x < ((2 * i + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) && y > (this.nHeight * 2 / 10 | 0) && y < (this.nHeight * 3 / 10 | 0)) {
	                if (i === 4) {
	                    this.gameLength = 120000;
	                    this.worldCup = true;
	                }
	                else {
	                    this.gameLength = (1 << i) * 60000;
	                    this.worldCup = false;
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    handleEvent(event) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((event.id)) {
	                case 401:
	                case 403:
	                    if (this.fCanChangeCol) {
	                        switch ((event.key)) {
	                            case 54:
	                                this.fSuperSlime = !this.fSuperSlime;
	                                this.repaint();
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                do {
	                                    this.p2Col = this.p2Col !== 0 ? this.p2Col - 1 : this.slimaryCols.length - 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                do {
	                                    this.p2Col = this.p2Col === this.slimaryCols.length - 1 ? 0 : this.p2Col + 1;
	                                } while ((this.p2Col === this.p1Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 83:
	                            case 115:
	                                do {
	                                    this.p1Col = this.p1Col === this.slimaryCols.length - 1 ? 0 : this.p1Col + 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 87:
	                            case 119:
	                                while ((true)) {
	                                    this.p1Col = this.p1Col !== 0 ? this.p1Col - 1 : this.slimaryCols.length - 1;
	                                    if (this.p1Col !== this.p2Col) {
	                                        this.drawScores();
	                                        this.repaint();
	                                        break;
	                                    }
	                                }
	                                ;
	                        }
	                    }
	                    if (!this.fEndGame) {
	                        switch ((event.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                return false;
	                            case 65:
	                            case 97:
	                                this.p1Stage += this.SLIMEVEL;
	                                return false;
	                            case 66:
	                            case 98:
	                                this.toggleBuffering();
	                                return false;
	                            case 68:
	                            case 100:
	                                this.p1Stage -= this.SLIMEVEL;
	                                return false;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                if (!this.worldCup) {
	                                    this.p2Stage += this.SLIMEVEL;
	                                }
	                                return false;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                if (!this.worldCup) {
	                                    this.p2Stage -= this.SLIMEVEL;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((event.key)) {
	                        case 65:
	                        case 68:
	                        case 74:
	                        case 76:
	                        case 97:
	                        case 100:
	                        case 106:
	                        case 108:
	                        case 1006:
	                        case 1007:
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay && this.testButton(event.x, event.y)) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 500;
	                        this.ballY = 200;
	                        this.ballOldX = 500;
	                        this.ballOldY = 200;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1Score = 0;
	                        this.p2Score = 0;
	                        this.promptMsg = "";
	                        this.paint(this.getGraphics());
	                        try {
	                            yield shims_1.Thread.sleep(100);
	                        }
	                        catch (var4) {
	                        }
	                        ;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
	                    this.requestFocus();
	            }
	            return false;
	        });
	    }
	    DrawSlimers() {
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, 20, this.nWidth, (4 * this.nHeight / 5 | 0) - 20);
	        this.screen.setColor(new shims_1.Color(0, 0, 128));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6 - 10, this.nWidth, (this.nHeight / 5 | 0) - 10 + 20);
	        var k1 = (this.nWidth / 10 | 0);
	        var j2 = (this.nHeight / 10 | 0);
	        var i3 = (this.nWidth / 50 | 0);
	        var j3 = (this.nHeight / 25 | 0);
	        var k3 = (this.ballX * this.nWidth / 1000 | 0);
	        var l3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var i = (this.p1OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        var l = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        i = (this.p2OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.p2XVar = i;
	        this.p2YVar = l;
	        if (!this.fEndGame) {
	            this.MoveBall();
	        }
	        i = (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.p1XVar = i;
	        this.p1YVar = l;
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p1Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, this.p1Stage, 180);
	        this.screen.setColor(new shims_1.Color(0, 0, 128));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6 - 10, this.nWidth, (this.nHeight / 5 | 0) - 10 + 20);
	        var l4 = this.p1X + 38;
	        var i5 = this.p1Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        var i4 = i - k3;
	        var j4 = l - l3;
	        var k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        var flag = Math.random() < 0.01;
	        if (flag) {
	            this.p1Blink = 5;
	        }
	        var random;
	        var random3;
	        var random4;
	        if (this.p1Blink === 0) {
	            random = this.p1Stage;
	            if (random < 0) {
	                random = 360 + this.p1Stage;
	            }
	            random3 = (this.nWidth / 50 | 0) + this.p1EyeStageX[random];
	            random4 = (this.nHeight / 25 | 0) + this.p1EyeStageY[random];
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - random3, l - random4, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i + 5 - random3, l + 5 - random4, (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var j1;
	        var k5;
	        if (this.p1Score > this.p2Score + 2) {
	            random = (this.p1X * this.nWidth / 1000 | 0);
	            random3 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            random4 = (this.nWidth / 20 | 0);
	            j1 = (this.nHeight / 20 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(random, random3 + k5, random4, j1, -30, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        i = (this.p2X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p2Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, this.p2Stage, 180);
	        this.screen.setColor(new shims_1.Color(0, 0, 128));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6 - 10, this.nWidth, (this.nHeight / 5 | 0) - 10 + 20);
	        l4 = this.p2X - 18;
	        i5 = this.p2Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        i4 = i - k3;
	        j4 = l - l3;
	        k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        flag = Math.random() < 0.01;
	        if (flag) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            random = this.p2Stage;
	            if (random < 0) {
	                random = 360 + this.p2Stage;
	            }
	            random3 = (this.nWidth / 50 | 0) - 30 + this.p1EyeStageX[random];
	            random4 = (this.nHeight / 25 | 0) + this.p1EyeStageY[random];
	            this.screen.setColor(!flag ? shims_1.Color.fromString("white") : shims_1.Color.fromString("gray"));
	            this.screen.fillOval(i - random3, l - random4, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i + 5 - random3, l + 5 - random4, (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        if (this.p2Score > this.p1Score + 2) {
	            random = (this.nWidth / 20 | 0);
	            random3 = (this.nHeight / 20 | 0);
	            random4 = (this.p2X * this.nWidth / 1000 | 0) - random;
	            j1 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(random4, j1 + k5, random, random3, -10, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        this.screen.setColor(shims_1.Color.fromString("orange"));
	        this.screen.fillOval(115, 145, 10, 10);
	        this.screen.fillOval(475, 145, 10, 10);
	        if (this.counting === 1) {
	            random = ((Math.random() * 3.0) | 0);
	            if (random === 1) {
	                random3 = ((Math.random() * 2.0) | 0);
	                if (random3 === 1) {
	                    this.p1Stage += this.SLIMEVEL * this.likelyness;
	                }
	                if (random3 === 0) {
	                    this.p1Stage -= this.SLIMEVEL * this.likelyness;
	                }
	            }
	            random3 = ((Math.random() * 3.0) | 0);
	            if (random3 === 1) {
	                random4 = ((Math.random() * 2.0) | 0);
	                if (random4 === 1) {
	                    this.p2Stage += this.SLIMEVEL * this.likelyness;
	                }
	                if (random4 === 0) {
	                    this.p2Stage -= this.SLIMEVEL * this.likelyness;
	                }
	            }
	        }
	        if ((this.p1Stage < -60 || this.p1Stage > 60) && this.counting === 1) {
	            this.counting = 0;
	            this.p1Fall = 1;
	            ++this.p2Score;
	        }
	        if ((this.p2Stage < -60 || this.p2Stage > 60) && this.counting === 1) {
	            this.counting = 0;
	            this.p2Fall = 1;
	            ++this.p1Score;
	        }
	        this.drawScores();
	        if (this.p1Fall === 1) {
	            this.p1Y -= 16;
	        }
	        if (this.p2Fall === 1) {
	            this.p2Y -= 16;
	        }
	        if (this.p1Fall === 1 && this.p1Y <= 0) {
	            this.updateParticles();
	            this.drawParticles();
	        }
	        if (this.p2Fall === 1 && this.p2Y <= 0) {
	            this.updateParticles();
	            this.drawParticles();
	        }
	        this.screen.setColor(new shims_1.Color(0, 0, 128));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6 - 10, this.nWidth, (this.nHeight / 5 | 0) - 10 + 20);
	        ++this.turnLikely;
	        if (this.turnLikely > 100 && this.turnLikely < 200) {
	            this.likelyness = 2;
	        }
	        if (this.turnLikely > 200 && this.turnLikely < 300) {
	            this.likelyness = 3;
	        }
	        if (this.turnLikely > 300 && this.turnLikely < 400) {
	            this.likelyness = 4;
	        }
	        if (this.turnLikely > 400 && this.turnLikely < 500) {
	            this.likelyness = 5;
	        }
	        if (this.turnLikely > 500 && this.turnLikely < 600) {
	            this.likelyness = 6;
	        }
	        if (this.turnLikely > 600 && this.turnLikely < 700) {
	            this.likelyness = 7;
	        }
	        if (this.turnLikely > 700 && this.turnLikely < 800) {
	            this.likelyness = 9;
	        }
	        if (this.turnLikely > 800 && this.turnLikely < 900) {
	            this.likelyness = 10;
	        }
	        if (this.turnLikely > 900 && this.turnLikely < 1000) {
	            this.likelyness = 12;
	        }
	        if (this.turnLikely > 1000 && this.turnLikely < 1100) {
	            this.likelyness = 15;
	        }
	        if (this.turnLikely > 1100 && this.turnLikely < 1200) {
	            this.likelyness = 18;
	        }
	        if (this.turnLikely > 1200 && this.turnLikely < 1300) {
	            this.likelyness = 20;
	        }
	        if (this.turnLikely > 1300) {
	            this.likelyness = 20;
	        }
	    }
	    paint(g) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.drawScores();
	        if (!this.fInPlay) {
	            this.DrawSlimers();
	            this.drawButtons();
	        }
	        this.DrawGoals();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var fontmetrics = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fSuperSlime) {
	                this.screen.drawString("Super Balancing Pole Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Super Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            else {
	                this.screen.drawString("Balancing Pole Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            fontmetrics = this.screen.getFontMetrics();
	            this.screen.drawString("Written by Quin Pendragon + Anonymous Tipster", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Written by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + fontmetrics.getHeight() * 2);
	        }
	        this.flip();
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    ReplayFrame(i, j, k, l, i1, flag) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (flag) {
	                this.ballX = -1000;
	                this.ballOldX = 500;
	                this.ballY = -1000;
	                this.ballOldY = 500;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var j1 = i === 0 ? 199 : i - 1;
	                this.p1OldX = this.replayData[j1][0];
	                this.p1OldY = this.replayData[j1][1];
	                this.p2OldX = this.replayData[j1][2];
	                this.p2OldY = this.replayData[j1][3];
	                if (i === 0) {
	                    this.ballOldX = 500;
	                    this.ballOldY = 200;
	                }
	                else {
	                    this.ballOldX = this.replayData[j1][4];
	                    this.ballOldY = this.replayData[j1][5];
	                }
	            }
	            this.p1X = this.replayData[i][0];
	            this.p1Y = this.replayData[i][1];
	            this.p2X = this.replayData[i][2];
	            this.p2Y = this.replayData[i][3];
	            this.ballX = this.replayData[i][4];
	            this.ballY = this.replayData[i][5];
	            this.p1Col = this.replayData[i][6];
	            this.p2Col = this.replayData[i][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((i / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", j, k);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(j, k - i1, l, i1 * 2);
	            }
	            this.DrawSlimers();
	            this.DrawGoals();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var9) {
	            }
	            ;
	        });
	    }
	    MakeTime(l) {
	        var l1 = Math.round(l / 10) % 100;
	        var l2 = Math.round(l / 1000) % 60;
	        var l3 = Math.round(l / 60000) % 60;
	        var s = "";
	        if (l3 < 10) {
	            s = s + "0";
	        }
	        s = s + l3;
	        s = s + ":";
	        if (l2 < 10) {
	            s = s + "0";
	        }
	        s = s + l2;
	        s = s + ":";
	        if (l1 < 10) {
	            s = s + "0";
	        }
	        s = s + l1;
	        return s;
	    }
	    MoveSlimers() {
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 0:
	                    this.controlP2v0();
	                    break;
	                case 1:
	                    this.controlP2v1();
	                    break;
	                case 2:
	                    this.controlP2v2();
	                    break;
	                case 3:
	                    this.controlP2v3();
	            }
	        }
	    }
	    MoveBall() {
	    }
	    DrawGoals() {
	    }
	    DrawStatus() {
	        var g = this.screen;
	        var fontmetrics = this.screen.getFontMetrics();
	        var s = null;
	        var time = this.MakeTime(this.gameTime);
	        var i = (this.nHeight / 20 | 0);
	        var k = 0;
	        var kt = fontmetrics.stringWidth(time);
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 1:
	                    s = "Quarter Finals";
	                    break;
	                case 2:
	                    s = "Semi-Finals";
	                    break;
	                case 3:
	                    s = "Final";
	                    break;
	                default:
	                    s = "Qualifying";
	            }
	            if (this.fGoldenGoal) {
	                s = s + " [Golden Goal]";
	            }
	            else if (this.fExtraTime) {
	                s = s + " [Extra Time]";
	            }
	            k = fontmetrics.stringWidth(s);
	        }
	        var mw = k <= kt ? kt : k;
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect((this.nWidth / 2 | 0) - (mw / 2 | 0) - 5, 0, mw + 10, i + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(time, (this.nWidth / 2 | 0) - (kt / 2 | 0), fontmetrics.getAscent() + 20);
	        if (s != null) {
	            this.screen.drawString(s, (this.nWidth / 2 | 0) - (k / 2 | 0), fontmetrics.getAscent() + 20 - fontmetrics.getHeight());
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(new shims_1.Color(0, 0, 128));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6 - 10, this.nWidth, (this.nHeight / 5 | 0) - 10 + 20);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(s, i) {
	        if (((typeof s === 'string') || s === null) && ((typeof i === 'number') || i === null)) {
	            return (() => {
	                var fontmetrics = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fontmetrics.getHeight() * (i + 1) + 10);
	            })();
	        }
	        else if (s === undefined && i === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    promptBox(msg1, msg2) {
	        var fontmetrics = this.screen.getFontMetrics();
	        var len1 = fontmetrics.stringWidth(msg1);
	        var len2 = fontmetrics.stringWidth(msg2);
	        var maxlen = len1 <= len2 ? len2 : len1;
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect((this.nWidth / 2 | 0) - (maxlen / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), maxlen + 40, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(msg1, (this.nWidth / 2 | 0) - (len1 / 2 | 0), (this.nHeight * 9 / 20 | 0));
	        this.screen.drawString(msg2, (this.nWidth / 2 | 0) - (len2 / 2 | 0), (this.nHeight * 11 / 20 | 0));
	        this.flip();
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    drawScores() {
	        var g = this.screen;
	        var k = (this.nHeight / 20 | 0);
	        var fm = this.screen.getFontMetrics();
	        var i = fm.stringWidth("Replay...");
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect(0, 0, this.nWidth, k + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        g.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, (this.nWidth / 20 | 0), k);
	        var p2ScrStr = this.p2Score + " : " + this.slimeColText[this.p2Col];
	        g.drawString(p2ScrStr, this.nWidth - (this.nWidth / 20 | 0) - fm.stringWidth(p2ScrStr), k);
	    }
	    checkScored() {
	        if (this.ballY >= 200 || this.ballX >= 40 && this.ballX <= 960) {
	            return false;
	        }
	        else {
	            this.nScoreX = this.ballX;
	            this.fPlayOn = true;
	            this.playOnTicks = 10;
	            return true;
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.worldCupRound = 0;
	            do {
	                this.initStuff();
	                this.replayPos = this.replayStart = 0;
	                this.scoringRun = 0;
	                this.fP1Touched = this.fP2Touched = false;
	                this.gameTime = 0;
	                this.startTime = shims_1.System.currentTimeMillis();
	                this.fEndGame = false;
	                this.fCanChangeCol = false;
	                this.mousePressed = false;
	                this.gameTime = Math.round(this.gameLength);
	                this.fInPlay = true;
	                this.fEndGame = false;
	                var l;
	                if (this.worldCup) {
	                    this.paint(this.getGraphics());
	                    do {
	                        this.p2Col = ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);
	                    } while ((this.p1Col === this.p2Col));
	                    l = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
	                    switch ((this.worldCupRound)) {
	                        case 0:
	                            this.promptBox("Qualifying Round", l);
	                            this.gameLength = 30000;
	                            break;
	                        case 1:
	                            this.promptBox("Quarter Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 2:
	                            this.promptBox("Semi-Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 3:
	                            this.promptBox("World Cup Final", l);
	                            this.gameLength = 300000;
	                    }
	                    try {
	                        yield shims_1.Thread.sleep(4000);
	                    }
	                    catch (var5) {
	                    }
	                    ;
	                    this.repaint();
	                    this.flip();
	                }
	                while ((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1Score === this.p2Score)) {
	                    this.gameTime = this.startTime + Math.round(this.gameLength) - shims_1.System.currentTimeMillis();
	                    if (this.gameTime < 0) {
	                        this.gameTime = 0;
	                    }
	                    if (this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1Score === this.p2Score) {
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ".", "And the game goes into extra time...");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var10) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                        this.startTime += 30000;
	                        this.gameTime += 30000;
	                        this.fExtraTime = true;
	                    }
	                    else if (this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1Score === this.p2Score) {
	                        this.fGoldenGoal = true;
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ", and the game goes into Golden Goal.", "The next player to score will win the match!");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var9) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                    }
	                    this.SaveReplayData();
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    this.DrawGoals();
	                    this.DrawStatus();
	                    this.flip();
	                    if (this.p1X < 150) {
	                        ++this.p1TouchingGoal;
	                    }
	                    else {
	                        this.p1TouchingGoal = 0;
	                    }
	                    if (this.p2X > 850) {
	                        ++this.p2TouchingGoal;
	                    }
	                    else {
	                        this.p2TouchingGoal = 0;
	                    }
	                    if (this.fPlayOn) {
	                        --this.playOnTicks;
	                    }
	                    else {
	                        this.fPlayOn = this.checkScored();
	                    }
	                    if (this.playOnTicks === 0 || this.p1TouchingGoal > 60 || this.p2TouchingGoal > 60) {
	                        var var11 = shims_1.System.currentTimeMillis();
	                        if (this.p1TouchingGoal > 60) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.p2TouchingGoal > 60) {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.nScoreX < 500) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
	                        }
	                        else {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
	                        }
	                        this.drawPrompt();
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.flip();
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var8) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.playOnTicks = 10;
	                        this.fPlayOn = false;
	                        this.startTime += shims_1.System.currentTimeMillis() - var11;
	                        this.ballX = 490 + ((Math.random() * 20.0) | 0);
	                        this.ballY = 190 + ((Math.random() * 20.0) | 0);
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p1YV = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p2YV = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.repaint();
	                    }
	                    if (this.gameThread != null) {
	                        try {
	                            if (this.fPlayOn) {
	                                yield shims_1.Thread.sleep(120);
	                            }
	                            else {
	                                yield shims_1.Thread.sleep(20);
	                            }
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                    }
	                }
	                ;
	                this.fEndGame = true;
	                if (this.fPlayOn) {
	                    if (this.nScoreX < 500) {
	                        ++this.p2Score;
	                        this.promptMsg = this.slimeColText[this.p2Col] + " scores at the final whistle!";
	                    }
	                    else {
	                        ++this.p1Score;
	                        this.promptMsg = this.slimeColText[this.p1Col] + " scores at the final whistle!";
	                    }
	                    this.drawPrompt();
	                }
	                else {
	                    this.drawPrompt("And that\'s the final whistle!", 0);
	                }
	                if (this.worldCup) {
	                    if (this.p1Score === this.p2Score) {
	                        this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                        this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
	                        this.worldCup = false;
	                        this.flip();
	                    }
	                    else if (this.p1Score >= this.p2Score) {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the world cup!", 1);
	                                break;
	                            case 1:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
	                                break;
	                            case 2:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
	                                break;
	                            case 3:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " wins the WORLD CUP!!!!!", 1);
	                        }
	                        if (this.worldCupRound === 3) {
	                            this.worldCup = false;
	                            this.promptBox("You win the world cup!!!", "Congratulations!");
	                        }
	                        else {
	                            ++this.worldCupRound;
	                        }
	                    }
	                    else {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                            case 1:
	                                this.promptBox("You have been eliminated.", "Goodbye.");
	                                break;
	                            case 2:
	                                this.promptBox("You have been knocked out of the semifinals.", "You played well.");
	                                break;
	                            case 3:
	                                this.promptBox("You came second.", "Are you satisfied with that?");
	                        }
	                        this.worldCup = false;
	                    }
	                }
	                else if (this.p1Score === this.p2Score) {
	                    this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                }
	                else if (this.p1Score < this.p2Score) {
	                    this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1);
	                }
	                else {
	                    this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
	                }
	                this.flip();
	                try {
	                    yield shims_1.Thread.sleep(5000);
	                }
	                catch (var6) {
	                }
	                ;
	                this.initStuff();
	            } while ((this.worldCup));
	            this.fCanChangeCol = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.initStuff();
	        this.promptMsg = "Click on an option to play...";
	        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    toggleBuffering() {
	        if (this.doubleBuffered = !this.doubleBuffered) {
	            this.screen = this.backBuffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        else {
	            this.screen = this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        this.repaint();
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var fontmetrics = this.screen.getFontMetrics();
	            var i = fontmetrics.stringWidth("Replay...");
	            var j = fontmetrics.getHeight();
	            var k = (this.nWidth / 2 | 0) - (i / 2 | 0);
	            var l = (this.nHeight / 2 | 0) - j;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            var i1 = this.replayPos - 1;
	            while ((!this.mousePressed)) {
	                ++i1;
	                if (i1 >= 200) {
	                    i1 = 0;
	                }
	                if (i1 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var9) {
	                    }
	                    ;
	                    i1 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	                yield this.ReplayFrame(i1, k, l, i, j, false);
	                this.flip();
	            }
	            ;
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    updateParticles() {
	        --this.countDown;
	        if (this.countDown < 1) {
	            this.gameTime = 0;
	        }
	        for (var i = 0; i < this.NUM_PARTICLES; ++i) {
	            --this.gameTime;
	            var incrY = ((Math.random() * 4.0 + 1.0) | 0);
	            var incrX = ((Math.random() * 4.0 + 1.0) | 0);
	            var incr2 = ((Math.random() * 2.0 + 1.0) | 0);
	            var randY = ((Math.random() * 30.0 + 1.0) | 0);
	            var randX = ((Math.random() * 50.0 + 1.0) | 0);
	            this.particle_y[i] += this.particle_yv[i];
	            this.particle_x[i] += this.particle_xv[i];
	            ++this.particle_yv[i];
	            if (this.p1Fall === 1 && (this.particle_y[i] > 240 || this.particle_y[i] < 60)) {
	                this.particle_x[i] = this.p1XVar + randX;
	                this.particle_y[i] = this.p1YVar + 20;
	                this.particle_yv[i] = -1 - randY;
	                if (incr2 === 1) {
	                    this.particle_xv[i] = -1 - incrX;
	                }
	                if (incr2 === 2) {
	                    this.particle_xv[i] = 1 + incrX;
	                }
	            }
	            if (this.p2Fall === 1 && (this.particle_y[i] > 240 || this.particle_y[i] < 60)) {
	                this.particle_x[i] = this.p2XVar + randX;
	                this.particle_y[i] = this.p2YVar + 20;
	                this.particle_yv[i] = -1 - randY;
	                if (incr2 === 1) {
	                    this.particle_xv[i] = -1 - incrX;
	                }
	                if (incr2 === 2) {
	                    this.particle_xv[i] = 1 + incrX;
	                }
	            }
	        }
	    }
	    drawParticles() {
	        var r = 250;
	        var g = 250;
	        var b = 250;
	        for (var i = 0; i < this.NUM_PARTICLES; ++i) {
	            var cr = 1 * ((Math.random() * 3.0 + 1.0) | 0);
	            if (cr === 1) {
	                r = 255;
	                g = 255;
	                b = 255;
	            }
	            if (cr === 2) {
	                r = 200;
	                g = 100;
	                b = 255;
	            }
	            this.screen.setColor(new shims_1.Color(r, g, b));
	            this.screen.fillOval(this.particle_x[i], this.particle_y[i], 3, 3);
	        }
	    }
	    flip() {
	        if (this.doubleBuffered) {
	            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
	        }
	    }
	    getBallBounceX() {
	        var t = this.ballVY + (Math.sqrt((this.ballVY * this.ballVY + 2 * this.ballY)) | 0);
	        var ballBounceX = this.ballX + t * this.ballVX;
	        if (ballBounceX < 0) {
	            ballBounceX = -ballBounceX;
	        }
	        if (ballBounceX > 1000) {
	            ballBounceX = 1000 - ballBounceX;
	        }
	        return ballBounceX;
	    }
	    getBallMaxY() {
	        return this.ballVY < 0 ? this.ballY : this.ballY + (this.ballVY * this.ballVY / 2 | 0);
	    }
	    controlP2v0() {
	        if (this.p2Stage > 50) {
	            this.p2Stage -= this.SLIMEVEL;
	        }
	        if (this.p2Stage < -50) {
	            this.p2Stage += this.SLIMEVEL;
	        }
	    }
	    controlP2v1() {
	        if (this.p2Stage > 40) {
	            this.p2Stage -= this.SLIMEVEL;
	        }
	        if (this.p2Stage < -40) {
	            this.p2Stage += this.SLIMEVEL;
	        }
	    }
	    controlP2v2() {
	        if (this.p2Stage > 30) {
	            this.p2Stage -= this.SLIMEVEL;
	        }
	        if (this.p2Stage < -30) {
	            this.p2Stage += this.SLIMEVEL;
	        }
	    }
	    controlP2v3() {
	        if (this.p2Stage > 20) {
	            this.p2Stage -= this.SLIMEVEL;
	        }
	        if (this.p2Stage < -20) {
	            this.p2Stage += this.SLIMEVEL;
	        }
	    }
	    method_rn_BalancingPoleSlime_p_1(s) {
	        shims_1.System.out.println(s);
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = BalancingPoleSlime;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class SlimeDB extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 600;
	        this.recommended_height = 300;
	        this.slimeColText = ["Argentina", "Belgium", "Australia", "Iceland", "Cameroon", "China", "Costa Rica", "Croatia", "Denmark", "Ecuador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "South Africa", "South Korea", "Sweden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany"];
	        this.darkRed = new shims_1.Color(128, 0, 0);
	        this.darkGreen = new shims_1.Color(0, 128, 0);
	        this.darkBlue = new shims_1.Color(0, 0, 128);
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.fPictureMode = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Sticky = false;
	        this.fP2Sticky = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.fhold1 = false;
	        this.fhold2 = false;
	        this.p1TouchingGoal = 0;
	        this.p2TouchingGoal = 0;
	        this.fEndGame = false;
	        this.fPlayOn = false;
	        this.nScoreX = 0;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.playOnTicks = 0;
	        this.SMILE_DIFF = 0;
	        this.DAMPING = 0;
	        this.MAX_TICKS_TOUCHING_GOAL = 0;
	        this.JUMPVEL = 0;
	        this.SLIMEVEL = 0;
	        this.GRAVITY = 0;
	        this.gameLength = 0;
	        this.points = 0;
	        this.lastTouch = 0;
	        this.scoreTouch = 0;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fSuperSlime = false;
	        this.doubleBuffered = false;
	        this.slimaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), this.darkGreen, shims_1.Color.fromString("white"), this.darkRed, this.darkRed, new shims_1.Color(119, 41, 28), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(128, 128, 255), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(119, 41, 28), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(185, 30, 2), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(252, 239, 82), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(16, 180, 180), new shims_1.Color(241, 245, 71), new shims_1.Color(230, 230, 230), shims_1.Color.fromString("white")];
	        this.secondaryCols = [shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), new shims_1.Color(128, 128, 255), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), this.darkBlue, shims_1.Color.fromString("green"), shims_1.Color.fromString("blue"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), this.darkGreen, shims_1.Color.fromString("white"), new shims_1.Color(128, 255, 128), new shims_1.Color(255, 128, 0), this.darkGreen, this.darkBlue, new shims_1.Color(13, 131, 10), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), new shims_1.Color(7, 177, 33), shims_1.Color.fromString("red"), shims_1.Color.fromString("black")];
	        this.frenzyCol = 0;
	        this.SMILE_DIFF = 10;
	        this.DAMPING = 7;
	        this.MAX_TICKS_TOUCHING_GOAL = 60;
	        this.points = 2;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.pointsX = new Array(0);
	        this.pointsY = new Array(0);
	        this.p2Col = 1;
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var1 = this.screen.getFontMetrics();
	            var var2 = var1.stringWidth("Replay...");
	            var var3 = var1.getHeight();
	            var var4 = (this.nWidth / 2 | 0) - (var2 / 2 | 0);
	            var var5 = (this.nHeight / 2 | 0) - var3;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            var var6 = this.replayPos - 1;
	            while ((!this.mousePressed)) {
	                ++var6;
	                if (var6 >= 200) {
	                    var6 = 0;
	                }
	                if (var6 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var7) {
	                    }
	                    ;
	                    var6 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	                yield this.ReplayFrame(var6, var4, var5, var2, var3, false);
	                this.flip();
	            }
	            ;
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    DrawGoals() {
	        var var1 = true;
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect(15, 120, 5, 60);
	        this.screen.fillRect(580, 120, 5, 60);
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        this.screen.fillRect((this.nWidth * 9 / 10 | 0), (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        for (var var2 = 0; var2 <= 26; var2 += 5) {
	            this.screen.drawLine(var2 + 25, 160, var2 + 31, 180);
	            this.screen.drawLine(61 - var2, 160, 56 - var2, 180);
	            this.screen.drawLine(538 + var2, 160, 544 + var2, 180);
	            this.screen.drawLine(574 - var2, 160, 569 - var2, 180);
	        }
	        this.screen.setColor(shims_1.Color.fromString("orange"));
	        this.screen.fillRect(20, 160, 41, 3);
	        this.screen.fillRect(539, 160, 41, 3);
	        var var3 = ((60 - this.p1TouchingGoal) * this.nWidth / 120 | 0);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.screen.fillRect(0, this.nHeight - 5, var3, 5);
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(var3, this.nHeight - 5, (this.nWidth / 2 | 0) - var3, 5);
	        var var4 = this.nWidth - ((60 - this.p2TouchingGoal) * this.nWidth / 120 | 0);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.screen.fillRect(var4, this.nHeight - 5, this.nWidth, 5);
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect((this.nWidth / 2 | 0), this.nHeight - 5, var4 - (this.nWidth / 2 | 0), 5);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect(295, this.nHeight - 60, 5, 5);
	    }
	    DrawSlimers() {
	        var var1 = (this.nWidth / 10 | 0);
	        var var2 = (this.nHeight / 10 | 0);
	        var var3 = (this.nWidth / 50 | 0);
	        var var4 = (this.nHeight / 25 | 0);
	        var var5 = (this.ballX * this.nWidth / 1000 | 0);
	        var var6 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var var7 = (this.p1OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var var8 = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7, var8, var1, var2);
	        var7 = (this.p2OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7, var8, var1, var2);
	        if (!this.fEndGame) {
	            this.MoveBall();
	        }
	        var7 = (this.p1X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.fSuperSlime ? this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length] : this.slimaryCols[this.p1Col]);
	        this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.pointsX[0] = this.pointsX[2] = var7 + (var1 / 2 | 0);
	        this.pointsX[1] = var7 + (var1 * 2 / 5 | 0);
	        this.pointsX[3] = var7 + (var1 / 8 | 0);
	        this.pointsY[0] = var8;
	        this.pointsY[1] = this.pointsY[3] = var8 + (var2 / 2 | 0);
	        this.pointsY[2] = var8 + var2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var var9 = this.p1X + 38;
	        var var10 = this.p1Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var var11 = var7 - var5;
	        var var12 = var8 - var6;
	        var var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var var14 = Math.random() < 0.01;
	        if (var14) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var var15;
	        var var16;
	        var var17;
	        var var18;
	        var var19;
	        if (this.p1Score > this.p2Score + 10) {
	            var15 = (this.p1X * this.nWidth / 1000 | 0);
	            var16 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            var17 = (this.nWidth / 20 | 0);
	            var18 = (this.nHeight / 20 | 0);
	            var19 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(var15, var16 + var19, var17, var18, -30, -150);
	                ++var19;
	            } while ((var19 < 3));
	        }
	        var7 = (this.p2X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.fSuperSlime ? this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length] : this.slimaryCols[this.p2Col]);
	        this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.pointsX[0] = this.pointsX[2] = var7 + (var1 / 2 | 0);
	        this.pointsX[1] = var7 + (var1 * 3 / 5 | 0);
	        this.pointsX[3] = var7 + (var1 * 7 / 8 | 0);
	        this.pointsY[0] = var8;
	        this.pointsY[1] = this.pointsY[3] = var8 + (var2 / 2 | 0);
	        this.pointsY[2] = var8 + var2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var9 = this.p2X - 18;
	        var10 = this.p2Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var11 = var7 - var5;
	        var12 = var8 - var6;
	        var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var14 = Math.random() < 0.01;
	        if (var14) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(var14 ? shims_1.Color.fromString("gray") : shims_1.Color.fromString("white"));
	            this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        if (this.p2Score > this.p1Score + 10) {
	            var15 = (this.nWidth / 20 | 0);
	            var16 = (this.nHeight / 20 | 0);
	            var17 = (this.p2X * this.nWidth / 1000 | 0) - var15;
	            var18 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            var19 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(var17, var18 + var19, var15, var16, -10, -150);
	                ++var19;
	            } while ((var19 < 3));
	        }
	    }
	    DrawStatus() {
	        var var1 = this.screen;
	        var var2 = this.screen.getFontMetrics();
	        var var3 = null;
	        var var4 = this.MakeTime(this.gameTime);
	        var var5 = (this.nHeight / 20 | 0);
	        var var6 = 0;
	        var var7 = var2.stringWidth(var4);
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 1:
	                    var3 = "Practice AI 2";
	                    break;
	                case 2:
	                    var3 = "Practice AI 3";
	                    break;
	                case 3:
	                    var3 = "Practice AI 4";
	                    break;
	                default:
	                    var3 = "Practice AI 1";
	            }
	            if (this.fGoldenGoal) {
	                var3 = var3 + " [Sudden Death]";
	            }
	            else if (this.fExtraTime) {
	                var3 = var3 + " [Extra Time]";
	            }
	            var6 = var2.stringWidth(var3);
	        }
	        var var8 = var6 > var7 ? var6 : var7;
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var1.fillRect((this.nWidth / 2 | 0) - (var8 / 2 | 0) - 5, 0, var8 + 10, var5 + 22);
	        var1.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(var4, (this.nWidth / 2 | 0) - (var7 / 2 | 0), var2.getAscent() + 20);
	        if (var3 != null) {
	            this.screen.drawString(var3, (this.nWidth / 2 | 0) - (var6 / 2 | 0), var2.getAscent() + 20 - var2.getHeight());
	        }
	    }
	    MakeTime(var1) {
	        var var3 = Math.round(var1 / 10) % 100;
	        var var5 = Math.round(var1 / 1000) % 60;
	        var var7 = Math.round(var1 / 60000) % 60;
	        var var9 = "";
	        if (var7 < 10) {
	            var9 = var9 + "0";
	        }
	        var9 = var9 + var7;
	        var9 = var9 + ":";
	        if (var5 < 10) {
	            var9 = var9 + "0";
	        }
	        var9 = var9 + var5;
	        var9 = var9 + ":";
	        if (var3 < 10) {
	            var9 = var9 + "0";
	        }
	        var9 = var9 + var3;
	        return var9;
	    }
	    MoveBall() {
	        var var1 = (30 * this.nHeight / 1000 | 0);
	        var var2 = (this.ballOldX * this.nWidth / 1000 | 0);
	        var var3 = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var var4 = (this.ballX - this.p1X) * 2;
	            var var5 = this.ballY - this.p1Y;
	            var var6 = var4 * var4 + var5 * var5;
	            var var7 = this.ballVX - this.p1XV;
	            var var8 = this.ballVY - this.p1YV;
	            var var9;
	            var var10;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p1X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p1Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    if (!this.fP1Sticky) {
	                        this.ballVY += this.p1YV - (2 * var5 * var10 / var9 | 0);
	                        this.ballVX += ((this.p1XV - (2 * var4 * var10 / var9 | 0)) * 7 / 10 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	                if (this.fhold1) {
	                    this.ballVX = 15;
	                    this.ballVY = 25;
	                }
	                this.lastTouch = this.p1X;
	            }
	            var4 = (this.ballX - this.p2X) * 2;
	            var5 = this.ballY - this.p2Y;
	            var6 = var4 * var4 + var5 * var5;
	            var7 = this.ballVX - this.p2XV;
	            var8 = this.ballVY - this.p2YV;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p2X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p2Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    if (!this.fP2Sticky) {
	                        this.ballVX += ((this.p2XV - (2 * var4 * var10 / var9 | 0)) * 7 / 10 | 0);
	                        this.ballVY += this.p2YV - (2 * var5 * var10 / var9 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	                if (this.fhold2) {
	                    this.ballVX = -15;
	                    this.ballVY = 25;
	                }
	                this.lastTouch = this.p2X;
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballY >= 195 && this.ballY <= 405) {
	                if (this.ballX <= 44) {
	                    this.ballX = 44;
	                    this.ballVX = -this.ballVX;
	                }
	                if (this.ballX >= 960) {
	                    this.ballX = 960;
	                    this.ballVX = -this.ballVX;
	                }
	            }
	            if (this.ballY >= 252 && this.ballY <= 274) {
	                if (this.ballX <= 115 && this.ballX >= 90) {
	                    if (this.ballOldX >= 115) {
	                        this.ballX = 115;
	                        this.ballVX = -this.ballVX;
	                    }
	                    else if (this.ballOldX <= 90) {
	                        this.ballX = 90;
	                        this.ballVX = -this.ballVX;
	                    }
	                    if (this.ballOldY >= 274) {
	                        this.ballY = 274;
	                    }
	                    if (this.ballOldY <= 252) {
	                        this.ballY = 252;
	                    }
	                    this.ballVY = -this.ballVY;
	                }
	                if (this.ballX <= 907 && this.ballX >= 891) {
	                    if (this.ballOldX >= 907) {
	                        this.ballX = 903;
	                        this.ballVX = -this.ballVX;
	                    }
	                    else if (this.ballOldX <= 891) {
	                        this.ballX = 891;
	                        this.ballVX = -this.ballVX;
	                    }
	                    if (this.ballOldY >= 274) {
	                        this.ballY = 274;
	                    }
	                    if (this.ballOldY <= 252) {
	                        this.ballY = 252;
	                    }
	                    this.ballVY = -this.ballVY;
	                }
	                if (this.ballX <= 45) {
	                    if (this.ballOldY >= 274) {
	                        this.ballY = 274;
	                    }
	                    if (this.ballOldY <= 252) {
	                        this.ballY = 252;
	                    }
	                    this.ballX = 45;
	                    this.ballVY = -this.ballVY;
	                    this.ballVX = -this.ballVX + 1;
	                }
	                if (this.ballX >= 955) {
	                    if (this.ballOldY >= 274) {
	                        this.ballY = 274;
	                    }
	                    if (this.ballOldY <= 252) {
	                        this.ballY = 252;
	                    }
	                    this.ballX = 955;
	                    this.ballVY = -this.ballVY;
	                    this.ballVX = -this.ballVX - 1;
	                }
	            }
	            if (this.ballY < 34) {
	                this.ballY = 34;
	                this.ballVY = (-this.ballVY * 7 / 10 | 0);
	                this.ballVX = (this.ballVX * 7 / 10 | 0);
	            }
	        }
	        var2 = (this.ballX * this.nWidth / 1000 | 0);
	        var3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("yellow"));
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	    }
	    MoveSlimers() {
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 0:
	                    this.controlP2v0();
	                    break;
	                case 1:
	                    this.controlP2v1();
	                    break;
	                case 2:
	                    this.controlP2v2();
	                    break;
	                case 3:
	                    this.controlP2v3();
	            }
	        }
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 950) {
	            this.p1X = 950;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.GRAVITY;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.GRAVITY;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    ReplayFrame(var1, var2, var3, var4, var5, var6) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (var6) {
	                this.ballX = -1000;
	                this.ballOldX = 500;
	                this.ballY = -1000;
	                this.ballOldY = 500;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var var7 = var1 !== 0 ? var1 - 1 : 199;
	                this.p1OldX = this.replayData[var7][0];
	                this.p1OldY = this.replayData[var7][1];
	                this.p2OldX = this.replayData[var7][2];
	                this.p2OldY = this.replayData[var7][3];
	                if (var1 === 0) {
	                    this.ballOldX = 500;
	                    this.ballOldY = 200;
	                }
	                else {
	                    this.ballOldX = this.replayData[var7][4];
	                    this.ballOldY = this.replayData[var7][5];
	                }
	            }
	            this.p1X = this.replayData[var1][0];
	            this.p1Y = this.replayData[var1][1];
	            this.p2X = this.replayData[var1][2];
	            this.p2Y = this.replayData[var1][3];
	            this.ballX = this.replayData[var1][4];
	            this.ballY = this.replayData[var1][5];
	            this.p1Col = this.replayData[var1][6];
	            this.p2Col = this.replayData[var1][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((var1 / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", var2, var3);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(var2, var3 - var5, var4, var5 * 2);
	            }
	            this.DrawSlimers();
	            this.DrawGoals();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var8) {
	            }
	            ;
	        });
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    checkScored() {
	        if (this.ballY >= 263 || this.ballY > 253 || this.ballOldY < 253 || (this.ballX > 97 || this.ballX < 37) && (this.ballX < 902 || this.ballX > 962)) {
	            return false;
	        }
	        else {
	            this.scoreTouch = this.lastTouch;
	            this.nScoreX = this.ballX;
	            this.fPlayOn = true;
	            this.playOnTicks = 10;
	            return true;
	        }
	    }
	    controlP2v0() {
	        this.p2XV = 0;
	        this.fhold2 = true;
	        if (this.ballX > this.p2X + 5 && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.ballX + 50 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X + 50 && this.p2YV === 0 && this.ballY > 10 && this.ballY < 150) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v1() {
	        this.p2XV = 0;
	        this.fhold2 = true;
	        var var1 = this.getBallBounceX();
	        var var2 = this.getBallMaxY();
	        if (this.ballVY < 1) {
	            var var10000 = true;
	        }
	        else {
	            var var4 = this.ballVY;
	        }
	        if (var1 > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (var1 + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (var1 > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && var1 < 200 && this.p2X > this.p1X || var1 < this.p1X + 50 && var1 > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && var1 > 950 && this.p2YV === 0 && var2 > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (var2 < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2X < 150) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v2() {
	        this.fhold2 = true;
	        var var1 = this.getBallBounceX();
	        var var2 = this.getBallMaxY();
	        if (this.ballVY < 1) {
	            var var10000 = true;
	        }
	        else {
	            var var4 = this.ballVY;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (var1 > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (var1 + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (var1 > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && var1 < 200 && this.p2X > this.p1X || var1 < this.p1X + 50 && var1 > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && var1 > 950 && this.p2YV === 0 && var2 > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (var2 < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && var1 > 500 && var2 > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v3() {
	        this.fhold2 = true;
	        var var1 = (this.SLIMEVEL * 4 / 3 | 0);
	        var var2 = this.getBallBounceX();
	        var var3 = this.getBallMaxY();
	        if (this.ballVY < 1) {
	            var var10000 = true;
	        }
	        else {
	            var var5 = this.ballVY;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = var1;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -var1;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (var2 > 900) {
	            this.p2XV = var1;
	        }
	        if (var2 + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -var1;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = var1;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (var2 > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = var1;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = var1;
	        }
	        if (this.p2Score >= this.p1Score && var2 < 200 && this.p2X > this.p1X || var2 < this.p1X + 50 && var2 > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = var1;
	            }
	            if (this.ballX > 800 && var2 > 950 && this.p2YV === 0 && var3 > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (var3 < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2XV > 0 && var3 > 200 && var2 > this.p2X + 300) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && var2 > this.p2X + 400 && var3 > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / var1 | 0)) {
	            this.p2XV = -var1;
	        }
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    drawButtons() {
	        var var1 = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "Practice AI"];
	        var var2 = this.screen.getFontMetrics();
	        var var3 = new shims_1.Color(0, 0, 128);
	        for (var var4 = 0; var4 < 5; ++var4) {
	            this.screen.setColor(var3);
	            this.screen.fillRect(((2 * var4 + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(var1[var4], ((2 * var4 + 1) * this.nWidth / 10 | 0) - (var2.stringWidth(var1[var4]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (var2.getHeight() / 2 | 0));
	        }
	        this.flip();
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(var1, var2) {
	        if (((typeof var1 === 'string') || var1 === null) && ((typeof var2 === 'number') || var2 === null)) {
	            return (() => {
	                var var3 = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var3.getHeight() * (var2 + 1) + 10);
	            })();
	        }
	        else if (var1 === undefined && var2 === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    drawScores() {
	        var var1 = this.screen;
	        var var2 = (this.nHeight / 20 | 0);
	        var var3 = this.screen.getFontMetrics();
	        var var4 = var3.stringWidth("Replay...");
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var1.fillRect(0, 0, this.nWidth, var2 + 22);
	        var1.setColor(shims_1.Color.fromString("white"));
	        var1.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, (this.nWidth / 20 | 0), var2);
	        var var5 = this.p2Score + " : " + this.slimeColText[this.p2Col];
	        var1.drawString(var5, this.nWidth - (this.nWidth / 20 | 0) - var3.stringWidth(var5), var2);
	    }
	    flip() {
	        if (this.doubleBuffered) {
	            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
	        }
	    }
	    getBallBounceX() {
	        var var1 = this.ballVY + (Math.sqrt((this.ballVY * this.ballVY + 2 * this.ballY)) | 0);
	        var var2 = this.ballX + var1 * this.ballVX;
	        if (var2 < 0) {
	            var2 = -var2;
	        }
	        if (var2 > 1000) {
	            var2 = 1000 - var2;
	        }
	        return var2;
	    }
	    getBallMaxY() {
	        return this.ballVY < 0 ? this.ballY : this.ballY + (this.ballVY * this.ballVY / 2 | 0);
	    }
	    handleEvent(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((var1.id)) {
	                case 401:
	                case 403:
	                    if (this.fCanChangeCol) {
	                        switch ((var1.key)) {
	                            case 54:
	                                this.fSuperSlime != true;
	                                this.repaint();
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                do {
	                                    this.p2Col = this.p2Col === 0 ? this.slimaryCols.length - 1 : this.p2Col - 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                do {
	                                    this.p2Col = this.p2Col !== this.slimaryCols.length - 1 ? this.p2Col + 1 : 0;
	                                } while ((this.p2Col === this.p1Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 83:
	                            case 115:
	                                do {
	                                    this.p1Col = this.p1Col !== this.slimaryCols.length - 1 ? this.p1Col + 1 : 0;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 87:
	                            case 119:
	                                while ((true)) {
	                                    this.p1Col = this.p1Col === 0 ? this.slimaryCols.length - 1 : this.p1Col - 1;
	                                    if (this.p1Col !== this.p2Col) {
	                                        this.drawScores();
	                                        this.repaint();
	                                        break;
	                                    }
	                                }
	                                ;
	                        }
	                    }
	                    if (!this.fEndGame) {
	                        switch ((var1.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                return false;
	                            case 65:
	                            case 97:
	                                this.p1XV = -this.SLIMEVEL;
	                                return false;
	                            case 66:
	                            case 98:
	                                this.toggleBuffering();
	                                return false;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.SLIMEVEL;
	                                return false;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (this.p2Y === 0 && !this.worldCup) {
	                                    this.p2YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                if (!this.worldCup) {
	                                    this.p2XV = -this.SLIMEVEL;
	                                }
	                                return false;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                if (!this.worldCup) {
	                                    this.fP2Sticky = true;
	                                }
	                                return false;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                if (!this.worldCup) {
	                                    this.p2XV = this.SLIMEVEL;
	                                }
	                                return false;
	                            case 77:
	                            case 109:
	                                this.fhold2 = true;
	                                return false;
	                            case 83:
	                            case 115:
	                                this.fP1Sticky = true;
	                                return false;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 88:
	                            case 120:
	                                this.fhold1 = true;
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((var1.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                        case 1005:
	                            this.fP2Sticky = false;
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 77:
	                        case 109:
	                            this.fhold2 = false;
	                            return false;
	                        case 83:
	                        case 115:
	                            this.fP1Sticky = false;
	                            return false;
	                        case 88:
	                        case 120:
	                            this.fhold1 = false;
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (this.fPictureMode) {
	                        this.fPictureMode = false;
	                        this.promptMsg = "Choose an option to play...";
	                        this.repaint();
	                    }
	                    else if (!this.fInPlay && this.testButton(var1.x, var1.y)) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 400;
	                        this.p1Y = 0;
	                        this.p2X = 600;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 500;
	                        this.ballY = 400;
	                        this.ballOldX = 500;
	                        this.ballOldY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = -this.ballVY;
	                        this.p1Score = 0;
	                        this.p2Score = 0;
	                        this.promptMsg = "";
	                        this.paint(this.getGraphics());
	                        try {
	                            yield shims_1.Thread.sleep(100);
	                        }
	                        catch (var2) {
	                        }
	                        ;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Dunk Basketball: http://slimedb.tripod.com");
	                    this.requestFocus();
	            }
	            return false;
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.fPictureMode = true;
	        this.fCanChangeCol = true;
	        this.initStuff();
	        this.promptMsg = "Click for options...";
	        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        this.image = this.getImage(this.getCodeBase(), "sdb.jpg");
	    }
	    initStuff() {
	        this.fEndGame = true;
	        this.p1X = 400;
	        this.p1Y = 0;
	        this.p2X = 600;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.ballOldX = this.ballX = 500;
	        this.ballOldY = this.ballY = 34;
	        this.ballVX = 0;
	        this.ballVY = -this.ballVY + 13;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.playOnTicks = 10;
	        this.fPlayOn = false;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.JUMPVEL = this.fSuperSlime ? 65 : 31;
	        this.SLIMEVEL = this.fSuperSlime ? 16 : 8;
	        this.GRAVITY = this.fSuperSlime ? 8 : 2;
	    }
	    method_rn_SlimeDB_p_1(var1) {
	        shims_1.System.out.println(var1);
	    }
	    paint(var1) {
	        if (this.fPictureMode) {
	            this.image.getHeight(this);
	            var1.drawImage(this.image, 0, 0, this);
	        }
	        else {
	            this.nWidth = this.size().width;
	            this.nHeight = this.size().height;
	            this.screen.setColor(shims_1.Color.fromString("blue"));
	            this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	            this.screen.setColor(shims_1.Color.fromString("gray"));
	            this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.DrawGoals();
	            this.drawScores();
	        }
	        if (!this.fInPlay && !this.fPictureMode) {
	            this.DrawSlimers();
	            this.drawButtons();
	        }
	        this.drawPrompt();
	        if (!this.fInPlay && !this.fPictureMode) {
	            var var2 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fSuperSlime) {
	                this.screen.drawString("Super Slime Dunk!", (this.nWidth / 2 | 0) - (var2.stringWidth("Super Slime Dunk!") / 2 | 0), (this.nHeight / 2 | 0) - var2.getHeight());
	            }
	            else {
	                this.screen.drawString("Slime Dunk Basketball!", (this.nWidth / 2 | 0) - (var2.stringWidth("Slime Dunk Basketball!") / 2 | 0), (this.nHeight / 2 | 0) - var2.getHeight());
	            }
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            var2 = this.screen.getFontMetrics();
	            this.screen.drawString("http://slimedb.tripod.com", (this.nWidth / 2 | 0) - (var2.stringWidth("http://slimedb.tripod.com") / 2 | 0), (this.nHeight / 2 | 0) + var2.getHeight() * 2);
	        }
	        this.flip();
	    }
	    promptBox(var1, var2) {
	        var var3 = this.screen.getFontMetrics();
	        var var4 = var3.stringWidth(var1);
	        var var5 = var3.stringWidth(var2);
	        var var6 = var4 > var5 ? var4 : var5;
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect((this.nWidth / 2 | 0) - (var6 / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), var6 + 40, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(var1, (this.nWidth / 2 | 0) - (var4 / 2 | 0), (this.nHeight * 9 / 20 | 0));
	        this.screen.drawString(var2, (this.nWidth / 2 | 0) - (var5 / 2 | 0), (this.nHeight * 11 / 20 | 0));
	        this.flip();
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.worldCupRound = 0;
	            do {
	                this.initStuff();
	                this.replayPos = this.replayStart = 0;
	                this.scoringRun = 0;
	                this.fP1Touched = this.fP2Touched = false;
	                this.gameTime = 0;
	                this.startTime = shims_1.System.currentTimeMillis();
	                this.fEndGame = false;
	                this.fCanChangeCol = false;
	                this.mousePressed = false;
	                this.gameTime = Math.round(this.gameLength);
	                this.fInPlay = true;
	                this.fEndGame = false;
	                var var1;
	                if (this.worldCup) {
	                    this.paint(this.getGraphics());
	                    do {
	                        this.p2Col = ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);
	                    } while ((this.p1Col === this.p2Col));
	                    var1 = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
	                    switch ((this.worldCupRound)) {
	                        case 0:
	                            this.promptBox("Practice AI 1", var1);
	                            this.gameLength = 30000;
	                            break;
	                        case 1:
	                            this.promptBox("Practice AI 2", var1);
	                            this.gameLength = 120000;
	                            break;
	                        case 2:
	                            this.promptBox("Practice AI 3", var1);
	                            this.gameLength = 120000;
	                            break;
	                        case 3:
	                            this.promptBox("Practice AI 4", var1);
	                            this.gameLength = 300000;
	                    }
	                    try {
	                        yield shims_1.Thread.sleep(4000);
	                    }
	                    catch (var3) {
	                    }
	                    ;
	                    this.repaint();
	                    this.flip();
	                }
	                while ((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1Score === this.p2Score)) {
	                    this.gameTime = this.startTime + Math.round(this.gameLength) - shims_1.System.currentTimeMillis();
	                    if (this.gameTime < 0) {
	                        this.gameTime = 0;
	                    }
	                    if (this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1Score === this.p2Score) {
	                        var1 = this.p1Score === 0 ? " nil" : " " + this.p1Score;
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + var1 + ", " + this.slimeColText[this.p2Col] + var1 + ".", "And the game goes into extra time...");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var8) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                        this.startTime += 30000;
	                        this.gameTime += 30000;
	                        this.fExtraTime = true;
	                    }
	                    else if (this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1Score === this.p2Score) {
	                        this.fGoldenGoal = true;
	                        var1 = this.p1Score === 0 ? " nil" : " " + this.p1Score;
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + var1 + ", " + this.slimeColText[this.p2Col] + var1 + ", and the game goes into Sudden Death.", "The next player to score will win the game!");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                    }
	                    this.SaveReplayData();
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    this.DrawGoals();
	                    this.DrawStatus();
	                    this.flip();
	                    if (this.p1X >= 150 && this.p1X <= 850) {
	                        this.p1TouchingGoal = 0;
	                    }
	                    else {
	                        ++this.p1TouchingGoal;
	                    }
	                    if (this.p2X <= 850 && this.p2X >= 150) {
	                        this.p2TouchingGoal = 0;
	                    }
	                    else {
	                        ++this.p2TouchingGoal;
	                    }
	                    if (this.fPlayOn) {
	                        --this.playOnTicks;
	                    }
	                    else {
	                        this.fPlayOn = this.checkScored();
	                    }
	                    if (this.playOnTicks === 0 || this.p1TouchingGoal > 60 || this.p2TouchingGoal > 60) {
	                        var var9 = shims_1.System.currentTimeMillis();
	                        if (this.p1TouchingGoal > 60) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal tending!";
	                            this.p2X = 850;
	                            this.p1X = 500;
	                            this.ballX = 850;
	                            this.ballY = 200;
	                        }
	                        else if (this.p2TouchingGoal > 60) {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal tending!";
	                            this.p2X = 500;
	                            this.p1X = 150;
	                            this.ballX = 150;
	                            this.ballY = 200;
	                        }
	                        else if (this.nScoreX < 500) {
	                            if (this.scoreTouch > 500) {
	                                this.points = 3;
	                                this.p2Score += this.points;
	                                this.promptMsg = this.slimeColText[this.p2Col] + " sinks the three!";
	                            }
	                            else {
	                                this.points = 2;
	                                this.p2Score += this.points;
	                                this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
	                            }
	                            this.p2X = 500;
	                            this.p1X = 150;
	                            this.ballX = 150;
	                            this.ballY = 200;
	                        }
	                        else {
	                            if (this.scoreTouch < 500) {
	                                this.points = 3;
	                                this.p1Score += this.points;
	                                this.promptMsg = this.slimeColText[this.p1Col] + " sinks the three!";
	                            }
	                            else {
	                                this.points = 2;
	                                this.p1Score += this.points;
	                                this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
	                            }
	                            this.p2X = 850;
	                            this.p1X = 500;
	                            this.ballX = 850;
	                            this.ballY = 200;
	                        }
	                        this.drawPrompt();
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.flip();
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var6) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.playOnTicks = 10;
	                        this.fPlayOn = false;
	                        this.startTime += shims_1.System.currentTimeMillis() - var9;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        if (this.nScoreX > 500) {
	                            this.p2X = 850;
	                            this.p1X = 500;
	                            this.p1Y = this.p2Y = 0;
	                            this.ballX = 850;
	                            this.ballY = 200;
	                        }
	                        if (this.nScoreX < 500) {
	                            this.p2X = 500;
	                            this.p1X = 150;
	                            this.p1Y = this.p2Y = 0;
	                            this.ballX = 150;
	                            this.ballY = 200;
	                        }
	                        this.replayStart = this.replayPos = 0;
	                        this.repaint();
	                    }
	                    if (this.gameThread != null) {
	                        try {
	                            if (this.fPlayOn) {
	                                yield shims_1.Thread.sleep(120);
	                            }
	                            else {
	                                yield shims_1.Thread.sleep(20);
	                            }
	                        }
	                        catch (var5) {
	                        }
	                        ;
	                    }
	                }
	                ;
	                this.fEndGame = true;
	                if (this.fPlayOn) {
	                    if (this.nScoreX < 500) {
	                        if (this.lastTouch > 500) {
	                            this.points = 3;
	                        }
	                        else {
	                            this.points = 2;
	                        }
	                        this.p2Score += this.points;
	                        this.promptMsg = this.slimeColText[this.p2Col] + " scores at the buzzer!";
	                    }
	                    else {
	                        if (this.lastTouch < 500) {
	                            this.points = 3;
	                        }
	                        else {
	                            this.points = 2;
	                        }
	                        this.p1Score += this.points;
	                        this.promptMsg = this.slimeColText[this.p1Col] + " scores at the buzzer!";
	                    }
	                    this.drawPrompt();
	                }
	                else {
	                    this.drawPrompt("And that\'s the final buzzer!", 0);
	                }
	                if (this.worldCup) {
	                    if (this.p1Score === this.p2Score) {
	                        this.drawPrompt("It\'s a tie at full time, here at Slime Coliseum!", 1);
	                        this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
	                        this.worldCup = false;
	                        this.flip();
	                    }
	                    else if (this.p1Score >= this.p2Score) {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the next AI!", 1);
	                                break;
	                            case 1:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the next AI!", 1);
	                                break;
	                            case 2:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the next AI!", 1);
	                                break;
	                            case 3:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " has defeated every AI!", 1);
	                        }
	                        if (this.worldCupRound === 3) {
	                            this.worldCup = false;
	                            this.promptBox("You have beaten all the AIs!", "Now it\'s time for you to play a human!");
	                        }
	                        else {
	                            ++this.worldCupRound;
	                        }
	                    }
	                    else {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                            case 1:
	                                this.promptBox("You have been eliminated.", "Goodbye.");
	                                break;
	                            case 2:
	                                this.promptBox("You have been knocked out of this practice session.", "You played well.");
	                                break;
	                            case 3:
	                                this.promptBox("You almost won.", "Are you satisfied with that?");
	                        }
	                        this.worldCup = false;
	                    }
	                }
	                else if (this.p1Score === this.p2Score) {
	                    this.drawPrompt("It\'s a draw at full time, here at Slime Coliseum!", 1);
	                }
	                else if (this.p1Score < this.p2Score) {
	                    this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1);
	                }
	                else {
	                    this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
	                }
	                this.flip();
	                try {
	                    yield shims_1.Thread.sleep(5000);
	                }
	                catch (var4) {
	                }
	                ;
	                this.initStuff();
	            } while ((this.worldCup));
	            this.fCanChangeCol = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    testButton(var1, var2) {
	        for (var var3 = 0; var3 < 5; ++var3) {
	            if (var1 > ((2 * var3 + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) && var1 < ((2 * var3 + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) && var2 > (this.nHeight * 2 / 10 | 0) && var2 < (this.nHeight * 3 / 10 | 0)) {
	                if (var3 === 4) {
	                    this.gameLength = 120000;
	                    this.worldCup = true;
	                }
	                else {
	                    this.gameLength = (1 << var3) * 60000;
	                    this.worldCup = false;
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    toggleBuffering() {
	        if (this.doubleBuffered != true) {
	            this.screen = this.backBuffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        else {
	            this.screen = this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        this.repaint();
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SlimeDB;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class BowlingSlime2 extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.slimeColText = ["Argentina", "Belgium", "Australia", "Iceland", "Cameroon", "P.R. of China", "Costa Rica", "Croatia", "Denmark", "Eucador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "Seth Efrica", "South Corea", "Sveden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany", "Night Elves"];
	        this.lightBrown = new shims_1.Color(100, 65, 0);
	        this.darkRed = new shims_1.Color(128, 0, 0);
	        this.darkGreen = new shims_1.Color(0, 128, 0);
	        this.darkBlue = new shims_1.Color(0, 0, 128);
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Sticky = false;
	        this.fP2Sticky = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.p1TouchingGoal = 0;
	        this.p2TouchingGoal = 0;
	        this.fEndGame = false;
	        this.fPlayOn = false;
	        this.nScoreX = 0;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.playOnTicks = 0;
	        this.SMILE_DIFF = 0;
	        this.DAMPING = 0;
	        this.MAX_TICKS_TOUCHING_GOAL = 0;
	        this.JUMPVEL = 0;
	        this.SLIMEVEL = 0;
	        this.GRAVITY = 0;
	        this.gameLength = 0;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fSuperSlime = false;
	        this.doubleBuffered = false;
	        this.maxballX = 0;
	        this.minballX = 0;
	        this.slimaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), this.darkGreen, shims_1.Color.fromString("white"), this.darkRed, this.darkRed, new shims_1.Color(119, 41, 28), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(128, 128, 255), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(119, 41, 28), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(185, 30, 2), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(252, 239, 82), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(16, 180, 180), new shims_1.Color(241, 245, 71), new shims_1.Color(230, 230, 230), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue")];
	        this.secondaryCols = [shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), new shims_1.Color(128, 128, 255), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), this.darkBlue, shims_1.Color.fromString("green"), shims_1.Color.fromString("blue"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), this.darkGreen, shims_1.Color.fromString("white"), new shims_1.Color(128, 255, 128), new shims_1.Color(255, 128, 0), this.darkGreen, this.darkBlue, new shims_1.Color(13, 131, 10), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), new shims_1.Color(7, 177, 33), shims_1.Color.fromString("red"), shims_1.Color.fromString("black"), shims_1.Color.fromString("blue")];
	        this.frenzyCol = 0;
	        this.SMILE_DIFF = 9;
	        this.DAMPING = 7;
	        this.MAX_TICKS_TOUCHING_GOAL = 60;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.maxballX = 500;
	        this.minballX = 500;
	        this.pointsX = new Array(0);
	        this.pointsY = new Array(0);
	        this.p2Col = 1;
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var1 = this.screen.getFontMetrics();
	            var var2 = var1.stringWidth("Replay...");
	            var var3 = var1.getHeight();
	            var var4 = (this.nWidth / 2 | 0) - (var2 / 2 | 0);
	            var var5 = (this.nHeight / 2 | 0) - var3;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            var var6 = this.replayPos - 1;
	            while ((!this.mousePressed)) {
	                ++var6;
	                if (var6 >= 200) {
	                    var6 = 0;
	                }
	                if (var6 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var7) {
	                    }
	                    ;
	                    var6 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	                yield this.ReplayFrame(var6, var4, var5, var2, var3, false);
	                this.flip();
	            }
	            ;
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    DrawGoals() {
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect((this.nWidth / 25 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect((this.nWidth / 15 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect((this.nWidth / 10 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect((this.nWidth / 7 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect((this.nWidth / 5 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 25 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 15 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 10 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 7 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 5 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect((this.nWidth / 2 | 0) - 3, (4 * this.nHeight / 5 | 0) - (5 * this.nHeight / 1000 | 0), 5, (25 * this.nHeight / 1000 | 0));
	        this.screen.setColor(shims_1.Color.fromString("red"));
	        this.screen.fillRect((this.nWidth / 25 | 0), (4 * this.nHeight / 5 | 0) - (150 * this.nHeight / 1000 | 0), 5, (50 * this.nHeight / 1000 | 0));
	        this.screen.fillRect((this.nWidth / 15 | 0), (4 * this.nHeight / 5 | 0) - (150 * this.nHeight / 1000 | 0), 5, (50 * this.nHeight / 1000 | 0));
	        this.screen.fillRect((this.nWidth / 10 | 0), (4 * this.nHeight / 5 | 0) - (150 * this.nHeight / 1000 | 0), 5, (50 * this.nHeight / 1000 | 0));
	        this.screen.fillRect((this.nWidth / 7 | 0), (4 * this.nHeight / 5 | 0) - (150 * this.nHeight / 1000 | 0), 5, (50 * this.nHeight / 1000 | 0));
	        this.screen.fillRect((this.nWidth / 5 | 0), (4 * this.nHeight / 5 | 0) - (150 * this.nHeight / 1000 | 0), 5, (50 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 25 | 0) - 5, (4 * this.nHeight / 5 | 0) - (150 * this.nHeight / 1000 | 0), 5, (50 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 15 | 0) - 5, (4 * this.nHeight / 5 | 0) - (150 * this.nHeight / 1000 | 0), 5, (50 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 10 | 0) - 5, (4 * this.nHeight / 5 | 0) - (150 * this.nHeight / 1000 | 0), 5, (50 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 7 | 0) - 5, (4 * this.nHeight / 5 | 0) - (150 * this.nHeight / 1000 | 0), 5, (50 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 5 | 0) - 5, (4 * this.nHeight / 5 | 0) - (150 * this.nHeight / 1000 | 0), 5, (50 * this.nHeight / 1000 | 0));
	        this.screen.setColor(this.lightBrown);
	        this.screen.fillRect(0, 220, 155, 5);
	        this.screen.fillRect(595, 220, 155, 5);
	    }
	    DrawSlimers() {
	        var var1 = (this.nWidth / 10 | 0);
	        var var2 = (this.nHeight / 10 | 0);
	        var var3 = (this.nWidth / 50 | 0);
	        var var4 = (this.nHeight / 25 | 0);
	        var var5 = (this.ballX * this.nWidth / 1000 | 0);
	        var var6 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var var7 = (this.p1OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var var8 = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7, var8, var1, var2);
	        var7 = (this.p2OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7, var8, var1, var2);
	        if (!this.fEndGame) {
	            this.MoveBall();
	        }
	        var7 = (this.p1X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.fSuperSlime ? this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length] : this.slimaryCols[this.p1Col]);
	        this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.pointsX[0] = this.pointsX[2] = var7 + (var1 / 2 | 0);
	        this.pointsX[1] = var7 + (var1 * 2 / 5 | 0);
	        this.pointsX[3] = var7 + (var1 / 8 | 0);
	        this.pointsY[0] = var8;
	        this.pointsY[1] = this.pointsY[3] = var8 + (var2 / 2 | 0);
	        this.pointsY[2] = var8 + var2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var var9 = this.p1X + 38;
	        var var10 = this.p1Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var var11 = var7 - var5;
	        var var12 = var8 - var6;
	        var var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var var14 = Math.random() < 0.01;
	        if (var14) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var var15;
	        var var16;
	        var var17;
	        var var18;
	        var var19;
	        if (this.p1Score > this.p2Score + 9) {
	            var15 = (this.p1X * this.nWidth / 1000 | 0);
	            var16 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            var17 = (this.nWidth / 20 | 0);
	            var18 = (this.nHeight / 20 | 0);
	            var19 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(var15, var16 + var19, var17, var18, -30, -150);
	                ++var19;
	            } while ((var19 < 3));
	        }
	        var7 = (this.p2X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.fSuperSlime ? this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length] : this.slimaryCols[this.p2Col]);
	        this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.pointsX[0] = this.pointsX[2] = var7 + (var1 / 2 | 0);
	        this.pointsX[1] = var7 + (var1 * 3 / 5 | 0);
	        this.pointsX[3] = var7 + (var1 * 7 / 8 | 0);
	        this.pointsY[0] = var8;
	        this.pointsY[1] = this.pointsY[3] = var8 + (var2 / 2 | 0);
	        this.pointsY[2] = var8 + var2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var9 = this.p2X - 18;
	        var10 = this.p2Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var11 = var7 - var5;
	        var12 = var8 - var6;
	        var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var14 = Math.random() < 0.01;
	        if (var14) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(var14 ? shims_1.Color.fromString("gray") : shims_1.Color.fromString("white"));
	            this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        if (this.p2Score > this.p1Score + 9) {
	            var15 = (this.nWidth / 20 | 0);
	            var16 = (this.nHeight / 20 | 0);
	            var17 = (this.p2X * this.nWidth / 1000 | 0) - var15;
	            var18 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            var19 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(var17, var18 + var19, var15, var16, -10, -150);
	                ++var19;
	            } while ((var19 < 3));
	        }
	    }
	    DrawStatus() {
	        var var1 = this.screen;
	        var var2 = this.screen.getFontMetrics();
	        var var3 = null;
	        var var4 = this.MakeTime(this.gameTime);
	        var var5 = (this.nHeight / 20 | 0);
	        var var6 = 0;
	        var var7 = var2.stringWidth(var4);
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 1:
	                    var3 = "Quarter Finals";
	                    break;
	                case 2:
	                    var3 = "Semi-Finals";
	                    break;
	                case 3:
	                    var3 = "Final";
	                    break;
	                default:
	                    var3 = "Qualifying";
	            }
	            if (this.fGoldenGoal) {
	                var3 = var3 + " [Golden Goal]";
	            }
	            else if (this.fExtraTime) {
	                var3 = var3 + " [Extra Time]";
	            }
	            var6 = var2.stringWidth(var3);
	        }
	        var var8 = var6 > var7 ? var6 : var7;
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var1.fillRect((this.nWidth / 2 | 0) - (var8 / 2 | 0) - 5, 0, var8 + 10, var5 + 22);
	        var1.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(var4, (this.nWidth / 2 | 0) - (var7 / 2 | 0), var2.getAscent() + 20);
	        if (var3 != null) {
	            this.screen.drawString(var3, (this.nWidth / 2 | 0) - (var6 / 2 | 0), var2.getAscent() + 20 - var2.getHeight());
	        }
	    }
	    MakeTime(var1) {
	        var var3 = Math.round(var1 / 10) % 100;
	        var var5 = Math.round(var1 / 1000) % 60;
	        var var7 = Math.round(var1 / 60000) % 60;
	        var var9 = "";
	        if (var7 < 10) {
	            var9 = var9 + "0";
	        }
	        var9 = var9 + var7;
	        var9 = var9 + ":";
	        if (var5 < 10) {
	            var9 = var9 + "0";
	        }
	        var9 = var9 + var5;
	        var9 = var9 + ":";
	        if (var3 < 10) {
	            var9 = var9 + "0";
	        }
	        var9 = var9 + var3;
	        return var9;
	    }
	    MoveBall() {
	        var var1 = (30 * this.nHeight / 1000 | 0);
	        var var2 = (this.ballOldX * this.nWidth / 1000 | 0);
	        var var3 = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var var4 = (this.ballX - this.p1X) * 2;
	            var var5 = this.ballY - this.p1Y;
	            var var6 = var4 * var4 + var5 * var5;
	            var var7 = this.ballVX - this.p1XV;
	            var var8 = this.ballVY - this.p1YV;
	            var var9;
	            var var10;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p1X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p1Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    if (!this.fP1Sticky) {
	                        this.ballVY += this.p1YV - (2 * var5 * var10 / var9 | 0);
	                        this.ballVX += ((this.p1XV - (2 * var4 * var10 / var9 | 0)) * 7 / 10 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	            }
	            var4 = (this.ballX - this.p2X) * 2;
	            var5 = this.ballY - this.p2Y;
	            var6 = var4 * var4 + var5 * var5;
	            var7 = this.ballVX - this.p2XV;
	            var8 = this.ballVY - this.p2YV;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p2X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p2Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    if (!this.fP2Sticky) {
	                        this.ballVX += ((this.p2XV - (2 * var4 * var10 / var9 | 0)) * 7 / 10 | 0);
	                        this.ballVY += this.p2YV - (2 * var5 * var10 / var9 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX <= 205 || this.ballX >= 797) {
	                if (this.ballY > 200 && this.ballOldY < 200 || this.ballY < 200 && this.ballOldY >= 200) {
	                    this.ballY = 200;
	                    this.ballVY *= -1;
	                }
	                if (this.ballY > 180 && this.ballY < 220) {
	                    if (this.ballX > 195 && this.ballX < 205 && this.ballVX < 0) {
	                        this.ballX = 205;
	                        this.ballVX *= -1;
	                    }
	                    if (this.ballX < 787 && this.ballX > 797 && this.ballVX > 0) {
	                        this.ballX = 797;
	                        this.ballVX *= -1;
	                    }
	                }
	                if (this.ballX < this.minballX && this.ballY < 200) {
	                    this.minballX = this.ballX;
	                }
	                if (this.ballX > this.maxballX && this.ballY < 200) {
	                    this.maxballX = this.ballX;
	                }
	            }
	            if (this.ballY < 34) {
	                this.ballY = 34;
	                this.ballVY = (-this.ballVY * 7 / 10 | 0);
	                this.ballVX = (this.ballVX * 7 / 10 | 0);
	            }
	        }
	        var2 = (this.ballX * this.nWidth / 1000 | 0);
	        var3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("black"));
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	    }
	    MoveSlimers() {
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 0:
	                    this.controlP2v0();
	                    break;
	                case 1:
	                    this.controlP2v1();
	                    break;
	                case 2:
	                    this.controlP2v2();
	                    break;
	                case 3:
	                    this.controlP2v3();
	            }
	        }
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 950) {
	            this.p1X = 950;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.GRAVITY;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.GRAVITY;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    ReplayFrame(var1, var2, var3, var4, var5, var6) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (var6) {
	                this.ballX = -1000;
	                this.ballOldX = 500;
	                this.ballY = -1000;
	                this.ballOldY = 500;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var var7 = var1 !== 0 ? var1 - 1 : 199;
	                this.p1OldX = this.replayData[var7][0];
	                this.p1OldY = this.replayData[var7][1];
	                this.p2OldX = this.replayData[var7][2];
	                this.p2OldY = this.replayData[var7][3];
	                if (var1 === 0) {
	                    this.ballOldX = 275;
	                    this.ballOldY = 200;
	                }
	                else {
	                    this.ballOldX = this.replayData[var7][4];
	                    this.ballOldY = this.replayData[var7][5];
	                }
	            }
	            this.p1X = this.replayData[var1][0];
	            this.p1Y = this.replayData[var1][1];
	            this.p2X = this.replayData[var1][2];
	            this.p2Y = this.replayData[var1][3];
	            this.ballX = this.replayData[var1][4];
	            this.ballY = this.replayData[var1][5];
	            this.p1Col = this.replayData[var1][6];
	            this.p2Col = this.replayData[var1][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((var1 / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", var2, var3);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(var2, var3 - var5, var4, var5 * 2);
	            }
	            this.DrawSlimers();
	            this.DrawGoals();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var8) {
	            }
	            ;
	        });
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    checkScored() {
	        if (this.ballY >= 200 || this.ballX >= 200 && this.ballX <= 800) {
	            return false;
	        }
	        else {
	            this.nScoreX = this.ballX;
	            this.fPlayOn = true;
	            this.playOnTicks = 10;
	            return true;
	        }
	    }
	    controlP2v0() {
	        this.p2XV = 0;
	        if (this.ballX > this.p2X + 5 && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.ballX + 50 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X + 50 && this.p2YV === 0 && this.ballY > 10 && this.ballY < 150) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 797) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v1() {
	        this.p2XV = 0;
	        var var1 = this.getBallBounceX();
	        var var2 = this.getBallMaxY();
	        if (this.ballVY < 1) {
	            var var10000 = true;
	        }
	        else {
	            var var4 = this.ballVY;
	        }
	        if (var1 > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (var1 + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (var1 > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && var1 < 200 && this.p2X > this.p1X || var1 < this.p1X + 50 && var1 > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && var1 > 950 && this.p2YV === 0 && var2 > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (var2 < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2X < 150) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 797) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v2() {
	        var var1 = this.getBallBounceX();
	        var var2 = this.getBallMaxY();
	        if (this.ballVY < 1) {
	            var var10000 = true;
	        }
	        else {
	            var var4 = this.ballVY;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (var1 > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (var1 + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (var1 > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && var1 < 200 && this.p2X > this.p1X || var1 < this.p1X + 50 && var1 > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && var1 > 950 && this.p2YV === 0 && var2 > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (var2 < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && var1 > 500 && var2 > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 797) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v3() {
	        var var1 = (this.SLIMEVEL * 4 / 3 | 0);
	        var var2 = this.getBallBounceX();
	        var var3 = this.getBallMaxY();
	        if (this.ballVY < 1) {
	            var var10000 = true;
	        }
	        else {
	            var var5 = this.ballVY;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = var1;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -var1;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (var2 > 900) {
	            this.p2XV = var1;
	        }
	        if (var2 + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -var1;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = var1;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (var2 > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = var1;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = var1;
	        }
	        if (this.p2Score >= this.p1Score && var2 < 200 && this.p2X > this.p1X || var2 < this.p1X + 50 && var2 > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = var1;
	            }
	            if (this.ballX > 800 && var2 > 950 && this.p2YV === 0 && var3 > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (var3 < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2XV > 0 && var3 > 200 && var2 > this.p2X + 300) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && var2 > this.p2X + 400 && var3 > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 797) / var1 | 0)) {
	            this.p2XV = -var1;
	        }
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    drawButtons() {
	        var var1 = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "Championship"];
	        var var2 = this.screen.getFontMetrics();
	        var var3 = new shims_1.Color(0, 0, 128);
	        for (var var4 = 0; var4 < 5; ++var4) {
	            this.screen.setColor(var3);
	            this.screen.fillRect(((2 * var4 + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(var1[var4], ((2 * var4 + 1) * this.nWidth / 10 | 0) - (var2.stringWidth(var1[var4]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (var2.getHeight() / 2 | 0));
	        }
	        this.flip();
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(var1, var2) {
	        if (((typeof var1 === 'string') || var1 === null) && ((typeof var2 === 'number') || var2 === null)) {
	            return (() => {
	                var var3 = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var3.getHeight() * (var2 + 1) + 10);
	            })();
	        }
	        else if (var1 === undefined && var2 === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    drawScores() {
	        var var1 = this.screen;
	        var var2 = (this.nHeight / 20 | 0);
	        var var3 = this.screen.getFontMetrics();
	        var var4 = var3.stringWidth("Replay...");
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var1.fillRect(0, 0, this.nWidth, var2 + 22);
	        var1.setColor(shims_1.Color.fromString("white"));
	        var1.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, (this.nWidth / 20 | 0), var2);
	        var var5 = this.p2Score + " : " + this.slimeColText[this.p2Col];
	        var1.drawString(var5, this.nWidth - (this.nWidth / 20 | 0) - var3.stringWidth(var5), var2);
	    }
	    flip() {
	        if (this.doubleBuffered) {
	            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
	        }
	    }
	    getBallBounceX() {
	        var var1 = this.ballVY + (Math.sqrt((this.ballVY * this.ballVY + 2 * this.ballY)) | 0);
	        var var2 = this.ballX + var1 * this.ballVX;
	        if (var2 < 0) {
	            var2 = -var2;
	        }
	        if (var2 > 1000) {
	            var2 = 1000 - var2;
	        }
	        return var2;
	    }
	    getBallMaxY() {
	        return this.ballVY < 0 ? this.ballY : this.ballY + (this.ballVY * this.ballVY / 2 | 0);
	    }
	    handleEvent(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((var1.id)) {
	                case 401:
	                case 403:
	                    if (this.fCanChangeCol) {
	                        switch ((var1.key)) {
	                            case 54:
	                                this.fSuperSlime != true;
	                                this.repaint();
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                do {
	                                    this.p2Col = this.p2Col === 0 ? this.slimaryCols.length - 1 : this.p2Col - 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                do {
	                                    this.p2Col = this.p2Col !== this.slimaryCols.length - 1 ? this.p2Col + 1 : 0;
	                                } while ((this.p2Col === this.p1Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 83:
	                            case 115:
	                                do {
	                                    this.p1Col = this.p1Col !== this.slimaryCols.length - 1 ? this.p1Col + 1 : 0;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 87:
	                            case 119:
	                                while ((true)) {
	                                    this.p1Col = this.p1Col === 0 ? this.slimaryCols.length - 1 : this.p1Col - 1;
	                                    if (this.p1Col !== this.p2Col) {
	                                        this.drawScores();
	                                        this.repaint();
	                                        break;
	                                    }
	                                }
	                                ;
	                        }
	                    }
	                    if (!this.fEndGame) {
	                        switch ((var1.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                return false;
	                            case 65:
	                            case 97:
	                                this.p1XV = -this.SLIMEVEL;
	                                return false;
	                            case 66:
	                            case 98:
	                                this.toggleBuffering();
	                                return false;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.SLIMEVEL;
	                                return false;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (this.p2Y === 0 && !this.worldCup) {
	                                    this.p2YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                if (!this.worldCup) {
	                                    this.p2XV = -this.SLIMEVEL;
	                                }
	                                return false;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                if (!this.worldCup) {
	                                    this.fP2Sticky = true;
	                                }
	                                return false;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                if (!this.worldCup) {
	                                    this.p2XV = this.SLIMEVEL;
	                                }
	                                return false;
	                            case 83:
	                            case 115:
	                                this.fP1Sticky = true;
	                                return false;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.JUMPVEL;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((var1.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                        case 1005:
	                            this.fP2Sticky = false;
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 83:
	                        case 115:
	                            this.fP1Sticky = false;
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay && this.testButton(var1.x, var1.y)) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 275;
	                        this.p1Y = 0;
	                        this.p2X = 725;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 500;
	                        this.ballY = 200;
	                        this.ballOldX = 500;
	                        this.ballOldY = 200;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1Score = 0;
	                        this.p2Score = 0;
	                        this.promptMsg = "";
	                        this.paint(this.getGraphics());
	                        try {
	                            yield shims_1.Thread.sleep(100);
	                        }
	                        catch (var2) {
	                        }
	                        ;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Bowling Slime, Modified by: Jason Lee and Mohamed Seyam");
	                    this.requestFocus();
	            }
	            return false;
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.initStuff();
	        this.promptMsg = "Click on an option to play...";
	        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    initStuff() {
	        this.fEndGame = true;
	        this.p1X = 275;
	        this.p1Y = 0;
	        this.p2X = 725;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.ballOldX = this.ballX = 500;
	        this.ballOldY = this.ballY = 200;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.playOnTicks = 10;
	        this.fPlayOn = false;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.JUMPVEL = this.fSuperSlime ? 65 : 31;
	        this.SLIMEVEL = this.fSuperSlime ? 16 : 8;
	        this.GRAVITY = this.fSuperSlime ? 8 : 2;
	    }
	    method_rn_BowlingSlime2_p_1(var1) {
	        shims_1.System.out.println(var1);
	    }
	    paint(var1) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        this.screen.setColor(this.lightBrown);
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.drawScores();
	        if (!this.fInPlay) {
	            this.DrawSlimers();
	            this.drawButtons();
	        }
	        this.DrawGoals();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var var2 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fSuperSlime) {
	                this.screen.drawString("Super Slime Bowling!", (this.nWidth / 2 | 0) - (var2.stringWidth("Super Slime Bowling!") / 2 | 0), (this.nHeight / 2 | 0) - var2.getHeight());
	            }
	            else {
	                this.screen.drawString("Slime Bowling!", (this.nWidth / 2 | 0) - (var2.stringWidth("Slime Bowling!") / 2 | 0), (this.nHeight / 2 | 0) - var2.getHeight());
	            }
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            var2 = this.screen.getFontMetrics();
	            this.screen.drawString("Original Code by Quin Pendragon", (this.nWidth / 2 | 0) - (var2.stringWidth("Written by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + var2.getHeight() * 2);
	            this.screen.drawString("Modded by Mohamed Seyam and Jason Lee", (this.nWidth / 2 | 0) - (var2.stringWidth("Modded by Mohamed Seyam and Jason Lee") / 2 | 0), (this.nHeight / 2 | 0) + var2.getHeight() * 3);
	        }
	        this.flip();
	    }
	    promptBox(var1, var2) {
	        var var3 = this.screen.getFontMetrics();
	        var var4 = var3.stringWidth(var1);
	        var var5 = var3.stringWidth(var2);
	        var var6 = var4 > var5 ? var4 : var5;
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect((this.nWidth / 2 | 0) - (var6 / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), var6 + 40, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(var1, (this.nWidth / 2 | 0) - (var4 / 2 | 0), (this.nHeight * 9 / 20 | 0));
	        this.screen.drawString(var2, (this.nWidth / 2 | 0) - (var5 / 2 | 0), (this.nHeight * 11 / 20 | 0));
	        this.flip();
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.worldCupRound = 0;
	            do {
	                this.initStuff();
	                this.replayPos = this.replayStart = 0;
	                this.scoringRun = 0;
	                this.fP1Touched = this.fP2Touched = false;
	                this.gameTime = 0;
	                this.startTime = shims_1.System.currentTimeMillis();
	                this.fEndGame = false;
	                this.fCanChangeCol = false;
	                this.mousePressed = false;
	                this.gameTime = Math.round(this.gameLength);
	                this.fInPlay = true;
	                this.fEndGame = false;
	                var var1;
	                if (this.worldCup) {
	                    this.paint(this.getGraphics());
	                    do {
	                        this.p2Col = ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);
	                    } while ((this.p1Col === this.p2Col));
	                    var1 = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
	                    switch ((this.worldCupRound)) {
	                        case 0:
	                            this.promptBox("Qualifying Round", var1);
	                            this.gameLength = 30000;
	                            break;
	                        case 1:
	                            this.promptBox("Quarter Finals", var1);
	                            this.gameLength = 120000;
	                            break;
	                        case 2:
	                            this.promptBox("Semi-Finals", var1);
	                            this.gameLength = 120000;
	                            break;
	                        case 3:
	                            this.promptBox("Championship Final", var1);
	                            this.gameLength = 300000;
	                    }
	                    try {
	                        yield shims_1.Thread.sleep(4000);
	                    }
	                    catch (var3) {
	                    }
	                    ;
	                    this.repaint();
	                    this.flip();
	                }
	                while ((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1Score === this.p2Score)) {
	                    this.gameTime = this.startTime + Math.round(this.gameLength) - shims_1.System.currentTimeMillis();
	                    if (this.gameTime < 0) {
	                        this.gameTime = 0;
	                    }
	                    if (this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1Score === this.p2Score) {
	                        var1 = this.p1Score === 0 ? " nil" : " " + this.p1Score;
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + var1 + ", " + this.slimeColText[this.p2Col] + var1 + ".", "And the game goes into extra time...");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var8) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                        this.startTime += 30000;
	                        this.gameTime += 30000;
	                        this.fExtraTime = true;
	                    }
	                    else if (this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1Score === this.p2Score) {
	                        this.fGoldenGoal = true;
	                        var1 = this.p1Score === 0 ? " nil" : " " + this.p1Score;
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + var1 + ", " + this.slimeColText[this.p2Col] + var1 + ", and the game goes into overtime.", "The next player to score will win the match!");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                    }
	                    this.SaveReplayData();
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    this.DrawGoals();
	                    this.DrawStatus();
	                    this.flip();
	                    this.p1TouchingGoal = 0;
	                    this.p2TouchingGoal = 1;
	                    if (this.fPlayOn) {
	                        --this.playOnTicks;
	                    }
	                    else {
	                        this.fPlayOn = this.checkScored();
	                    }
	                    if (this.playOnTicks === 0 || this.p1TouchingGoal > 60 || this.p2TouchingGoal > 60) {
	                        var var9 = shims_1.System.currentTimeMillis();
	                        if (this.p1TouchingGoal > 60) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.p2TouchingGoal > 60) {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.minballX <= 64 && this.ballX < 700) {
	                            this.p2Score += 10;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " bowls a strike!";
	                            this.screen.setColor(shims_1.Color.fromString("blue"));
	                            this.screen.fillRect((this.nWidth / 25 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect((this.nWidth / 15 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect((this.nWidth / 10 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect((this.nWidth / 7 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect((this.nWidth / 5 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.DrawSlimers();
	                        }
	                        else if (this.minballX <= 88 && this.ballX < 700) {
	                            this.p2Score += 8;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " scores 8 points!";
	                            this.screen.setColor(shims_1.Color.fromString("blue"));
	                            this.screen.fillRect((this.nWidth / 15 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect((this.nWidth / 10 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect((this.nWidth / 7 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect((this.nWidth / 5 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.DrawSlimers();
	                        }
	                        else if (this.minballX <= 122 && this.ballX < 700) {
	                            this.p2Score += 6;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " scores 6 points!";
	                            this.screen.setColor(shims_1.Color.fromString("blue"));
	                            this.screen.fillRect((this.nWidth / 10 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect((this.nWidth / 7 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect((this.nWidth / 5 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.DrawSlimers();
	                        }
	                        else if (this.minballX <= 164 && this.ballX < 700) {
	                            this.p2Score += 4;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " scores 4 points!";
	                            this.screen.setColor(shims_1.Color.fromString("blue"));
	                            this.screen.fillRect((this.nWidth / 7 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect((this.nWidth / 5 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.DrawSlimers();
	                        }
	                        else if (this.minballX <= 222 && this.ballX < 700) {
	                            this.p2Score += 2;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " scores 2 points!";
	                            this.screen.setColor(shims_1.Color.fromString("blue"));
	                            this.screen.fillRect((this.nWidth / 5 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.DrawSlimers();
	                        }
	                        else if (this.maxballX >= 940 && this.ballX > 300) {
	                            this.p1Score += 10;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " bowls a strike!";
	                            this.screen.setColor(shims_1.Color.fromString("blue"));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 5 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 7 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 10 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 15 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 25 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.DrawSlimers();
	                        }
	                        else if (this.maxballX >= 913 && this.ballX > 300) {
	                            this.p1Score += 8;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " scores 8 points!";
	                            this.screen.setColor(shims_1.Color.fromString("blue"));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 5 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 7 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 10 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 15 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.DrawSlimers();
	                        }
	                        else if (this.maxballX >= 880 && this.ballX > 300) {
	                            this.p1Score += 6;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " scores 6 points!";
	                            this.screen.setColor(shims_1.Color.fromString("blue"));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 5 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 7 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 10 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.DrawSlimers();
	                        }
	                        else if (this.maxballX >= 837 && this.ballX > 300) {
	                            this.p1Score += 4;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " scores 4 points!";
	                            this.screen.setColor(shims_1.Color.fromString("blue"));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 5 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 7 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.DrawSlimers();
	                        }
	                        else if (this.maxballX >= 780 && this.ballX > 300) {
	                            this.p1Score += 2;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " scores 2 points!";
	                            this.screen.setColor(shims_1.Color.fromString("blue"));
	                            this.screen.fillRect(this.nWidth - (this.nWidth / 5 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	                            this.DrawSlimers();
	                        }
	                        this.drawPrompt();
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.minballX = 500;
	                        this.maxballX = 500;
	                        this.flip();
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var6) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.playOnTicks = 10;
	                        this.fPlayOn = false;
	                        this.startTime += shims_1.System.currentTimeMillis() - var9;
	                        this.ballX = 490 + ((Math.random() * 20.0) | 0);
	                        this.ballY = 190 + ((Math.random() * 20.0) | 0);
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1X = 275;
	                        this.p1Y = 0;
	                        this.p1YV = 0;
	                        this.p2X = 675;
	                        this.p2Y = 0;
	                        this.p2YV = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.repaint();
	                    }
	                    if (this.gameThread != null) {
	                        try {
	                            if (this.fPlayOn) {
	                                yield shims_1.Thread.sleep(120);
	                            }
	                            else {
	                                yield shims_1.Thread.sleep(20);
	                            }
	                        }
	                        catch (var5) {
	                        }
	                        ;
	                    }
	                }
	                ;
	                this.fEndGame = true;
	                if (this.worldCup) {
	                    if (this.p1Score === this.p2Score) {
	                        this.drawPrompt("It\'s a draw at full time, here at Slime Alley!", 1);
	                        this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
	                        this.worldCup = false;
	                        this.flip();
	                    }
	                    else if (this.p1Score >= this.p2Score) {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the next round!", 1);
	                                break;
	                            case 1:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
	                                break;
	                            case 2:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
	                                break;
	                            case 3:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " wins the CHAMPIONSHIP!!!!!", 1);
	                        }
	                        if (this.worldCupRound === 3) {
	                            this.worldCup = false;
	                            this.promptBox("You win the championship!!!", "Congratulations!");
	                        }
	                        else {
	                            ++this.worldCupRound;
	                        }
	                    }
	                    else {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                            case 1:
	                                this.promptBox("You have been eliminated.", "Goodbye.");
	                                break;
	                            case 2:
	                                this.promptBox("You have been knocked out of the semifinals.", "You played well.");
	                                break;
	                            case 3:
	                                this.promptBox("You came second.", "Are you satisfied with that?");
	                        }
	                        this.worldCup = false;
	                    }
	                }
	                else if (this.p1Score === this.p2Score) {
	                    this.drawPrompt("It\'s a draw at full time, here at Slime Alley!", 1);
	                }
	                else if (this.p1Score < this.p2Score) {
	                    this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1);
	                }
	                else {
	                    this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
	                }
	                this.flip();
	                try {
	                    yield shims_1.Thread.sleep(5000);
	                }
	                catch (var4) {
	                }
	                ;
	                this.initStuff();
	            } while ((this.worldCup));
	            this.fCanChangeCol = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    testButton(var1, var2) {
	        for (var var3 = 0; var3 < 5; ++var3) {
	            if (var1 > ((2 * var3 + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) && var1 < ((2 * var3 + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) && var2 > (this.nHeight * 2 / 10 | 0) && var2 < (this.nHeight * 3 / 10 | 0)) {
	                if (var3 === 4) {
	                    this.gameLength = 120000;
	                    this.worldCup = true;
	                }
	                else {
	                    this.gameLength = (1 << var3) * 60000;
	                    this.worldCup = false;
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    toggleBuffering() {
	        if (this.doubleBuffered != true) {
	            this.screen = this.backBuffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        else {
	            this.screen = this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        this.repaint();
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = BowlingSlime2;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class Boxing extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 750;
	        this.recommended_height = 375;
	        this.slimeColText = ["Argentina", "Belgium", "Australia", "Iceland", "Cameroon", "P.R. of China", "Costa Rica", "Croatia", "Denmark", "Eucador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "Seth Efrica", "South Corea", "Sveden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany", "Night Elves"];
	        this.darkRed = new shims_1.Color(128, 0, 0);
	        this.darkGreen = new shims_1.Color(0, 128, 0);
	        this.darkBlue = new shims_1.Color(0, 0, 128);
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Sticky = false;
	        this.fP2Sticky = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.p1TouchingGoal = 0;
	        this.p2TouchingGoal = 0;
	        this.fEndGame = false;
	        this.fPlayOn = false;
	        this.nScoreX = 0;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.playOnTicks = 0;
	        this.SMILE_DIFF = 0;
	        this.DAMPING = 0;
	        this.MAX_TICKS_TOUCHING_GOAL = 0;
	        this.JUMPVEL = 0;
	        this.SLIMEVEL = 0;
	        this.GRAVITY = 0;
	        this.gameLength = 0;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fSuperSlime = false;
	        this.fSuperSlime2 = false;
	        this.doubleBuffered = false;
	        this.p1defend = false;
	        this.p2defend = false;
	        this.p1attack = false;
	        this.p2attack = false;
	        this.p1scores = false;
	        this.p2scores = false;
	        this.p1HP = 0;
	        this.p2HP = 0;
	        this.p1goingsuper = 0;
	        this.p2goingsuper = 0;
	        this.p1lookingleft = false;
	        this.p2lookingleft = false;
	        this.p1lookingright = false;
	        this.p2lookingright = false;
	        this.slimaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), this.darkGreen, shims_1.Color.fromString("white"), this.darkRed, this.darkRed, new shims_1.Color(119, 41, 28), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(128, 128, 255), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(119, 41, 28), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(185, 30, 2), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(252, 239, 82), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(16, 180, 180), new shims_1.Color(241, 245, 71), new shims_1.Color(230, 230, 230), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue")];
	        this.secondaryCols = [shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), new shims_1.Color(128, 128, 255), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), this.darkBlue, shims_1.Color.fromString("green"), shims_1.Color.fromString("blue"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), this.darkGreen, shims_1.Color.fromString("white"), new shims_1.Color(128, 255, 128), new shims_1.Color(255, 128, 0), this.darkGreen, this.darkBlue, new shims_1.Color(13, 131, 10), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), new shims_1.Color(7, 177, 33), shims_1.Color.fromString("red"), shims_1.Color.fromString("black"), shims_1.Color.fromString("blue")];
	        this.thirdColor = [shims_1.Color.fromString("red"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("red"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red")];
	        this.fourthColor = [shims_1.Color.fromString("black"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("white")];
	        this.frenzyCol = 0;
	        this.SMILE_DIFF = 2;
	        this.DAMPING = 7;
	        this.MAX_TICKS_TOUCHING_GOAL = 60;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.p1goingsuper = 0;
	        this.p2goingsuper = 0;
	        this.pointsX = new Array(0);
	        this.pointsY = new Array(0);
	        this.p2Col = 1;
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var1 = this.screen.getFontMetrics();
	            var var2 = var1.stringWidth("Replay...");
	            var var3 = var1.getHeight();
	            var var4 = (this.nWidth / 2 | 0) - (var2 / 2 | 0);
	            var var5 = (this.nHeight / 2 | 0) - var3;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            var var6 = this.replayPos - 1;
	            while ((!this.mousePressed)) {
	                ++var6;
	                if (var6 >= 200) {
	                    var6 = 0;
	                }
	                if (var6 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var7) {
	                    }
	                    ;
	                    var6 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	                yield this.ReplayFrame(var6, var4, var5, var2, var3, false);
	                this.flip();
	            }
	            ;
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    DrawGoals() {
	    }
	    DrawSlimers() {
	        if (this.p1goingsuper >= 3) {
	            this.fSuperSlime = true;
	        }
	        else {
	            this.fSuperSlime = false;
	        }
	        if (this.p2goingsuper >= 3) {
	            this.fSuperSlime2 = true;
	        }
	        else {
	            this.fSuperSlime2 = false;
	        }
	        var var1 = (this.nWidth / 10 | 0);
	        var var2 = (this.nHeight / 10 | 0);
	        var var3 = (this.nWidth / 50 | 0);
	        var var4 = (this.nHeight / 25 | 0);
	        var var5 = 2000;
	        var var6 = 4000;
	        var var7 = (this.p1OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var var8 = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7 - 22, var8, var1 + 46, var2);
	        var7 = (this.p2OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7 - 25, var8, var1 + 48, var2);
	        var7 = (this.p1X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        if (this.p1lookingright) {
	            this.screen.setColor(this.fSuperSlime ? this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length] : this.slimaryCols[this.p1Col]);
	            this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	            this.screen.setColor(this.secondaryCols[this.p1Col]);
	            this.pointsX[0] = this.pointsX[2] = var7 + (var1 / 2 | 0);
	            this.pointsX[1] = var7 + (var1 * 2 / 5 | 0);
	            this.pointsX[3] = var7 + (var1 / 8 | 0);
	            this.pointsY[0] = var8;
	            this.pointsY[1] = this.pointsY[3] = var8 + (var2 / 2 | 0);
	            this.pointsY[2] = var8 + var2;
	            this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        }
	        else if (this.p1lookingleft) {
	            this.screen.setColor(this.fSuperSlime ? this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length] : this.slimaryCols[this.p1Col]);
	            this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	            this.screen.setColor(this.secondaryCols[this.p1Col]);
	            this.pointsX[0] = this.pointsX[2] = var7 + (var1 / 2 | 0);
	            this.pointsX[1] = var7 + (var1 * 3 / 5 | 0);
	            this.pointsX[3] = var7 + (var1 * 7 / 8 | 0);
	            this.pointsY[0] = var8;
	            this.pointsY[1] = this.pointsY[3] = var8 + (var2 / 2 | 0);
	            this.pointsY[2] = var8 + var2;
	            this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        }
	        var var9 = this.p1X + 38;
	        var var10 = this.p1Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var var11 = var7 - var5;
	        var var12 = var8 - var6;
	        var var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var var14 = Math.random() < 0.01;
	        if (this.p1lookingright) {
	            this.screen.setColor(this.thirdColor[this.p1Col]);
	            if (this.p1defend) {
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 2, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) - 10, 25, 35);
	            }
	            else if (this.p1attack) {
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 2, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) - 2, 35, 25);
	            }
	            else {
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 50, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) - 2, 35, 25);
	            }
	            this.screen.setColor(this.fourthColor[this.p1Col]);
	            if (this.p1defend) {
	                this.screen.fillRect(var7 - (4 * var11 / var13 | 0) - -2, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) + 20, 15, 5);
	            }
	            else if (this.p1attack) {
	                this.screen.fillRect(var7 - (4 * var11 / var13 | 0), var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) + 3, 5, 15);
	            }
	            else {
	                this.screen.fillRect(var7 - (4 * var11 / var13 | 0) - 50, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) + 3, 5, 15);
	            }
	        }
	        else if (this.p1lookingleft) {
	            this.screen.setColor(this.thirdColor[this.p1Col]);
	            if (this.p1defend) {
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 38 - 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) - 10, 25, 35);
	            }
	            else if (this.p1attack) {
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 48 - 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) - 2, 35, 25);
	            }
	            else {
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 3 - 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) - 2, 35, 25);
	            }
	            this.screen.setColor(this.fourthColor[this.p1Col]);
	            if (this.p1defend) {
	                this.screen.fillRect(var7 - (4 * var11 / var13 | 0) - 33 - 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) + 20, 15, 5);
	            }
	            else if (this.p1attack) {
	                this.screen.fillRect(var7 - (4 * var11 / var13 | 0) - 20 - 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) + 3, 5, 15);
	            }
	            else {
	                this.screen.fillRect(var7 - (4 * var11 / var13 | 0) - -27 - 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) + 3, 5, 15);
	            }
	        }
	        if (var14) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            if (this.p1lookingright) {
	                this.screen.setColor(shims_1.Color.fromString("white"));
	                this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	                if (var13 > 0 && !var14) {
	                    this.screen.setColor(shims_1.Color.fromString("black"));
	                    this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 7, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	                }
	            }
	            else if (this.p1lookingleft) {
	                this.screen.setColor(var14 ? shims_1.Color.fromString("gray") : shims_1.Color.fromString("white"));
	                this.screen.fillOval(var7 - var3 - 40, var8 - var4, var3, var4);
	                if (var13 > 0 && !var14) {
	                    this.screen.setColor(shims_1.Color.fromString("black"));
	                    this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 17 - 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	                }
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var var15;
	        var var16;
	        var var17;
	        var var18;
	        var var19;
	        var var20;
	        var var21;
	        var var22;
	        var var23;
	        var var24;
	        if (this.p1HP > this.p2HP + 2) {
	            var15 = (this.p1X * this.nWidth / 1000 | 0);
	            var16 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            var17 = (this.nWidth / 20 | 0);
	            var18 = (this.nHeight / 20 | 0);
	            var19 = 0;
	            var20 = (this.nWidth / 20 | 0);
	            var21 = (this.nHeight / 20 | 0);
	            var22 = (this.p1X * this.nWidth / 1000 | 0) - var20;
	            var23 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            var24 = 0;
	            if (this.p1lookingleft) {
	                do {
	                    this.screen.setColor(shims_1.Color.fromString("black"));
	                    this.screen.drawArc(var22, var23 + var24, var20, var21, -10, -150);
	                    ++var24;
	                } while ((var24 < 3));
	            }
	            else if (this.p1lookingright) {
	                do {
	                    this.screen.setColor(shims_1.Color.fromString("black"));
	                    this.screen.drawArc(var15, var16 + var19, var17, var18, -30, -150);
	                    ++var19;
	                } while ((var19 < 3));
	            }
	        }
	        var7 = (this.p2X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        if (this.p2lookingright) {
	            this.screen.setColor(this.fSuperSlime2 ? this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length] : this.slimaryCols[this.p2Col]);
	            this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	            this.screen.setColor(this.secondaryCols[this.p2Col]);
	            this.pointsX[0] = this.pointsX[2] = var7 + (var1 / 2 | 0);
	            this.pointsX[1] = var7 + (var1 * 2 / 5 | 0);
	            this.pointsX[3] = var7 + (var1 / 8 | 0);
	            this.pointsY[0] = var8;
	            this.pointsY[1] = this.pointsY[3] = var8 + (var2 / 2 | 0);
	            this.pointsY[2] = var8 + var2;
	            this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        }
	        else if (this.p2lookingleft) {
	            this.screen.setColor(this.fSuperSlime2 ? this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length] : this.slimaryCols[this.p2Col]);
	            this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	            this.screen.setColor(this.secondaryCols[this.p2Col]);
	            this.pointsX[0] = this.pointsX[2] = var7 + (var1 / 2 | 0);
	            this.pointsX[1] = var7 + (var1 * 3 / 5 | 0);
	            this.pointsX[3] = var7 + (var1 * 7 / 8 | 0);
	            this.pointsY[0] = var8;
	            this.pointsY[1] = this.pointsY[3] = var8 + (var2 / 2 | 0);
	            this.pointsY[2] = var8 + var2;
	            this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        }
	        var9 = this.p2X - 18;
	        var10 = this.p2Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var11 = var7 - var5;
	        var12 = var8 - var6;
	        var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var14 = Math.random() < 0.01;
	        if (this.p2lookingright) {
	            this.screen.setColor(this.thirdColor[this.p2Col]);
	            if (this.p2defend) {
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 2 + 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) - 10, 25, 35);
	            }
	            else if (this.p2attack) {
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 2 + 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) - 2, 35, 25);
	            }
	            else {
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 50 + 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) - 2, 35, 25);
	            }
	            this.screen.setColor(this.fourthColor[this.p2Col]);
	            if (this.p2defend) {
	                this.screen.fillRect(var7 - (4 * var11 / var13 | 0) - -2 + 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) + 20, 15, 5);
	            }
	            else if (this.p2attack) {
	                this.screen.fillRect(var7 - (4 * var11 / var13 | 0) + 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) + 3, 5, 15);
	            }
	            else {
	                this.screen.fillRect(var7 - (4 * var11 / var13 | 0) - 50 + 40, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) + 3, 5, 15);
	            }
	        }
	        else if (this.p2lookingleft) {
	            this.screen.setColor(this.thirdColor[this.p2Col]);
	            if (this.p2defend) {
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 38, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) - 10, 25, 35);
	            }
	            else if (this.p2attack) {
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 48, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) - 2, 35, 25);
	            }
	            else {
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 3, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) - 2, 35, 25);
	            }
	            this.screen.setColor(this.fourthColor[this.p2Col]);
	            if (this.p2defend) {
	                this.screen.fillRect(var7 - (4 * var11 / var13 | 0) - 33, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) + 20, 15, 5);
	            }
	            else if (this.p2attack) {
	                this.screen.fillRect(var7 - (4 * var11 / var13 | 0) - 20, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) + 3, 5, 15);
	            }
	            else {
	                this.screen.fillRect(var7 - (4 * var11 / var13 | 0) - -27, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0) + 3, 5, 15);
	            }
	        }
	        if (var14) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(var14 ? shims_1.Color.fromString("gray") : shims_1.Color.fromString("white"));
	            if (this.p2lookingleft) {
	                this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            }
	            else if (this.p2lookingright) {
	                this.screen.fillOval(var7 - var3 + 40, var8 - var4, var3, var4);
	            }
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                if (this.p2lookingleft) {
	                    this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 17, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	                }
	                else if (this.p2lookingright) {
	                    this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - 17 + 50, var8 - (1000 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	                }
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        if (this.p2HP > this.p1HP + 2) {
	            var15 = (this.p2X * this.nWidth / 1000 | 0);
	            var16 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            var17 = (this.nWidth / 20 | 0);
	            var18 = (this.nHeight / 20 | 0);
	            var19 = 0;
	            var20 = (this.nWidth / 20 | 0);
	            var21 = (this.nHeight / 20 | 0);
	            var22 = (this.p2X * this.nWidth / 1000 | 0) - var20;
	            var23 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            var24 = 0;
	            if (this.p2lookingleft) {
	                do {
	                    this.screen.setColor(shims_1.Color.fromString("black"));
	                    this.screen.drawArc(var22, var23 + var24, var20, var21, -10, -150);
	                    ++var24;
	                } while ((var24 < 3));
	            }
	            else if (this.p2lookingright) {
	                do {
	                    this.screen.setColor(shims_1.Color.fromString("black"));
	                    this.screen.drawArc(var15, var16 + var19, var17, var18, -30, -150);
	                    ++var19;
	                } while ((var19 < 3));
	            }
	        }
	        if (this.p2HP <= 9) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(410, 35, 30, 28);
	        }
	        if (this.p2HP <= 8) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(441, 35, 30, 28);
	        }
	        if (this.p2HP <= 7) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(476, 35, 30, 28);
	        }
	        if (this.p2HP <= 6) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(511, 35, 30, 28);
	        }
	        if (this.p2HP <= 5) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(546, 35, 30, 28);
	        }
	        if (this.p2HP <= 4) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(581, 35, 30, 28);
	        }
	        if (this.p2HP <= 3) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(616, 35, 30, 28);
	        }
	        if (this.p2HP <= 2) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(651, 35, 30, 28);
	        }
	        if (this.p2HP <= 1) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(686, 35, 30, 28);
	        }
	        if (this.p2HP <= 0) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(721, 35, 30, 28);
	        }
	        if (this.p1HP <= 9) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(0, 35, 30, 28);
	        }
	        if (this.p1HP <= 8) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(31, 35, 30, 28);
	        }
	        if (this.p1HP <= 7) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(66, 35, 30, 28);
	        }
	        if (this.p1HP <= 6) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(101, 35, 30, 28);
	        }
	        if (this.p1HP <= 5) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(136, 35, 30, 28);
	        }
	        if (this.p1HP <= 4) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(171, 35, 30, 28);
	        }
	        if (this.p1HP <= 3) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(206, 35, 30, 28);
	        }
	        if (this.p1HP <= 2) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(241, 35, 30, 28);
	        }
	        if (this.p1HP <= 1) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(276, 35, 30, 28);
	        }
	        if (this.p1HP <= 0) {
	            this.screen.setColor(shims_1.Color.fromString("red"));
	            this.screen.fillOval(311, 35, 30, 28);
	        }
	    }
	    DrawStatus() {
	        var var1 = this.screen;
	        var var2 = this.screen.getFontMetrics();
	        var var3 = null;
	        var var4 = this.MakeTime(this.gameTime);
	        var var5 = (this.nHeight / 20 | 0);
	        var var6 = 0;
	        var var7 = var2.stringWidth(var4);
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 1:
	                    var3 = "Quarter Finals";
	                    break;
	                case 2:
	                    var3 = "Semi-Finals";
	                    break;
	                case 3:
	                    var3 = "Final";
	                    break;
	                default:
	                    var3 = "Qualifying";
	            }
	            if (this.fGoldenGoal) {
	                var3 = var3 + " [Golden Goal]";
	            }
	            else if (this.fExtraTime) {
	                var3 = var3 + " [Extra Time]";
	            }
	            var6 = var2.stringWidth(var3);
	        }
	        var var8 = var6 > var7 ? var6 : var7;
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var1.fillRect((this.nWidth / 2 | 0) - (var8 / 2 | 0) - 5, 80, var8 + 105, var5 + 22);
	        var1.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(var4, (this.nWidth / 2 | 0) - (var7 / 2 | 0), var2.getAscent() + 80);
	    }
	    MakeTime(var1) {
	        var var3 = Math.round(var1 / 10) % 100;
	        var var5 = Math.round(var1 / 1000) % 60;
	        var var7 = Math.round(var1 / 60000) % 60;
	        var var9 = "";
	        if (var7 < 10) {
	            var9 = var9 + "0";
	        }
	        var9 = var9 + var7;
	        var9 = var9 + ":";
	        if (var5 < 10) {
	            var9 = var9 + "0";
	        }
	        var9 = var9 + var5;
	        var9 = var9 + ":";
	        if (var3 < 10) {
	            var9 = var9 + "0";
	        }
	        var9 = var9 + var3;
	        return var9;
	    }
	    MoveSlimers() {
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 0:
	                    this.controlP2v0();
	                    break;
	                case 1:
	                    this.controlP2v1();
	                    break;
	                case 2:
	                    this.controlP2v2();
	                    break;
	                case 3:
	                    this.controlP2v3();
	            }
	        }
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 950) {
	            this.p1X = 950;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.GRAVITY;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.GRAVITY;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	        if (this.p1attack && this.p2attack && this.p1Y === this.p2Y) {
	            if (this.p1X < this.p2X) {
	                if (this.p1X > this.p2X - 160 && this.p1X < this.p2X + 160) {
	                    this.p1X = this.p2OldX - 160;
	                    this.p2X = this.p1OldX + 160;
	                }
	            }
	            else if (this.p2X > this.p1X - 160 && this.p2X < this.p1X + 160) {
	                this.p1X = this.p2OldX + 160;
	                this.p2X = this.p1OldX - 160;
	            }
	        }
	        if (this.p1attack && !this.p2attack && !this.p2defend || !this.p1attack && !this.p1defend && this.p2attack && this.p1Y === this.p2Y) {
	            if (this.p1X < this.p2X) {
	                if (this.p1X > this.p2X - 120 && this.p1X < this.p2X + 120) {
	                    this.p1X = this.p2OldX - 120;
	                    this.p2X = this.p1OldX + 120;
	                }
	            }
	            else if (this.p2X > this.p1X - 120 && this.p2X < this.p1X + 120) {
	                this.p1X = this.p2OldX + 120;
	                this.p2X = this.p1OldX - 120;
	            }
	        }
	        if (this.p1defend && !this.p2attack && !this.p2defend || !this.p1attack && !this.p1defend && this.p2defend && this.p1Y === this.p2Y) {
	            if (this.p1X < this.p2X) {
	                if (this.p1X > this.p2X - 110 && this.p1X < this.p2X + 110) {
	                    this.p1X = this.p2OldX - 110;
	                    this.p2X = this.p1OldX + 110;
	                }
	            }
	            else if (this.p2X > this.p1X - 110 && this.p2X < this.p1X + 110) {
	                this.p1X = this.p2OldX + 110;
	                this.p2X = this.p1OldX - 110;
	            }
	        }
	        if (this.p1defend && this.p2defend && this.p1Y === this.p2Y) {
	            if (this.p1X < this.p2X) {
	                if (this.p1X > this.p2X - 135 && this.p1X < this.p2X + 135) {
	                    this.p1X = this.p2OldX - 135;
	                    this.p2X = this.p1OldX + 135;
	                }
	            }
	            else if (this.p2X > this.p1X - 135 && this.p2X < this.p1X + 135) {
	                this.p1X = this.p2OldX + 135;
	                this.p2X = this.p1OldX - 135;
	            }
	        }
	        if (!this.p1defend && !this.p1attack && !this.p2defend && !this.p2attack && this.p1Y === this.p2Y) {
	            if (this.p1X < this.p2X) {
	                if (this.p1X > this.p2X - 100 && this.p1X < this.p2X + 100) {
	                    this.p1X = this.p2OldX - 100;
	                    this.p2X = this.p1OldX + 100;
	                }
	            }
	            else if (this.p2X > this.p1X - 100 && this.p2X < this.p1X + 100) {
	                this.p1X = this.p2OldX + 100;
	                this.p2X = this.p1OldX - 100;
	            }
	        }
	        if (this.p1defend && this.p2attack || this.p1attack && this.p2defend && this.p1Y === this.p2Y) {
	            if (this.p1X < this.p2X) {
	                if (this.p1X > this.p2X - 150 && this.p1X < this.p2X + 150) {
	                    this.p1X = this.p2OldX - 150;
	                    this.p2X = this.p1OldX + 150;
	                }
	            }
	            else if (this.p2X > this.p1X - 150 && this.p2X < this.p1X + 150) {
	                this.p1X = this.p2OldX + 150;
	                this.p2X = this.p1OldX - 150;
	            }
	        }
	    }
	    ReplayFrame(var1, var2, var3, var4, var5, var6) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (var6) {
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var var7 = var1 !== 0 ? var1 - 1 : 199;
	                this.p1OldX = this.replayData[var7][0];
	                this.p1OldY = this.replayData[var7][1];
	                this.p2OldX = this.replayData[var7][2];
	                this.p2OldY = this.replayData[var7][3];
	            }
	            this.p1X = this.replayData[var1][0];
	            this.p1Y = this.replayData[var1][1];
	            this.p2X = this.replayData[var1][2];
	            this.p2Y = this.replayData[var1][3];
	            this.p1Col = this.replayData[var1][4];
	            this.p2Col = this.replayData[var1][5];
	            if ((var1 / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", var2, var3);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(var2, var3 - var5, var4, var5 * 2);
	            }
	            this.DrawSlimers();
	            this.DrawGoals();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var8) {
	            }
	            ;
	        });
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.p1Col;
	        this.replayData[this.replayPos][5] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    checkScored() {
	        return false;
	    }
	    controlP2v0() {
	        var var1 = new shims_1.Random();
	        var var2 = var1.nextInt(4) + 1;
	        if (this.p2X < this.p1X) {
	            if (var2 === 1) {
	                this.p2XV = -this.SLIMEVEL;
	                this.p2lookingleft = true;
	                this.p2lookingright = false;
	            }
	            else {
	                this.p2XV = this.SLIMEVEL;
	                this.p2lookingleft = false;
	                this.p2lookingright = true;
	            }
	        }
	        else if (var2 === 1) {
	            this.p2XV = this.SLIMEVEL;
	            this.p2lookingleft = false;
	            this.p2lookingright = true;
	        }
	        else {
	            this.p2XV = -this.SLIMEVEL;
	            this.p2lookingleft = true;
	            this.p2lookingright = false;
	        }
	        if (this.p1X > this.p2X - 160) {
	            var var3 = var1.nextInt(10) + 1;
	            if (var3 === 1) {
	                this.p2attack = true;
	                this.p2defend = false;
	                if (this.p2X < this.p1X) {
	                    if (this.p2X > this.p1X - 120 && (!this.p1defend && !this.p1attack || this.p1lookingright && this.p2lookingright) && this.p1Y === this.p2Y) {
	                        this.p2scores = true;
	                        ++this.p2goingsuper;
	                        this.p1goingsuper = 0;
	                    }
	                }
	                else if (this.p1X > this.p2X - 120 && (!this.p1defend && !this.p1attack || this.p1lookingleft && this.p2lookingleft) && this.p1Y === this.p2Y) {
	                    this.p2scores = true;
	                    ++this.p2goingsuper;
	                    this.p1goingsuper = 0;
	                }
	            }
	            else if (var3 === 2) {
	                this.p2defend = true;
	                this.p2attack = false;
	                if (this.p2scores) {
	                    if (this.fSuperSlime2 && this.p2goingsuper >= 4) {
	                        this.p1HP -= 2;
	                    }
	                    else {
	                        --this.p1HP;
	                    }
	                    this.p2scores = false;
	                }
	            }
	            else {
	                this.p2attack = false;
	                this.p2defend = false;
	                if (this.p2scores) {
	                    if (this.fSuperSlime2 && this.p2goingsuper >= 4) {
	                        this.p1HP -= 2;
	                    }
	                    else {
	                        --this.p1HP;
	                    }
	                    this.p2scores = false;
	                }
	            }
	        }
	    }
	    controlP2v1() {
	        var var1 = new shims_1.Random();
	        var var2 = var1.nextInt(3) + 1;
	        if (this.p2X < this.p1X) {
	            if (var2 === 1) {
	                this.p2XV = -this.SLIMEVEL;
	                this.p2lookingleft = true;
	                this.p2lookingright = false;
	            }
	            else {
	                this.p2XV = this.SLIMEVEL;
	                this.p2lookingleft = false;
	                this.p2lookingright = true;
	            }
	        }
	        else if (var2 === 1) {
	            this.p2XV = this.SLIMEVEL;
	            this.p2lookingleft = false;
	            this.p2lookingright = true;
	        }
	        else {
	            this.p2XV = -this.SLIMEVEL;
	            this.p2lookingleft = true;
	            this.p2lookingright = false;
	        }
	        if (this.p1X > this.p2X - 160) {
	            var var3 = var1.nextInt(10) + 1;
	            if (var3 >= 1 && var3 <= 2) {
	                this.p2attack = true;
	                this.p2defend = false;
	                if (this.p2X < this.p1X) {
	                    if (this.p2X > this.p1X - 120 && (!this.p1defend && !this.p1attack || this.p1lookingright && this.p2lookingright) && this.p1Y === this.p2Y) {
	                        this.p2scores = true;
	                        ++this.p2goingsuper;
	                        this.p1goingsuper = 0;
	                    }
	                }
	                else if (this.p1X > this.p2X - 120 && (!this.p1defend && !this.p1attack || this.p1lookingleft && this.p2lookingleft) && this.p1Y === this.p2Y) {
	                    this.p2scores = true;
	                    ++this.p2goingsuper;
	                    this.p1goingsuper = 0;
	                }
	            }
	            else if (var3 >= 3 && var3 <= 4) {
	                this.p2defend = true;
	                this.p2attack = false;
	                if (this.p2scores) {
	                    if (this.fSuperSlime2 && this.p2goingsuper >= 4) {
	                        this.p1HP -= 2;
	                    }
	                    else {
	                        --this.p1HP;
	                    }
	                    this.p2scores = false;
	                }
	            }
	            else {
	                this.p2attack = false;
	                this.p2defend = false;
	                if (this.p2scores) {
	                    if (this.fSuperSlime2 && this.p2goingsuper >= 4) {
	                        this.p1HP -= 2;
	                    }
	                    else {
	                        --this.p1HP;
	                    }
	                    this.p2scores = false;
	                }
	            }
	        }
	    }
	    controlP2v2() {
	        var var1 = new shims_1.Random();
	        var var2 = var1.nextInt(2) + 1;
	        if (this.p2X < this.p1X) {
	            if (var2 === 1) {
	                this.p2XV = -this.SLIMEVEL;
	                this.p2lookingleft = true;
	                this.p2lookingright = false;
	            }
	            else {
	                this.p2XV = this.SLIMEVEL;
	                this.p2lookingleft = false;
	                this.p2lookingright = true;
	            }
	        }
	        else if (var2 === 1) {
	            this.p2XV = this.SLIMEVEL;
	            this.p2lookingleft = false;
	            this.p2lookingright = true;
	        }
	        else {
	            this.p2XV = -this.SLIMEVEL;
	            this.p2lookingleft = true;
	            this.p2lookingright = false;
	        }
	        if (this.p1X > this.p2X - 160) {
	            var var3 = var1.nextInt(10) + 1;
	            if (var3 >= 1 && var3 <= 3) {
	                this.p2attack = true;
	                this.p2defend = false;
	                if (this.p2X < this.p1X) {
	                    if (this.p2X > this.p1X - 120 && (!this.p1defend && !this.p1attack || this.p1lookingright && this.p2lookingright) && this.p1Y === this.p2Y) {
	                        this.p2scores = true;
	                        ++this.p2goingsuper;
	                        this.p1goingsuper = 0;
	                    }
	                }
	                else if (this.p1X > this.p2X - 120 && (!this.p1defend && !this.p1attack || this.p1lookingleft && this.p2lookingleft) && this.p1Y === this.p2Y) {
	                    this.p2scores = true;
	                    ++this.p2goingsuper;
	                    this.p1goingsuper = 0;
	                }
	            }
	            else if (var3 >= 4 && var3 <= 5) {
	                this.p2defend = true;
	                this.p2attack = false;
	                if (this.p2scores) {
	                    if (this.fSuperSlime2 && this.p2goingsuper >= 4) {
	                        this.p1HP -= 2;
	                    }
	                    else {
	                        --this.p1HP;
	                    }
	                    this.p2scores = false;
	                }
	            }
	            else {
	                this.p2attack = false;
	                this.p2defend = false;
	                if (this.p2scores) {
	                    if (this.fSuperSlime2 && this.p2goingsuper >= 4) {
	                        this.p1HP -= 2;
	                    }
	                    else {
	                        --this.p1HP;
	                    }
	                    this.p2scores = false;
	                }
	            }
	        }
	    }
	    controlP2v3() {
	        var var1 = new shims_1.Random();
	        var var2 = var1.nextInt(4) + 1;
	        if (this.p2X < this.p1X) {
	            if (var2 === 1) {
	                this.p2XV = -this.SLIMEVEL;
	                this.p2lookingleft = true;
	                this.p2lookingright = false;
	            }
	            else {
	                this.p2XV = this.SLIMEVEL;
	                this.p2lookingleft = false;
	                this.p2lookingright = true;
	            }
	        }
	        else if (var2 === 1) {
	            this.p2XV = this.SLIMEVEL;
	            this.p2lookingleft = false;
	            this.p2lookingright = true;
	        }
	        else {
	            this.p2XV = -this.SLIMEVEL;
	            this.p2lookingleft = true;
	            this.p2lookingright = false;
	        }
	        if (this.p1X > this.p2X - 160) {
	            var var3 = var1.nextInt(10) + 1;
	            if (var3 >= 1 && var3 <= 3) {
	                this.p2attack = true;
	                this.p2defend = false;
	                if (this.p2X < this.p1X) {
	                    if (this.p2X > this.p1X - 120 && (!this.p1defend && !this.p1attack || this.p1lookingright && this.p2lookingright) && this.p1Y === this.p2Y) {
	                        this.p2scores = true;
	                        ++this.p2goingsuper;
	                        this.p1goingsuper = 0;
	                    }
	                }
	                else if (this.p1X > this.p2X - 120 && (!this.p1defend && !this.p1attack || this.p1lookingleft && this.p2lookingleft) && this.p1Y === this.p2Y) {
	                    this.p2scores = true;
	                    ++this.p2goingsuper;
	                    this.p1goingsuper = 0;
	                }
	            }
	            else if (var3 >= 4 && var3 <= 6) {
	                this.p2defend = true;
	                this.p2attack = false;
	                if (this.p2scores) {
	                    if (this.fSuperSlime2 && this.p2goingsuper >= 4) {
	                        this.p1HP -= 2;
	                    }
	                    else {
	                        --this.p1HP;
	                    }
	                    this.p2scores = false;
	                }
	            }
	            else {
	                this.p2attack = false;
	                this.p2defend = false;
	                if (this.p2scores) {
	                    if (this.fSuperSlime2 && this.p2goingsuper >= 4) {
	                        this.p1HP -= 2;
	                    }
	                    else {
	                        --this.p1HP;
	                    }
	                    this.p2scores = false;
	                }
	            }
	        }
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    drawButtons() {
	        var var1 = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "Tournament"];
	        var var2 = this.screen.getFontMetrics();
	        var var3 = new shims_1.Color(0, 0, 128);
	        for (var var4 = 0; var4 < 5; ++var4) {
	            this.screen.setColor(var3);
	            this.screen.fillRect(((2 * var4 + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(var1[var4], ((2 * var4 + 1) * this.nWidth / 10 | 0) - (var2.stringWidth(var1[var4]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (var2.getHeight() / 2 | 0));
	        }
	        this.flip();
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(var1, var2) {
	        if (((typeof var1 === 'string') || var1 === null) && ((typeof var2 === 'number') || var2 === null)) {
	            return (() => {
	                var var3 = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var3.getHeight() * (var2 + 1) + 10);
	            })();
	        }
	        else if (var1 === undefined && var2 === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    drawScores() {
	        this.screen.setColor(shims_1.Color.fromString("black"));
	        this.screen.fillRect(0, 20, 340, 56);
	        this.screen.setColor(shims_1.Color.fromString("green"));
	        this.screen.fillOval(0, 35, 30, 28);
	        this.screen.fillOval(31, 35, 30, 28);
	        this.screen.fillOval(66, 35, 30, 28);
	        this.screen.fillOval(101, 35, 30, 28);
	        this.screen.fillOval(136, 35, 30, 28);
	        this.screen.fillOval(171, 35, 30, 28);
	        this.screen.fillOval(206, 35, 30, 28);
	        this.screen.fillOval(241, 35, 30, 28);
	        this.screen.fillOval(276, 35, 30, 28);
	        this.screen.fillOval(311, 35, 30, 28);
	        this.screen.setColor(shims_1.Color.fromString("black"));
	        this.screen.fillRect(410, 20, 340, 56);
	        this.screen.setColor(shims_1.Color.fromString("green"));
	        this.screen.fillOval(410, 35, 30, 28);
	        this.screen.fillOval(441, 35, 30, 28);
	        this.screen.fillOval(476, 35, 30, 28);
	        this.screen.fillOval(511, 35, 30, 28);
	        this.screen.fillOval(546, 35, 30, 28);
	        this.screen.fillOval(581, 35, 30, 28);
	        this.screen.fillOval(616, 35, 30, 28);
	        this.screen.fillOval(651, 35, 30, 28);
	        this.screen.fillOval(686, 35, 30, 28);
	        this.screen.fillOval(721, 35, 30, 28);
	        var var1 = this.screen;
	        var var2 = (this.nHeight / 20 | 0);
	        var var3 = this.screen.getFontMetrics();
	        var var4 = var3.stringWidth("Replay...");
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var1.setColor(shims_1.Color.fromString("white"));
	        var1.drawString(this.slimeColText[this.p1Col] + " : ", 0, var2);
	        var var5 = this.p2Score + " : " + this.slimeColText[this.p2Col];
	        var1.drawString(this.slimeColText[this.p2Col] + " : ", 410, var2);
	    }
	    flip() {
	        if (this.doubleBuffered) {
	            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
	        }
	    }
	    getBallBounceX() {
	        return 0;
	    }
	    getBallMaxY() {
	        return 0;
	    }
	    handleEvent(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((var1.id)) {
	                case 401:
	                case 403:
	                    if (this.fCanChangeCol) {
	                        switch ((var1.key)) {
	                            case 73:
	                            case 105:
	                            case 1004:
	                                do {
	                                    this.p2Col = this.p2Col === 0 ? this.slimaryCols.length - 1 : this.p2Col - 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                do {
	                                    this.p2Col = this.p2Col !== this.slimaryCols.length - 1 ? this.p2Col + 1 : 0;
	                                } while ((this.p2Col === this.p1Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 83:
	                            case 115:
	                                do {
	                                    this.p1Col = this.p1Col !== this.slimaryCols.length - 1 ? this.p1Col + 1 : 0;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 87:
	                            case 119:
	                                while ((true)) {
	                                    this.p1Col = this.p1Col === 0 ? this.slimaryCols.length - 1 : this.p1Col - 1;
	                                    if (this.p1Col !== this.p2Col) {
	                                        this.drawScores();
	                                        this.repaint();
	                                        break;
	                                    }
	                                }
	                                ;
	                        }
	                    }
	                    if (!this.fEndGame) {
	                        switch ((var1.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                return false;
	                            case 65:
	                            case 97:
	                                this.p1XV = -this.SLIMEVEL;
	                                this.p1lookingleft = true;
	                                this.p1lookingright = false;
	                                return false;
	                            case 66:
	                            case 98:
	                                this.toggleBuffering();
	                                return false;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.SLIMEVEL;
	                                this.p1lookingleft = false;
	                                this.p1lookingright = true;
	                                return false;
	                            case 69:
	                            case 101:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (!this.worldCup) {
	                                    this.p2attack = true;
	                                    if (this.p2X < this.p1X) {
	                                        if (this.p2X > this.p1X - 120 && (!this.p1defend && !this.p1attack || this.p1lookingright && this.p2lookingright) && this.p1Y === this.p2Y) {
	                                            this.p2scores = true;
	                                            ++this.p2goingsuper;
	                                            this.p1goingsuper = 0;
	                                            return false;
	                                        }
	                                    }
	                                    else if (this.p1X > this.p2X - 120 && (!this.p1defend && !this.p1attack || this.p1lookingleft && this.p2lookingleft) && this.p1Y === this.p2Y) {
	                                        this.p2scores = true;
	                                        ++this.p2goingsuper;
	                                        this.p1goingsuper = 0;
	                                        return false;
	                                    }
	                                    return false;
	                                }
	                                return false;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                if (!this.worldCup) {
	                                    this.p2XV = -this.SLIMEVEL;
	                                    this.p2lookingleft = true;
	                                    this.p2lookingright = false;
	                                }
	                                return false;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                if (!this.worldCup) {
	                                    this.p2defend = true;
	                                }
	                                return false;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                if (!this.worldCup) {
	                                    this.p2XV = this.SLIMEVEL;
	                                    this.p2lookingleft = false;
	                                    this.p2lookingright = true;
	                                }
	                                return false;
	                            case 83:
	                            case 115:
	                                this.p1defend = true;
	                                return false;
	                            case 85:
	                            case 117:
	                                if (this.p2Y === 0 && !this.worldCup) {
	                                    this.p2YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 87:
	                            case 119:
	                                this.p1attack = true;
	                                if (this.p1X < this.p2X) {
	                                    if (this.p1X > this.p2X - 120 && (!this.p2defend && !this.p2attack || this.p1lookingright && this.p2lookingright) && this.p1Y === this.p2Y) {
	                                        this.p1scores = true;
	                                        ++this.p1goingsuper;
	                                        this.p2goingsuper = 0;
	                                    }
	                                }
	                                else if (this.p2X > this.p1X - 120 && (!this.p2defend && !this.p2attack || this.p1lookingleft && this.p2lookingleft) && this.p1Y === this.p2Y) {
	                                    this.p1scores = true;
	                                    ++this.p1goingsuper;
	                                    this.p2goingsuper = 0;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((var1.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 73:
	                        case 105:
	                        case 1004:
	                            if (!this.worldCup) {
	                                this.p2attack = false;
	                                if (this.p2scores) {
	                                    if (this.fSuperSlime2 && this.p2goingsuper >= 4) {
	                                        this.p1HP -= 2;
	                                    }
	                                    else {
	                                        --this.p1HP;
	                                    }
	                                    this.p2scores = false;
	                                    return false;
	                                }
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                        case 1005:
	                            this.p2defend = false;
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 83:
	                        case 115:
	                            this.p1defend = false;
	                            return false;
	                        case 87:
	                        case 119:
	                            this.p1attack = false;
	                            if (this.p1scores) {
	                                if (this.fSuperSlime && this.p1goingsuper >= 4) {
	                                    this.p2HP -= 2;
	                                }
	                                else {
	                                    --this.p2HP;
	                                }
	                                this.p1scores = false;
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay && this.testButton(var1.x, var1.y)) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.p1Score = 0;
	                        this.p2Score = 0;
	                        this.promptMsg = "";
	                        this.paint(this.getGraphics());
	                        try {
	                            yield shims_1.Thread.sleep(100);
	                        }
	                        catch (var2) {
	                        }
	                        ;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Boxing Slime by Mohamed Seyam");
	                    this.requestFocus();
	            }
	            return false;
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.initStuff();
	        this.promptMsg = "Click on an option to play...";
	        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    initStuff() {
	        this.p1lookingright = true;
	        this.p1lookingleft = false;
	        this.p2lookingright = false;
	        this.p2lookingleft = true;
	        this.p1attack = false;
	        this.p2attack = false;
	        this.p1defend = false;
	        this.p2defend = false;
	        this.p1HP = 10;
	        this.p2HP = 10;
	        this.p1goingsuper = 0;
	        this.p2goingsuper = 0;
	        this.fEndGame = true;
	        this.p1X = 200;
	        this.p1Y = 0;
	        this.p2X = 800;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.playOnTicks = 10;
	        this.fPlayOn = false;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.JUMPVEL = this.fSuperSlime ? 65 : 31;
	        this.SLIMEVEL = this.fSuperSlime ? 16 : 8;
	        this.GRAVITY = this.fSuperSlime ? 8 : 2;
	    }
	    method_rn_Boxing_p_1(var1) {
	        shims_1.System.out.println(var1);
	    }
	    paint(var1) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.drawScores();
	        if (!this.fInPlay) {
	            this.DrawSlimers();
	            this.drawButtons();
	        }
	        this.DrawGoals();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var var2 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fSuperSlime) {
	                this.screen.drawString("Super Slime Boxing!", (this.nWidth / 2 | 0) - (var2.stringWidth("Super Slime Boxing!") / 2 | 0), (this.nHeight / 2 | 0) - var2.getHeight());
	            }
	            else {
	                this.screen.drawString("Slime Boxing!", (this.nWidth / 2 | 0) - (var2.stringWidth("Slime Boxing!") / 2 | 0), (this.nHeight / 2 | 0) - var2.getHeight());
	            }
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            var2 = this.screen.getFontMetrics();
	            this.screen.drawString("Original Code by Quin Pendragon", (this.nWidth / 2 | 0) - (var2.stringWidth("Original Code by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + var2.getHeight() * 2);
	            this.screen.drawString("Modified by Mohamed Seyam", (this.nWidth / 2 | 0) - (var2.stringWidth("Modified by Mohamed Seyam") / 2 | 0), (this.nHeight / 2 | 0) + var2.getHeight() * 2 + 20);
	            this.screen.drawString("October 11, 2003", (this.nWidth / 2 | 0) - (var2.stringWidth("October 11, 2003") / 2 | 0), (this.nHeight / 2 | 0) + var2.getHeight() * 2 + 40);
	        }
	        this.flip();
	    }
	    promptBox(var1, var2) {
	        var var3 = this.screen.getFontMetrics();
	        var var4 = var3.stringWidth(var1);
	        var var5 = var3.stringWidth(var2);
	        var var6 = var4 > var5 ? var4 : var5;
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect((this.nWidth / 2 | 0) - (var6 / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), var6 + 40, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(var1, (this.nWidth / 2 | 0) - (var4 / 2 | 0), (this.nHeight * 9 / 20 | 0));
	        this.screen.drawString(var2, (this.nWidth / 2 | 0) - (var5 / 2 | 0), (this.nHeight * 11 / 20 | 0));
	        this.flip();
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.worldCupRound = 0;
	            do {
	                this.initStuff();
	                this.replayPos = this.replayStart = 0;
	                this.scoringRun = 0;
	                this.fP1Touched = this.fP2Touched = false;
	                this.gameTime = 0;
	                this.startTime = shims_1.System.currentTimeMillis();
	                this.fEndGame = false;
	                this.fCanChangeCol = false;
	                this.mousePressed = false;
	                this.gameTime = Math.round(this.gameLength);
	                this.fInPlay = true;
	                this.fEndGame = false;
	                if (this.worldCup) {
	                    this.paint(this.getGraphics());
	                    do {
	                        this.p2Col = ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);
	                    } while ((this.p1Col === this.p2Col));
	                    var var1 = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
	                    switch ((this.worldCupRound)) {
	                        case 0:
	                            this.promptBox("Qualifying Round", var1);
	                            this.gameLength = 30000;
	                            break;
	                        case 1:
	                            this.promptBox("Quarter Finals", var1);
	                            this.gameLength = 120000;
	                            break;
	                        case 2:
	                            this.promptBox("Semi-Finals", var1);
	                            this.gameLength = 120000;
	                            break;
	                        case 3:
	                            this.promptBox("Tournament Final", var1);
	                            this.gameLength = 300000;
	                    }
	                    try {
	                        yield shims_1.Thread.sleep(4000);
	                    }
	                    catch (var3) {
	                    }
	                    ;
	                    this.repaint();
	                    this.flip();
	                }
	                while ((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1HP === this.p2HP && this.p1HP > 0 && this.p2HP > 0)) {
	                    this.gameTime = this.startTime + Math.round(this.gameLength) - shims_1.System.currentTimeMillis();
	                    if (this.gameTime < 0) {
	                        this.gameTime = 0;
	                    }
	                    var var10000;
	                    if (this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1HP === this.p2HP) {
	                        if (this.p1Score === 0) {
	                            var10000 = " nil";
	                        }
	                        else {
	                            (new shims_1.StringBuffer(" ")).append(this.p1Score).toString();
	                        }
	                        this.promptBox("Both players have the same amount of HP.", "And the game goes into extra time...");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var6) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                        this.startTime += 30000;
	                        this.gameTime += 30000;
	                        this.fExtraTime = true;
	                    }
	                    else if (this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1HP === this.p2HP) {
	                        this.fGoldenGoal = true;
	                        if (this.p1Score === 0) {
	                            var10000 = " nil";
	                        }
	                        else {
	                            (new shims_1.StringBuffer(" ")).append(this.p1Score).toString();
	                        }
	                        this.promptBox("Both players have the same HP again.", "The next player to land a punch will win the match!");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var5) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                    }
	                    this.SaveReplayData();
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    this.DrawGoals();
	                    this.DrawStatus();
	                    if (this.p1HP <= 0 || this.p2HP <= 0) {
	                        break;
	                    }
	                    this.flip();
	                    if (this.playOnTicks === 0 || this.p1TouchingGoal > 60 || this.p2TouchingGoal > 60) {
	                        var var9 = shims_1.System.currentTimeMillis();
	                        if (this.p1TouchingGoal > 60) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.p2TouchingGoal > 60) {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.nScoreX < 500) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
	                        }
	                        else {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
	                        }
	                        this.drawPrompt();
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.flip();
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var8) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.playOnTicks = 10;
	                        this.fPlayOn = false;
	                        this.startTime += shims_1.System.currentTimeMillis() - var9;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p1YV = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p2YV = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.repaint();
	                    }
	                    if (this.gameThread != null) {
	                        try {
	                            if (this.fPlayOn) {
	                                yield shims_1.Thread.sleep(120);
	                            }
	                            else {
	                                yield shims_1.Thread.sleep(20);
	                            }
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                    }
	                }
	                ;
	                this.fEndGame = true;
	                if (this.fPlayOn) {
	                    if (this.nScoreX < 500) {
	                        ++this.p2Score;
	                        this.promptMsg = this.slimeColText[this.p2Col] + " scores at the last second!";
	                    }
	                    else {
	                        ++this.p1Score;
	                        this.promptMsg = this.slimeColText[this.p1Col] + " scores at the final whistle!";
	                    }
	                    this.drawPrompt();
	                }
	                else {
	                    this.drawPrompt("And that\'s the end!", 0);
	                }
	                if (this.worldCup) {
	                    if (this.p1HP === this.p2HP) {
	                        this.drawPrompt("It\'s a draw at full time, here at Slime Arena!", 1);
	                        this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
	                        this.worldCup = false;
	                        this.flip();
	                    }
	                    else if (this.p1HP >= this.p2HP) {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the Tournament!", 1);
	                                break;
	                            case 1:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
	                                break;
	                            case 2:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
	                                break;
	                            case 3:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " wins the Tournament!!!!!", 1);
	                        }
	                        if (this.worldCupRound === 3) {
	                            this.worldCup = false;
	                            this.promptBox("You win the Tournament!!!", "Congratulations!");
	                        }
	                        else {
	                            ++this.worldCupRound;
	                        }
	                    }
	                    else {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                            case 1:
	                                this.promptBox("You have been eliminated.", "Goodbye.");
	                                break;
	                            case 2:
	                                this.promptBox("You have been knocked out of the semifinals.", "You played well.");
	                                break;
	                            case 3:
	                                this.promptBox("You came second.", "Are you satisfied with that?");
	                        }
	                        this.worldCup = false;
	                    }
	                }
	                else if (this.p1HP === this.p2HP) {
	                    this.drawPrompt("It\'s a draw at full time, here at Slime Arena!", 1);
	                }
	                else if (this.p1HP < this.p2HP) {
	                    this.drawPrompt(this.slimeColText[this.p2Col] + " def. " + this.slimeColText[this.p1Col], 1);
	                }
	                else if (this.p2HP < this.p1HP) {
	                    this.drawPrompt(this.slimeColText[this.p1Col] + " def. " + this.slimeColText[this.p2Col], 1);
	                }
	                this.flip();
	                try {
	                    yield shims_1.Thread.sleep(5000);
	                }
	                catch (var4) {
	                }
	                ;
	                this.initStuff();
	            } while ((this.worldCup));
	            this.fCanChangeCol = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    testButton(var1, var2) {
	        for (var var3 = 0; var3 < 5; ++var3) {
	            if (var1 > ((2 * var3 + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) && var1 < ((2 * var3 + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) && var2 > (this.nHeight * 2 / 10 | 0) && var2 < (this.nHeight * 3 / 10 | 0)) {
	                if (var3 === 4) {
	                    this.gameLength = 120000;
	                    this.worldCup = true;
	                }
	                else {
	                    this.gameLength = (1 << var3) * 60000;
	                    this.worldCup = false;
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    toggleBuffering() {
	        if (this.doubleBuffered != true) {
	            this.screen = this.backBuffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        else {
	            this.screen = this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        this.repaint();
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Boxing;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class Slime2P extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 750;
	        this.recommended_height = 375;
	        this.p3X = 952;
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1X = 0;
	        this.p1Y = 0;
	        this.p2X = 0;
	        this.p2Y = 0;
	        this.p3Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldX = 0;
	        this.p2OldY = 0;
	        this.p3OldY = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p3YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.fEndGame = false;
	        this.p1Diam = 0;
	        this.p2Diam = 0;
	        this.ballRad = 0;
	        this.bounces = 0;
	        this.fEndOfOver = false;
	        this.fHitBackWall = false;
	        this.p1XMin = 0;
	        this.p2XMin = 0;
	        this.p2XMax = 0;
	        this.ballXMax = 0;
	        this.p1Touches = 0;
	        this.ballCount = 0;
	        this.postPos = 0;
	        this.bowlingCrease = 0;
	        this.runningCrease = 0;
	        this.battingCrease = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.inns = 0;
	        this.wicketPenalty = 0;
	        this.fNoBall = false;
	        this.overs = 0;
	        this.stillFrames = 0;
	        this.thisBall = 0;
	        this.buffered = false;
	        this.slimeColours = [shims_1.Color.fromString("yellow"), new shims_1.Color(128, 128, 255), new shims_1.Color(164, 164, 255), shims_1.Color.fromString("black"), shims_1.Color.fromString("green"), new shims_1.Color(0, 162, 0), new shims_1.Color(0, 0, 210), new shims_1.Color(128, 78, 0), shims_1.Color.fromString("red")];
	        this.slimeColours2 = [new shims_1.Color(0, 162, 0), shims_1.Color.fromString("white"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("gray"), shims_1.Color.fromString("white"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("white"), shims_1.Color.fromString("yellow")];
	        this.slimeColText = ["Australia ", "England ", "India ", "New Zealand ", "Pakistan ", "South Africa ", "Sri Lanka ", "West Indies ", "Zimbabwe "];
	        this.slimeColAbbr = ["AUS", "ENG", "IND", "NZ", "PAK", "RSA", "SL", "WI", "ZIM"];
	        this.p1Diam = 100;
	        this.p2Diam = 100;
	        this.ballRad = 25;
	        this.BALL_COL = shims_1.Color.fromString("white");
	        this.COURT_COL = new shims_1.Color(0, 160, 0);
	        this.DAY_COL = new shims_1.Color(85, 85, 255);
	        this.NIGHT_COL = new shims_1.Color(0, 0, 128);
	        this.SKY_COL = this.DAY_COL;
	        this.fHitBackWall = false;
	        this.postPos = 900;
	        this.bowlingCrease = 250;
	        this.runningCrease = 450;
	        this.battingCrease = 850;
	        this.inns = 1;
	        this.wicketPenalty = 5;
	        this.fNoBall = false;
	        this.overs = 5;
	        this.COMM_FOUR = ["Along the carpet it goes for four.", "Back past the bowler for four.", "Picks the gap nicely and into the fence it goes for four.", "Shot!", "Four more added to the total.", "It\'s certainly a batsman\'s paradise out there today.", "... and the umpire waves his arm once more.", "Exactly not what the bowler had planned.", "Well it\'s bounced up off the rope and smacked some guy in the face!"];
	        this.COMM_FOURTOUCHED = ["Terrible fielding effort there.", "The bowler won\'t be pleased with that effort.", "Well that should never have been a four."];
	        this.COMM_SIX = ["He\'s carving them up like a Christmas cake!", "That\'s come right orf the meat of the bat.", "Wabam!", "He\'s hit that one very hored indeed.", "He\'s smacked that one.", "It\'s gone all the way for six!", "He could be a hero if he keeps batting like this.", "Six more to the score.", "Well it wasn\'t pretty but it certainly was effective.", "It\'s not Mark Waugh carting Vettori onto the roof of the stand, but it\'s still a six.", "The bowler\'s not happy but whoever caught that in the crowd just won some money.", "Looks like he\'s chasing Andrew Symonds\' record here..."];
	        this.COMM_SIXTOUCHED = ["Oh no, he\'s done a Paul Reiffel!", "Well that\'s six more on top of the no ball, he can\'t be happy."];
	        this.COMM_STUMPED = ["Stumped him!", "A fine example of wicket keeping there. Excellent stuff.", "There goes the red light! What quick hands this keeper has!"];
	        this.COMM_RUNOUT = ["He\'s run out! What a tragedy!", "... and there\'s the red light. He\'s out.", "Allan Donald would be pleased with that effort.", "Well the fielder\'s decided to chance his arm, and it\'s come off!", "The bails were off in a flash, he never had a chance.", "Poor calling there, he deserved to get out.", "Well what else do you expect if you run like Ranatunga?"];
	        this.COMM_BOWLED = ["Bowled him neck and crop.", "Tremendous delivery, he really had no idea about that.", "What a marvellous ball!", "That\'s a ripsnorter of a ball!", "I think that\'s just knocked Joe the stumpcameraman out.", "Well the bowler\'s certainly had his weeties this morning.", "There\'s the death rattle.", "That\'s gotta be a contender for today\'s fastest ball.", "Straight through the gate. The batsman won\'t be pleased with that.", "Completely bamboozled.", "A wonderful spell of bowling, this."];
	        this.COMM_PLAYEDON = ["He\'s played on!", "A magnificent chop shot, oh wait, it\'s hit the stumps.", "He\'s done an Adam Gilchrist!"];
	        this.COMM_CAUGHT = ["He\'s hit it straight down his throat.", "A safe pair of hands, he doesn\'t drop those.", "What a magnificent shot! No, he\'s been caught!", "A marvellous catch, that.", "... and he takes a straightforward catch.", "Well, they say \"catches win matches\".", "Caught, yes!", "Well, he\'s picked out the only fielder in front of the bat!", "Can\'t be happy with that shot.", "What a shame, we can\'t use the snickometer on that one it\'s so damned obvious."];
	        this.COMM_CTBEHIND = ["... the keeper gobbles up the catch.", "... and the snickometer shows that that\'s clearly out.", "Excellent line and length, he\'s got another edge.", "Yes, there was some bat in that, he\'s gone!"];
	        this.COMM_OUT_GENERIC = ["Got him, yes!", "It\'s all happening here!", "A marvellous effort, that!", "Oh dear.", "Gone!", "What a magnificent fielding side this team is.", "Yes, another one! He\'s a hero, this man!"];
	        this.buffered = false;
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.buffer = this.createImage(this.nWidth, this.nHeight);
	        this.fInPlay = false;
	        this.fEndGame = true;
	        this.fEndOfOver = false;
	        this.fCanChangeCol = true;
	        this.promptMsg = "Click team names to select teams, then choose an innings length to start!";
	        this.screen = this.buffered ? this.buffer.getGraphics() : this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        this.p1Col = 0;
	        this.p2Col = 1;
	        this.inns = 0;
	    }
	    paint(var1) {
	        var var2 = this.buffered ? this.buffer.getGraphics() : this.getGraphics();
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        var2.setColor(this.SKY_COL);
	        var2.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        var2.setColor(this.COURT_COL);
	        var2.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        var2.setColor(shims_1.Color.fromString("white"));
	        var2.fillRect((this.nWidth * 18 / 20 | 0) - 2, (this.nHeight * 7 / 10 | 0), 3, (this.nHeight / 10 | 0));
	        var2.fillRect((this.nWidth * this.bowlingCrease / 1000 | 0) - 1, (this.nHeight * 4 / 5 | 0), 2, 5);
	        var2.fillRect((this.nWidth * this.runningCrease / 1000 | 0) - 1, (this.nHeight * 4 / 5 | 0), 2, 5);
	        var2.fillRect((this.nWidth * this.battingCrease / 1000 | 0) - 1, (this.nHeight * 4 / 5 | 0), 2, 5);
	        this.drawPrompt();
	        var var3;
	        if (!this.fInPlay && this.fEndGame) {
	            var3 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString("CricketSlime", (this.nWidth / 2 | 0) - (var3.stringWidth("CricketSlime") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 7);
	            this.screen.setColor(this.slimeColours[this.p1Col]);
	            this.screen.fillRect((this.nWidth / 3 | 0) - (var3.stringWidth(this.slimeColText[this.p1Col]) / 2 | 0) - 10, (this.nHeight / 2 | 0) - var3.getAscent() * 2, var3.stringWidth(this.slimeColText[this.p1Col]) + 20, var3.getAscent() * 2);
	            this.screen.setColor(this.slimeColours2[this.p1Col]);
	            this.screen.drawString(this.slimeColText[this.p1Col], (this.nWidth / 3 | 0) - (var3.stringWidth(this.slimeColText[this.p1Col]) / 2 | 0), (this.nHeight / 2 | 0) - (var3.getAscent() / 2 | 0));
	            this.screen.setColor(this.slimeColours[this.p2Col]);
	            this.screen.fillRect((this.nWidth * 2 / 3 | 0) - (var3.stringWidth(this.slimeColText[this.p2Col]) / 2 | 0) - 10, (this.nHeight / 2 | 0) - var3.getAscent() * 2, var3.stringWidth(this.slimeColText[this.p2Col]) + 20, var3.getAscent() * 2);
	            this.screen.setColor(this.slimeColours2[this.p2Col]);
	            this.screen.drawString(this.slimeColText[this.p2Col], (this.nWidth * 2 / 3 | 0) - (var3.stringWidth(this.slimeColText[this.p2Col]) / 2 | 0), (this.nHeight / 2 | 0) - (var3.getAscent() / 2 | 0));
	            var2.setColor(shims_1.Color.fromString("white"));
	            this.screen.setColor(this.SKY_COL);
	            for (var var4 = 0; var4 < 5; ++var4) {
	                var2.fillRect((this.nWidth / 4 | 0) + (var4 * this.nWidth / 10 | 0) + 5, (this.nHeight * 2 / 3 | 0) - (var3.getAscent() * 3 / 2 | 0), (this.nWidth / 10 | 0) - 10, 2 * var3.getAscent());
	                this.screen.drawString(4 * (var4 + 1) + " overs", (this.nWidth * 3 / 10 | 0) + (var4 * this.nWidth / 10 | 0) - (var3.stringWidth(4 * var4 + 1 + " overs") / 2 | 0), (this.nHeight * 2 / 3 | 0) - var3.getAscent() * 0);
	            }
	            var3 = var2.getFontMetrics();
	            var2.setColor(shims_1.Color.fromString("white"));
	            var2.drawString("Coding by Quin Pendragon and Daniel Wedge", (this.nWidth / 2 | 0) - (var3.stringWidth("Coding by Quin Pendragon and Daniel Wedge") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 6);
	            var2.drawString("and input from Scott Brown, Damian Versaci and Tim Hayward", (this.nWidth / 2 | 0) - (var3.stringWidth("and input from Scott Brown, Damian Versaci and Tim Hayward") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 5);
	            this.drawScores();
	            var2.drawString("Batting first", (this.nWidth / 3 | 0) - (var3.stringWidth("Batting first") / 2 | 0), (this.nHeight / 2 | 0) - var3.getAscent() * 3);
	            var2.drawString("Bowling first", (this.nWidth * 2 / 3 | 0) - (var3.stringWidth("Bowling first") / 2 | 0), (this.nHeight / 2 | 0) - var3.getAscent() * 3);
	            var2.drawString("Click on innings length to start...", (this.nWidth / 2 | 0) - (var3.stringWidth("Click on innings length to start...") / 2 | 0), (this.nHeight * 2 / 3 | 0) - var3.getHeight() * 2);
	            this.screen.setColor(this.SKY_COL);
	        }
	        else if (!this.fInPlay && !this.fEndGame && !this.fEndOfOver) {
	            var3 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString("Change of innings", (this.nWidth / 2 | 0) - (var3.stringWidth("Change of innings") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 5);
	            this.drawScores();
	        }
	        else if (this.fEndOfOver) {
	            var3 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            switch ((this.inns)) {
	                case 1:
	                    this.drawScores();
	                    this.screen.drawString("Over", (this.nWidth / 2 | 0) - (var3.stringWidth("Over") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 3);
	                    this.screen.drawString("Last over: " + this.thisOver, (this.nWidth / 2 | 0) - (var3.stringWidth("Last over: " + this.thisOver) / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight());
	                    break;
	                case 2:
	                    this.drawScores();
	                    this.screen.drawString("Over", (this.nWidth / 2 | 0) - (var3.stringWidth("Over") / 2 | 0), var3.getHeight());
	                    this.screen.drawString("Last over: " + this.thisOver, (this.nWidth / 2 | 0) - (var3.stringWidth("Last over: " + this.thisOver) / 2 | 0), var3.getHeight() * 2);
	                    this.drawWorm();
	                    this.screen.drawString("After " + (this.ballCount / 6 | 0) + ((this.ballCount / 6 | 0) === 1 ? " over..." : " overs..."), (this.nWidth / 2 | 0) - (var3.stringWidth("After " + (this.ballCount / 6 | 0) + ((this.ballCount / 6 | 0) === 1 ? " over..." : " overs...")) / 2 | 0), var3.getHeight() * 4);
	                    this.screen.drawString(this.slimeColText[this.p2Col].toUpperCase(), (this.nWidth / 3 | 0), var3.getHeight() * 5);
	                    this.screen.drawString(/* valueOf */ new String(this.p2Score).toString(), (this.nWidth * 2 / 3 | 0) - var3.stringWidth(/* valueOf */ new String(this.p2Score).toString()), var3.getHeight() * 5);
	                    this.screen.drawString(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", (this.nWidth / 3 | 0), var3.getHeight() * 6);
	                    this.screen.drawString(/* valueOf */ new String(this.p1bxb[this.ballCount - 1]).toString(), (this.nWidth * 2 / 3 | 0) - var3.stringWidth(/* valueOf */ new String(this.p1bxb[this.ballCount - 1]).toString()), var3.getHeight() * 6);
	            }
	        }
	        else {
	            this.drawScores();
	            this.drawWorm();
	        }
	        if (this.buffered) {
	            var1.drawImage(this.buffer, 0, 0, null);
	        }
	    }
	    handleEvent(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((var1.id)) {
	                case 401:
	                case 403:
	                    if (!this.fEndGame) {
	                        switch ((var1.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                break;
	                            case 65:
	                            case 97:
	                                this.p1XV = -8;
	                                break;
	                            case 66:
	                            case 98:
	                                if (!this.fEndOfOver) {
	                                    this.nextBall();
	                                }
	                                break;
	                            case 68:
	                            case 100:
	                                this.p1XV = 8;
	                                break;
	                            case 69:
	                            case 81:
	                            case 101:
	                            case 113:
	                                if (this.p3Y === 0) {
	                                    this.p3YV = 31;
	                                }
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (this.p2Y === 0) {
	                                    this.p2YV = 31;
	                                }
	                                break;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                this.p2XV = -8;
	                                break;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                this.p2XV = 8;
	                                break;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = 31;
	                                }
	                                break;
	                            case 94:
	                                this.buffered = !this.buffered;
	                                this.screen = this.buffered ? this.buffer.getGraphics() : this.getGraphics();
	                                this.repaint();
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((var1.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (this.fEndOfOver) {
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                        this.thisOver = "";
	                        this.fEndOfOver = false;
	                        this.promptMsg = "";
	                        this.repaint();
	                    }
	                    else if (!this.fInPlay) {
	                        if (!this.fEndGame) {
	                            this.fInPlay = true;
	                            ++this.inns;
	                            var var6 = this.p1Col;
	                            this.p1Col = this.p2Col;
	                            this.p2Col = var6;
	                            var var7 = this.p1Score;
	                            this.p1Score = this.p2Score;
	                            this.p2Score = var7;
	                            var var8 = this.p1bxb;
	                            this.p1bxb = this.p2bxb;
	                            this.p2bxb = var8;
	                            this.SKY_COL = this.NIGHT_COL;
	                        }
	                        else {
	                            var var2 = this.screen.getFontMetrics();
	                            if (var1.y > (this.nHeight * 2 / 3 | 0) - (var2.getAscent() * 3 / 2 | 0) && var1.y < (this.nHeight * 2 / 3 | 0) + (var2.getAscent() / 2 | 0)) {
	                                for (var var3 = 0; var3 < 5 && !this.fInPlay; ++var3) {
	                                    if (var1.x > (this.nWidth / 4 | 0) + (var3 * this.nWidth / 10 | 0) + 5 && var1.x < (this.nWidth / 4 | 0) + ((var3 + 1) * this.nWidth / 10 | 0) - 5) {
	                                        this.fEndGame = false;
	                                        this.fInPlay = true;
	                                        this.inns = 1;
	                                        this.p1Score = this.p2Score = 0;
	                                        var var4 = this.p1Col;
	                                        this.p1Col = this.p2Col;
	                                        this.p2Col = var4;
	                                        this.SKY_COL = this.DAY_COL;
	                                        this.overs = (var3 + 1) * 4;
	                                        this.p1bxb = new Array(this.overs * 6);
	                                        this.p2bxb = new Array(this.overs * 6);
	                                        for (var var5 = 0; var5 < this.overs * 6; ++var5) {
	                                            this.p1bxb[var5] = this.p2bxb[var5] = 0;
	                                        }
	                                    }
	                                }
	                            }
	                            else if (var1.y > (this.nHeight / 2 | 0) - var2.getAscent() * 2 && var1.y < (this.nHeight / 2 | 0)) {
	                                this.drawPrompt("dood", 1);
	                                if (var1.x > (this.nWidth / 3 | 0) - (var2.stringWidth(this.slimeColText[this.p1Col]) / 2 | 0) - 10 && var1.x < (this.nWidth / 3 | 0) + (var2.stringWidth(this.slimeColText[this.p1Col]) / 2 | 0) + 10) {
	                                    while ((true)) {
	                                        this.p1Col = this.p1Col !== this.slimeColours.length - 1 ? this.p1Col + 1 : 0;
	                                        if (this.p1Col !== this.p2Col) {
	                                            this.repaint();
	                                            break;
	                                        }
	                                    }
	                                    ;
	                                }
	                                else if (var1.x > (this.nWidth * 2 / 3 | 0) - (var2.stringWidth(this.slimeColText[this.p2Col]) / 2 | 0) - 10 && var1.x < (this.nWidth * 2 / 3 | 0) + (var2.stringWidth(this.slimeColText[this.p2Col]) / 2 | 0) + 10) {
	                                    while ((true)) {
	                                        this.p2Col = this.p2Col !== this.slimeColours.length - 1 ? this.p2Col + 1 : 0;
	                                        if (this.p1Col !== this.p2Col) {
	                                            this.repaint();
	                                            break;
	                                        }
	                                    }
	                                    ;
	                                }
	                            }
	                        }
	                        if (this.fInPlay) {
	                            this.ballCount = -1;
	                            this.thisOver = "";
	                            this.promptMsg = "";
	                            this.thisBall = 0;
	                            this.nextBall();
	                            this.gameThread = new shims_1.Thread(this);
	                            this.gameThread.start();
	                        }
	                    }
	                    break;
	                case 503:
	                    this.showStatus("CricketSlime, by Danno: http://www.student.uwa.edu.au/~wedgey");
	            }
	            return false;
	        });
	    }
	    nextBall() {
	        this.p1XMin = this.p1X = 200;
	        this.p2XMin = this.p2XMax = this.p2X = 800;
	        this.ballVX = this.ballVY = this.p1Y = this.p2Y = this.p2XV = this.p2YV = this.p3Y = this.p3YV = this.p1XV = this.p1YV = 0;
	        this.ballXMax = this.ballX = 200;
	        this.ballY = 400;
	        this.fP1Touched = this.fP2Touched = false;
	        this.bounces = 0;
	        this.p1Touches = 0;
	        if (this.fNoBall) {
	            ++this.thisBall;
	        }
	        if (this.ballCount >= 0) {
	            this.p2bxb[this.ballCount] = this.p2Score += Math.round(this.thisBall);
	            if (this.fNoBall) {
	                this.thisOver = this.thisOver + "N";
	            }
	            if (this.thisBall !== -this.wicketPenalty && this.thisBall !== -this.wicketPenalty + 1) {
	                if (this.thisBall === 0) {
	                    this.thisOver = this.thisOver + ".";
	                }
	                else if (!this.fNoBall || this.thisBall !== -this.wicketPenalty + 1 && this.thisBall !== 0) {
	                    this.thisOver = this.thisOver + (!this.fNoBall ? this.thisBall : this.thisBall - 1);
	                }
	            }
	            else {
	                this.thisOver = this.thisOver + "W";
	            }
	            this.thisOver = this.thisOver + " ";
	        }
	        this.thisBall = 0;
	        if (!this.fNoBall) {
	            ++this.ballCount;
	            if (this.ballCount % 6 === 0 && this.ballCount !== 0 && this.ballCount !== this.overs * 6) {
	                this.fEndOfOver = true;
	                this.gameThread = null;
	                this.promptMsg = "Click the mouse to continue...";
	            }
	        }
	        this.fNoBall = false;
	        this.fHitBackWall = false;
	        this.stillFrames = 0;
	        this.repaint();
	    }
	    getMinScore(var1) {
	        var var2 = 0;
	        for (var var4 = 0; var4 < this.overs * 6; ++var4) {
	            if ((var1 === 1 ? this.p1bxb[var4] : this.p2bxb[var4]) < var2) {
	                var2 = var1 === 1 ? this.p1bxb[var4] : this.p2bxb[var4];
	            }
	        }
	        return var2;
	    }
	    getMaxScore(var1) {
	        var var2 = 0;
	        for (var var4 = 0; var4 < this.overs * 6; ++var4) {
	            if ((var1 === 1 ? this.p1bxb[var4] : this.p2bxb[var4]) > var2) {
	                var2 = var1 === 1 ? this.p1bxb[var4] : this.p2bxb[var4];
	            }
	        }
	        return var2;
	    }
	    MoveSlimers() {
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > this.postPos - 50 - 5) {
	            this.p1X = this.postPos - 50 - 5;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= 2;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        if (this.ballX === 200 && this.ballVX === 200 && this.p1X < this.p1XMin) {
	            this.p1XMin = this.p1X;
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > this.postPos - 50 - 5) {
	            this.p2X = this.postPos - 50 - 5;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= 2;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2X < this.p2XMin && this.p2Y === 0) {
	            this.p2XMin = this.p2X;
	        }
	        else if (this.p2X > this.p2XMax && this.p2Y === 0) {
	            this.p2XMax = this.p2X;
	        }
	        if (this.p2X - 50 <= this.runningCrease && this.p2XMax + 50 >= this.battingCrease && (this.fP2Touched || this.fHitBackWall) && this.p2Y === 0) {
	            ++this.thisBall;
	            this.p2XMin = this.p2XMax = this.p2X;
	            this.drawScores();
	        }
	        else if (this.p2XMin - 50 <= this.runningCrease && this.p2X + 50 >= this.battingCrease && (this.fP2Touched || this.fHitBackWall) && this.p2Y === 0) {
	            ++this.thisBall;
	            this.p2XMin = this.p2XMax = this.p2X;
	            this.drawScores();
	        }
	        if (this.p3YV !== 0) {
	            this.p3Y += this.p3YV -= 2;
	        }
	        if (this.p3Y < 0) {
	            this.p3Y = 0;
	            this.p3YV = 0;
	        }
	    }
	    DrawSlimers() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var1 = (this.ballX * this.nWidth / 1000 | 0);
	            var var2 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	            var var3 = (this.nWidth * 100 / 1000 | 0);
	            var var4 = (this.nHeight * 100 / 1000 | 0);
	            var var5 = (this.p1OldX * this.nWidth / 1000 | 0) - (var3 / 2 | 0);
	            var var6 = (4 * this.nHeight / 5 | 0) - var4 - (this.p1OldY * this.nHeight / 1000 | 0);
	            this.screen.setColor(this.SKY_COL);
	            this.screen.fillRect(var5, var6, var3, var4);
	            var3 = (this.nWidth * 100 / 1000 | 0);
	            var4 = (this.nHeight * 100 / 1000 | 0);
	            var5 = (this.p2OldX * this.nWidth / 1000 | 0) - (var3 / 2 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - var4 - (this.p2OldY * this.nHeight / 1000 | 0);
	            this.screen.fillRect(var5, var6, var3, var4);
	            var3 = (this.nWidth / 10 | 0);
	            var4 = (this.nHeight / 10 | 0);
	            var5 = (this.p3X * this.nWidth / 1000 | 0) - (var3 / 2 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - var4 - (this.p3OldY * this.nHeight / 1000 | 0);
	            this.screen.fillRect(var5, var6, var3, var4);
	            var var7 = 5;
	            var var8 = ((25 + var7) * this.nHeight / 1000 | 0);
	            this.screen.fillOval(var1 - var8, var2 - var8, 2 * var8, 2 * var8);
	            var3 = (this.nWidth * 100 / 1000 | 0);
	            var4 = (this.nHeight * 100 / 1000 | 0);
	            var5 = (this.p1X * this.nWidth / 1000 | 0) - (var3 / 2 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - var4 - (this.p1Y * this.nHeight / 1000 | 0);
	            this.screen.setColor(this.slimeColours[this.p1Col]);
	            this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);
	            var var9 = this.p1X + 38;
	            var var10 = this.p1Y - 60;
	            var5 = (var9 * this.nWidth / 1000 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - var4 - (var10 * this.nHeight / 1000 | 0);
	            var var11 = var5 - var1;
	            var var12 = var6 - var2;
	            var var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	            if (var13 === 0) {
	                var13 = 1;
	            }
	            var var14 = ((this.nWidth / 50 | 0) * 100 / 100 | 0);
	            var var15 = ((this.nHeight / 25 | 0) * 100 / 100 | 0);
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillOval(var5 - (4 * var11 / var13 | 0) - (3 * var14 / 4 | 0), var6 - (4 * var12 / var13 | 0) - (3 * var15 / 4 | 0), (var14 / 2 | 0), (var15 / 2 | 0));
	            var3 = (this.nWidth * 100 / 1000 | 0);
	            var4 = (this.nHeight * 100 / 1000 | 0);
	            var5 = (this.p2X * this.nWidth / 1000 | 0) - (var3 / 2 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - (100 * this.nHeight / 1000 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	            this.screen.setColor(this.slimeColours[this.p2Col]);
	            this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);
	            var9 = this.p2X - 18;
	            var10 = this.p2Y - 60;
	            var5 = (var9 * this.nWidth / 1000 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - var4 - (var10 * this.nHeight / 1000 | 0);
	            var11 = var5 - var1;
	            var12 = var6 - var2;
	            var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	            if (var13 === 0) {
	                var13 = 1;
	            }
	            var14 = ((this.nWidth / 50 | 0) * 100 / 100 | 0);
	            var15 = ((this.nHeight / 25 | 0) * 100 / 100 | 0);
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillOval(var5 - (4 * var11 / var13 | 0) - (3 * var14 / 4 | 0), var6 - (4 * var12 / var13 | 0) - (3 * var15 / 4 | 0), (var14 / 2 | 0), (var15 / 2 | 0));
	            var3 = (this.nWidth / 10 | 0);
	            var4 = (this.nHeight / 10 | 0);
	            var5 = (this.p3X * this.nWidth / 1000 | 0) - (var3 / 2 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - (100 * this.nHeight / 1000 | 0) - (this.p3Y * this.nHeight / 1000 | 0);
	            this.screen.setColor(this.slimeColours[this.p1Col]);
	            this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);
	            var9 = this.p3X - 18;
	            var10 = this.p3Y - 60;
	            var5 = (var9 * this.nWidth / 1000 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - var4 - (var10 * this.nHeight / 1000 | 0);
	            var11 = var5 - var1;
	            var12 = var6 - var2;
	            var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	            if (var13 === 0) {
	                var13 = 1;
	            }
	            var14 = (this.nWidth / 50 | 0);
	            var15 = (this.nHeight / 25 | 0);
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillOval(var5 - (4 * var11 / var13 | 0) - (3 * var14 / 4 | 0), var6 - (4 * var12 / var13 | 0) - (3 * var15 / 4 | 0), (var14 / 2 | 0), (var15 / 2 | 0));
	            yield this.MoveBall();
	        });
	    }
	    MoveBall() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var1 = 5;
	            var var2 = 15;
	            var var3 = 22;
	            var var4 = 19;
	            var var5 = ((25 + var1) * this.nHeight / 1000 | 0);
	            var var6 = (this.ballOldX * this.nWidth / 1000 | 0);
	            var var7 = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	            this.ballY += --this.ballVY;
	            this.ballX += this.ballVX;
	            if (this.ballVX >= 2 || this.ballVY >= 2 || this.p1XV + this.p1YV + this.p2XV + this.p2YV + this.p3YV !== 0 || this.ballX === 200 || this.p2X > this.runningCrease + 50 && this.p2X < this.battingCrease - 50) {
	                this.stillFrames = 0;
	            }
	            else if (this.stillFrames++ > 75) {
	                this.promptMsg = " ";
	            }
	            if (this.ballY < 35) {
	                this.ballY = 35;
	                this.ballVY = (-this.ballVY * 2 / 3 | 0);
	                this.ballVX = (this.ballVX * 19 / 20 | 0);
	                ++this.bounces;
	                if (!this.fP2Touched && this.bounces > 2 && !this.fHitBackWall) {
	                    this.fNoBall = true;
	                    this.drawPrompt("No ball!", 2);
	                }
	            }
	            if (this.ballX > this.postPos && !this.fP2Touched) {
	                this.fP2Touched = true;
	            }
	            if (this.ballY > 180 && this.ballX > this.battingCrease - 50 && this.p2X >= this.battingCrease - 50 && !this.fP2Touched && this.p2XMin > this.battingCrease - 75) {
	                this.fNoBall = true;
	                this.drawPrompt("No ball!", 2);
	            }
	            if (!this.fEndGame) {
	                var var8 = 2 * (this.ballX - this.p1X);
	                var var9 = this.ballY - this.p1Y;
	                var var10 = (Math.sqrt((var8 * var8 + var9 * var9)) | 0);
	                var var11 = this.ballVX - this.p1XV;
	                var var12 = this.ballVY - this.p1YV;
	                var var13;
	                if (var9 > 0 && var10 < 125 && var10 > var1) {
	                    var13 = ((var8 * var11 + var9 * var12) / var10 | 0);
	                    this.ballX = this.p1X + (62 * var8 / var10 | 0);
	                    this.ballY = this.p1Y + (125 * var9 / var10 | 0);
	                    if (var13 <= 0) {
	                        this.ballVX += this.p1XV - (2 * var8 * var13 / var10 | 0);
	                        if (this.ballVX < -var2) {
	                            this.ballVX = -var2;
	                        }
	                        if (this.ballVX > var2) {
	                            this.ballVX = var2;
	                        }
	                        this.ballVY += this.p1YV - (2 * var9 * var13 / var10 | 0);
	                        if (this.ballVY < -var3) {
	                            this.ballVY = -var3;
	                        }
	                        if (this.ballVY > var3) {
	                            this.ballVY = var3;
	                        }
	                    }
	                    if (this.p1Touches > 0 && !this.fP2Touched && this.ballOldX === this.ballXMax && !this.fHitBackWall) {
	                        this.drawPrompt("No ball!", 2);
	                        this.fNoBall = true;
	                    }
	                    if (this.fP2Touched) {
	                        this.fP1Touched = true;
	                    }
	                    if (this.p1X !== 200) {
	                        ++this.p1Touches;
	                    }
	                    if (this.fP2Touched && this.bounces === 0 && !this.fNoBall && !this.fHitBackWall) {
	                        this.promptMsg = this.COMM_CAUGHT[((this.COMM_CAUGHT.length * Math.random()) | 0)];
	                        this.thisBall = -this.wicketPenalty;
	                    }
	                }
	                if (!this.fP2Touched) {
	                    var8 = 2 * (this.ballX - this.p2X);
	                    var9 = this.ballY - this.p2Y;
	                    var10 = (Math.sqrt((var8 * var8 + var9 * var9)) | 0);
	                    var11 = this.ballVX - this.p2XV;
	                    var12 = this.ballVY - this.p2YV;
	                    if (var9 > 0 && var10 < 125 && var10 > var1 && this.p1Touches > 0) {
	                        var13 = ((var8 * var11 + var9 * var12) / var10 | 0);
	                        this.ballX = this.p2X + (62 * var8 / var10 | 0);
	                        this.ballY = this.p2Y + (125 * var9 / var10 | 0);
	                        if (var13 <= 0) {
	                            this.ballVX += this.p2XV - (2 * var8 * var13 / var10 | 0);
	                            if (this.ballVX < -var4) {
	                                this.ballVX = -var4;
	                            }
	                            if (this.ballVX > var2) {
	                                this.ballVX = var2;
	                            }
	                            this.ballVY += this.p2YV - (2 * var9 * var13 / var10 | 0);
	                            if (this.ballVY < -var3) {
	                                this.ballVY = -var3;
	                            }
	                            if (this.ballVY > var3) {
	                                this.ballVY = var3;
	                            }
	                        }
	                        this.fP2Touched = true;
	                        this.bounces = 0;
	                    }
	                }
	                var8 = 2 * (this.ballX - this.p3X);
	                var9 = this.ballY - this.p3Y;
	                var10 = (Math.sqrt((var8 * var8 + var9 * var9)) | 0);
	                var11 = this.ballVX;
	                var12 = this.ballVY - this.p3YV;
	                if (var9 > 0 && var10 < 125 && var10 > var1) {
	                    var13 = (((var8 * var11 + var9 * var12) / var10 | 0) * 2 / 3 | 0);
	                    this.ballX = this.p3X + (62 * var8 / var10 | 0);
	                    this.ballY = this.p3Y + (125 * var9 / var10 | 0);
	                    if (var13 <= 0) {
	                        this.ballVX += (-2 * var8 * var13 / var10 | 0);
	                        if (this.ballVX < -var4) {
	                            this.ballVX = -var4;
	                        }
	                        if (this.ballVX > var2) {
	                            this.ballVX = var2;
	                        }
	                        this.ballVY += this.p3YV - (2 * var9 * var13 / var10 | 0);
	                        if (this.ballVY < -var3) {
	                            this.ballVY = -var3;
	                        }
	                        if (this.ballVY > var3) {
	                            this.ballVY = var3;
	                        }
	                    }
	                    if (!this.fP1Touched && this.fP2Touched && this.bounces === 0 && !this.fNoBall) {
	                        this.promptMsg = this.COMM_CTBEHIND[((this.COMM_CTBEHIND.length * Math.random()) | 0)];
	                        this.thisBall = -this.wicketPenalty;
	                    }
	                    else if (this.p2X < this.battingCrease - 50 && this.p2X > this.runningCrease + 50 || this.p2Y !== 0) {
	                        if (this.p2XMin - 50 > this.runningCrease && !this.fNoBall && !this.fP1Touched) {
	                            this.promptMsg = this.COMM_STUMPED[((this.COMM_STUMPED.length * Math.random()) | 0)];
	                        }
	                        else {
	                            this.promptMsg = this.COMM_RUNOUT[((this.COMM_RUNOUT.length * Math.random()) | 0)];
	                        }
	                        this.thisBall = -this.wicketPenalty;
	                    }
	                    this.fP1Touched = true;
	                }
	                if (this.ballX < 15) {
	                    this.ballX = 15;
	                    this.ballVX = (-this.ballVX * 2 / 3 | 0);
	                    if (this.fP2Touched && this.bounces === 0 && !this.fHitBackWall) {
	                        this.promptMsg = this.COMM_SIX[((this.COMM_SIX.length * Math.random()) | 0)];
	                        if (this.fP1Touched && Math.random() < 0.7) {
	                            this.promptMsg = this.COMM_SIXTOUCHED[((this.COMM_SIXTOUCHED.length * Math.random()) | 0)];
	                        }
	                        this.drawPrompt(this.promptMsg, 1);
	                        this.promptMsg = "";
	                        this.thisBall += 6;
	                    }
	                    else if (this.fP2Touched && !this.fHitBackWall) {
	                        this.promptMsg = this.COMM_FOUR[((this.COMM_FOUR.length * Math.random()) | 0)];
	                        if (this.fP1Touched && Math.random() < 0.7) {
	                            this.promptMsg = this.COMM_FOURTOUCHED[((this.COMM_FOURTOUCHED.length * Math.random()) | 0)];
	                        }
	                        this.drawPrompt(this.promptMsg, 1);
	                        this.promptMsg = "";
	                        this.thisBall += 4;
	                    }
	                    else if (!this.fP2Touched) {
	                        this.fNoBall = true;
	                        this.drawPrompt("No ball!", 2);
	                    }
	                    if (this.fP2Touched) {
	                        this.fHitBackWall = true;
	                    }
	                }
	                if (this.ballX > 985) {
	                    this.ballX = 985;
	                    this.ballVX = (-this.ballVX * 2 / 3 | 0);
	                    this.fHitBackWall = true;
	                }
	                if (this.ballX > this.postPos - 17 && this.ballX < this.postPos + 17 && this.ballY < 135) {
	                    if ((this.p2X < this.battingCrease - 50 && this.p2X > this.runningCrease + 50 || this.p2Y !== 0) && this.fP1Touched && this.fP2Touched) {
	                        this.promptMsg = this.COMM_RUNOUT[((this.COMM_RUNOUT.length * Math.random()) | 0)];
	                        this.thisBall = -this.wicketPenalty;
	                    }
	                    else if (!this.fNoBall && !this.fHitBackWall && this.p1Touches === 1) {
	                        this.promptMsg = this.COMM_BOWLED[((this.COMM_BOWLED.length * Math.random()) | 0)];
	                        if (this.fP2Touched && Math.random() < 0.5) {
	                            this.promptMsg = this.COMM_PLAYEDON[((this.COMM_PLAYEDON.length * Math.random()) | 0)];
	                        }
	                        this.thisBall = -this.wicketPenalty;
	                    }
	                    this.fHitBackWall = true;
	                    if (this.ballVY < 0 && this.ballY > 130) {
	                        this.ballVY *= -1;
	                        this.ballY = 130;
	                    }
	                    else if (this.ballX < this.postPos) {
	                        this.ballX = this.postPos - 17;
	                        this.ballVX = ((this.ballVX >= 0 ? -this.ballVX : this.ballVX) * 3 / 4 | 0);
	                    }
	                    else {
	                        this.ballX = this.postPos + 17;
	                        this.ballVX = ((this.ballVX <= 0 ? -this.ballVX : this.ballVX) * 3 / 4 | 0);
	                    }
	                }
	            }
	            if (this.ballX > this.ballXMax) {
	                this.ballXMax = this.ballX;
	            }
	            var6 = (this.ballX * this.nWidth / 1000 | 0);
	            var7 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	            this.screen.setColor(this.BALL_COL);
	            this.screen.fillOval(var6 - var5, var7 - var5, 2 * var5, 2 * var5);
	            this.drawScores();
	            if (this.promptMsg.length > 0) {
	                if (this.promptMsg.length > 1 && Math.random() < 0.3) {
	                    this.promptMsg = this.COMM_OUT_GENERIC[((this.COMM_OUT_GENERIC.length * Math.random()) | 0)];
	                }
	                this.drawPrompt(this.promptMsg, 0);
	                if (this.buffered) {
	                    this.getGraphics().drawImage(this.buffer, 0, 0, this);
	                }
	                if (this.promptMsg.length > 1) {
	                    yield shims_1.Thread.sleep(1500);
	                }
	                this.promptMsg = "";
	                this.nextBall();
	            }
	        });
	    }
	    sleep(var1) {
	        if (this.gameThread != null) {
	            try {
	                shims_1.Thread.sleep(var1);
	            }
	            catch (var3) {
	            }
	            ;
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(this.COURT_COL);
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(var1, var2) {
	        if (((typeof var1 === 'string') || var1 === null) && ((typeof var2 === 'number') || var2 === null)) {
	            return (() => {
	                var var3 = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("white"));
	                this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var3.getHeight() * (var2 + 1) + 10);
	            })();
	        }
	        else if (var1 === undefined && var2 === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    drawScores() {
	        if (this.inns !== 0) {
	            var var1 = this.screen;
	            var var2 = var1.getFontMetrics();
	            var var3 = 1;
	            var1.setColor(this.SKY_COL);
	            var1.fillRect(0, 0, (this.nWidth / 2 | 0), 3 * var2.getAscent() + 10);
	            var1.setColor(shims_1.Color.fromString("white"));
	            var var4 = this.slimeColText[this.p2Col] + (this.p2Score + Math.round(this.thisBall));
	            var1.drawString(var4, 10, (var2.getAscent() + 3) * var3 + 10);
	            var var5 = var3 + 1;
	            if (this.inns !== 1) {
	                var4 = this.slimeColText[this.p1Col] + this.p1Score;
	                var1.drawString(var4, 10, (var2.getAscent() + 3) * var5 + 10);
	                ++var5;
	            }
	            if (this.ballCount < 6 * this.overs - 1) {
	                var4 = "Over: " + (this.ballCount / 6 | 0);
	                if (this.ballCount % 6 !== 0) {
	                    var4 = var4 + "." + this.ballCount % 6;
	                }
	                var4 = var4 + " (" + this.overs + ")";
	            }
	            else if (this.ballCount === 6 * this.overs - 1) {
	                var4 = "Last ball";
	            }
	            else {
	                var4 = "Over: " + this.overs;
	            }
	            var1.drawString(var4, 10, (var2.getAscent() + 3) * var5 + 20);
	            ++var5;
	            if (this.p1X !== 200 || this.p2X !== 800 || this.fP1Touched || this.fP2Touched) {
	            }
	        }
	    }
	    drawWorm() {
	        var var1 = this.buffered ? this.buffer.getGraphics() : this.getGraphics();
	        var var2 = var1.getFontMetrics();
	        var var5 = this.getMinScore(1);
	        var var7 = this.getMinScore(2);
	        var var11 = this.getMaxScore(1);
	        var var13 = this.getMaxScore(2);
	        var var3 = var5 < var7 ? var5 : var7;
	        var var9 = var11 > var13 ? var11 : var13;
	        if (var3 !== 0 || var9 !== 0) {
	            var var15 = (this.nWidth * 4 / 5 | 0) - 5;
	            var var16 = (this.nWidth / 5 | 0);
	            var var17 = ((5 + Math.round(Math.round(((this.nHeight / 5 | 0))) * var9 / (var9 - var3))) | 0);
	            var var18 = (this.nHeight / 5 | 0);
	            if (this.fEndOfOver) {
	                var15 = (this.nWidth / 10 | 0) - 5;
	                var16 = (this.nWidth * 4 / 5 | 0);
	                var17 = ((Math.round(Math.round(((this.nHeight * 2 / 5 | 0))) * var9 / (var9 - var3)) + Math.round(((this.nHeight * 3 / 10 | 0)))) | 0);
	                var18 = (this.nHeight * 2 / 5 | 0);
	            }
	            if (this.inns === 2) {
	                var1.setColor(this.slimeColours[this.p1Col]);
	                var1.drawString(this.slimeColAbbr[this.p1Col], var15 - var2.stringWidth(this.slimeColAbbr[this.p1Col]) - 5, var17 - ((Math.round(Math.round((var9 + var3) / 2) * Math.round(var18) / (var9 - var3))) | 0));
	                var1.drawLine(var15, var17, var15 + (var16 / (6 * this.overs) | 0), ((Math.round(var17) - Math.round(Math.round(var18) * this.p1bxb[0] / (var9 - var3))) | 0));
	                for (var var19 = 1; var19 < 6 * this.overs; ++var19) {
	                    var1.drawLine(var15 + (var16 * var19 / (6 * this.overs) | 0), ((Math.round(var17) - Math.round(Math.round(var18) * this.p1bxb[var19 - 1] / (var9 - var3))) | 0), var15 + (var16 * (var19 + 1) / (6 * this.overs) | 0), ((Math.round(var17) - Math.round(Math.round(var18) * this.p1bxb[var19] / (var9 - var3))) | 0));
	                }
	                var1.setColor(this.slimeColours[this.p2Col]);
	                var1.drawString(this.slimeColAbbr[this.p2Col], var15 - var2.stringWidth(this.slimeColAbbr[this.p2Col]) - 5, var17 - ((Math.round(Math.round((var9 + var3) / 2) * Math.round(var18) / (var9 - var3))) | 0) + var2.getAscent());
	                var1.drawLine(var15, var17, var15 + (var16 / (6 * this.overs) | 0), ((Math.round(var17) - Math.round(Math.round(var18) * this.p2bxb[0] / (var9 - var3))) | 0));
	                for (var var20 = 1; var20 < this.ballCount; ++var20) {
	                    var1.drawLine(var15 + (var16 * var20 / (6 * this.overs) | 0), ((Math.round(var17) - Math.round(Math.round(var18) * this.p2bxb[var20 - 1] / (var9 - var3))) | 0), var15 + (var16 * (var20 + 1) / (6 * this.overs) | 0), ((Math.round(var17) - Math.round(Math.round(var18) * this.p2bxb[var20] / (var9 - var3))) | 0));
	                }
	                var1.setColor(shims_1.Color.fromString("white"));
	                var1.drawString(/* valueOf */ new String(var9).toString(), var15 - 5 - var2.stringWidth(/* valueOf */ new String(var9).toString()), var17 - ((Math.round(var9 * Math.round(var18) / (var9 - var3))) | 0) + var2.getAscent());
	                var1.drawString(/* valueOf */ new String(var3).toString(), var15 - 5 - var2.stringWidth(/* valueOf */ new String(var3).toString()), var17 - ((Math.round(var3 * Math.round(var18) / (var9 - var3))) | 0));
	                var1.drawLine(var15, var17 - ((Math.round(var9 * Math.round(var18) / (var9 - var3))) | 0), var15, var17 - ((Math.round(var3 * Math.round(var18) / (var9 - var3))) | 0));
	                var1.drawLine(var15, var17, var15 + var16, var17);
	            }
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var1 = this.getGraphics();
	            while ((this.gameThread != null)) {
	                this.p1OldX = this.p1X;
	                this.p1OldY = this.p1Y;
	                this.p2OldX = this.p2X;
	                this.p2OldY = this.p2Y;
	                this.p3OldY = this.p3Y;
	                this.ballOldX = this.ballX;
	                this.ballOldY = this.ballY;
	                this.MoveSlimers();
	                yield this.DrawSlimers();
	                if (this.buffered) {
	                    var1.drawImage(this.buffer, 0, 0, null);
	                }
	                if (this.ballCount === this.overs * 6 && !this.fNoBall) {
	                    this.fInPlay = false;
	                    this.gameThread = null;
	                    if (this.inns === 1) {
	                        this.promptMsg = "Click the mouse to continue...";
	                    }
	                    else {
	                        this.promptMsg = "Click team names to select teams, then choose an innings length to start!";
	                        this.fEndGame = true;
	                    }
	                }
	                if (this.gameThread != null) {
	                    try {
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var2) {
	                    }
	                    ;
	                }
	            }
	            ;
	            if (!this.fEndOfOver) {
	                this.fInPlay = false;
	            }
	            this.repaint();
	        });
	    }
	    DoFatality() {
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Slime2P;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class SlimeCricket2 extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 750;
	        this.recommended_height = 375;
	        this.p1Diam = 75;
	        this.p2Diam = 75;
	        this.ballRad = 13;
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1X = 0;
	        this.p1Y = 0;
	        this.p2X = 0;
	        this.p2Y = 0;
	        this.p3X = 0;
	        this.p3Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.difficulty = 0;
	        this.p1OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldX = 0;
	        this.p2OldY = 0;
	        this.p3OldY = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p3YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.fEndGame = false;
	        this.bounces = 0;
	        this.fEndOfOver = false;
	        this.fHitBackWall = false;
	        this.p1XMin = 0;
	        this.p2XMin = 0;
	        this.p2XMax = 0;
	        this.ballXMax = 0;
	        this.p1Touches = 0;
	        this.ballCount = 0;
	        this.postPos = 0;
	        this.bowlingCrease = 0;
	        this.runningCrease = 0;
	        this.battingCrease = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.inns = 0;
	        this.wicketPenalty = 0;
	        this.fNoBall = false;
	        this.overs = 0;
	        this.stillFrames = 0;
	        this.thisBall = 0;
	        this.p1Hold = false;
	        this.ballbowled = false;
	        this.p1next = false;
	        this.p2next = false;
	        this.__wait = 0;
	        this.p1ai = false;
	        this.p2ai = false;
	        this.balltype = 0;
	        this.shottype = 0;
	        this.AI_COL = 0;
	        this.p3X = 1000 - (this.p1Diam / 2 | 0);
	        this.slimeColours = [shims_1.Color.fromString("yellow"), new shims_1.Color(0, 0, 128), new shims_1.Color(164, 164, 255), shims_1.Color.fromString("black"), new shims_1.Color(0, 100, 0), new shims_1.Color(0, 162, 0), new shims_1.Color(0, 0, 210), new shims_1.Color(128, 78, 0), shims_1.Color.fromString("red"), shims_1.Color.fromString("black")];
	        this.slimeColours2 = [new shims_1.Color(0, 100, 0), shims_1.Color.fromString("red"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("gray"), shims_1.Color.fromString("white"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("yellow"), new shims_1.Color(60, 160, 60), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("white")];
	        this.slimeColText = ["Australia ", "England ", "India ", "New Zealand ", "Pakistan ", "South Africa ", "Sri Lanka ", "West Indies ", "Zimbabwe ", "Computer"];
	        this.slimeColAbbr = ["AUS", "ENG", "IND", "NZ", "PAK", "RSA", "SL", "WI", "ZIM", "AI"];
	        this.difficultyColours = [shims_1.Color.fromString("blue"), shims_1.Color.fromString("green"), shims_1.Color.fromString("red")];
	        this.difficultyText = ["Grade", "Domestic", "International"];
	        this.BALL_COL = shims_1.Color.fromString("white");
	        this.COURT_COL = new shims_1.Color(0, 160, 0);
	        this.DAY_COL = new shims_1.Color(85, 85, 255);
	        this.NIGHT_COL = new shims_1.Color(0, 0, 68);
	        this.SKY_COL = this.DAY_COL;
	        this.fHitBackWall = false;
	        this.postPos = 1000 - this.p1Diam - 5;
	        this.bowlingCrease = 450;
	        this.runningCrease = 450;
	        this.battingCrease = this.postPos - (this.p2Diam / 2 | 0) - 20;
	        this.inns = 1;
	        this.wicketPenalty = 5;
	        this.fNoBall = false;
	        this.overs = 5;
	        this.p1Hold = false;
	        this.p1ai = false;
	        this.p2ai = false;
	        this.balltype = -1;
	        this.shottype = -1;
	        this.AI_COL = 9;
	        this.COMM_FOUR = ["Along the carpet it goes for four.", "Back past the bowler for four.", "Picks the gap nicely and into the fence it goes for four.", "Shot!", "Four more added to the total.", "It\'s certainly a batsman\'s paradise out there today.", "... and the umpire waves his arm once more.", "Exactly not what the bowler had planned.", "Well it\'s bounced up off the rope and smacked some guy in the face!"];
	        this.COMM_FOURTOUCHED = ["Terrible fielding effort there.", "The bowler won\'t be pleased with that effort.", "Well that should never have been a four."];
	        this.COMM_SIX = ["He\'s carving them up like a Christmas cake!", "That\'s come right orf the meat of the bat.", "He\'s hit that one very hored indeed.", "He\'s smacked that one.", "He\'s gone for it... it\'s gone all the way!", "Must be playing on a road out there today.", "Looks like he\'s chasing Andrew Symonds\' record here..."];
	        this.COMM_SIXTOUCHED = ["Oh no, he\'s done a Paul Reiffel!", "Well that\'s six more on top of the no ball, he can\'t be happy."];
	        this.COMM_STUMPED = ["Stumped him!", "A fine example of wicket keeping there. Excellent stuff.", "There goes the red light! What quick hands this keeper has!"];
	        this.COMM_RUNOUT = ["He\'s run out! What a tragedy!", "... and there\'s the red light. He\'s out.", "Allan Donald would be pleased with that effort.", "Well the fielder\'s decided to chance his arm, and it\'s come off!", "The bails were off in a flash, he never had a chance.", "Poor calling there, he deserved to get out.", "Well what else do you expect if you run like Ranatunga?"];
	        this.COMM_BOWLED = ["Bowled him neck and crop.", "Tremendous delivery, he really had no idea about that.", "What a marvellous ball!", "That\'s a ripsnorter of a ball!", "I think that\'s just knocked Joe the stumpcameraman out.", "Well the bowler\'s certainly had his weeties this morning.", "There\'s the death rattle.", "That\'s gotta be a contender for today\'s fastest ball.", "Straight through the gate. The batsman won\'t be pleased with that.", "Completely bamboozled.", "A wonderful spell of bowling, this."];
	        this.COMM_PLAYEDON = ["He\'s played on!", "A magnificent chop shot, oh wait, it\'s hit the stumps.", "He\'s done an Adam Gilchrist!"];
	        this.COMM_CAUGHT = ["He\'s hit it straight down his throat.", "A safe pair of hands, he doesn\'t drop those.", "What a magnificent shot! No, he\'s been caught!", "A marvellous catch, that.", "... and he takes a straightforward catch.", "Well, they say \"catches win matches\".", "Caught, yes!", "Well, he\'s picked out the only fielder in front of the bat!", "Can\'t be happy with that shot.", "What a shame, we can\'t use the snickometer on that one it\'s so damned obvious."];
	        this.COMM_CTBEHIND = ["... the keeper gobbles up the catch.", "... and the snickometer shows that that\'s clearly out.", "Excellent line and length, he\'s got another edge.", "Yes, there was some bat in that, he\'s gone!"];
	        this.COMM_OUT_GENERIC = ["Got him, yes!", "It\'s all happening here!", "A marvellous effort, that!", "He\'s out.", "Oh dear.", "Gone!", "What a magnificent fielding side this team is.", "Yes, another one! He\'s a hero, this man!"];
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.buffer = this.createImage(this.nWidth, this.nHeight);
	        this.fInPlay = false;
	        this.fEndGame = true;
	        this.fEndOfOver = false;
	        this.fCanChangeCol = true;
	        this.promptMsg = "Click team names to select teams, an opponent, then choose an innings length to start!";
	        this.screen = this.buffer.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        this.p1Col = 9;
	        this.p2Col = 9;
	        this.inns = 0;
	    }
	    paint(var1) {
	        var var2 = this.buffer.getGraphics();
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        var2.setColor(this.SKY_COL);
	        var2.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        var2.setColor(this.COURT_COL);
	        var2.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        var2.setColor(shims_1.Color.fromString("white"));
	        var2.fillRect((this.nWidth * this.postPos / 1000 | 0) - 2, (this.nHeight * 7 / 10 | 0), 3, (this.nHeight / 10 | 0));
	        var2.fillRect((this.nWidth * this.bowlingCrease / 1000 | 0) - 1, (this.nHeight * 4 / 5 | 0), 2, 5);
	        var2.fillRect((this.nWidth * this.runningCrease / 1000 | 0) - 1, (this.nHeight * 4 / 5 | 0), 2, 5);
	        var2.fillRect((this.nWidth * this.battingCrease / 1000 | 0) - 1, (this.nHeight * 4 / 5 | 0), 2, 5);
	        this.drawPrompt();
	        var var3;
	        if (!this.fInPlay && this.fEndGame) {
	            var3 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString("Slime Cricket 2: World Cup Edition BETA", (this.nWidth / 2 | 0) - (var3.stringWidth("Slime Cricket 2: World Cup Edition BETA") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 7);
	            this.screen.drawString("This is not the final version of the game!", (this.nWidth / 2 | 0) - (var3.stringWidth("This is not the final version of the game!") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 6);
	            this.screen.setColor(this.slimeColours[this.p2Col]);
	            this.screen.fillRect((this.nWidth / 4 | 0) - (var3.stringWidth(this.slimeColText[this.p2Col]) / 2 | 0) - 10, (this.nHeight / 2 | 0) - var3.getAscent() * 2, var3.stringWidth(this.slimeColText[this.p2Col]) + 20, var3.getAscent() * 2);
	            this.screen.setColor(this.slimeColours2[this.p2Col]);
	            this.screen.drawString(this.slimeColText[this.p2Col], (this.nWidth / 4 | 0) - (var3.stringWidth(this.slimeColText[this.p2Col]) / 2 | 0), (this.nHeight / 2 | 0) - (var3.getAscent() / 2 | 0));
	            this.screen.setColor(this.slimeColours[this.p1Col]);
	            this.screen.fillRect((this.nWidth / 2 | 0) - (var3.stringWidth(this.slimeColText[this.p1Col]) / 2 | 0) - 10, (this.nHeight / 2 | 0) - var3.getAscent() * 2, var3.stringWidth(this.slimeColText[this.p1Col]) + 20, var3.getAscent() * 2);
	            this.screen.setColor(this.slimeColours2[this.p1Col]);
	            this.screen.drawString(this.slimeColText[this.p1Col], (this.nWidth / 2 | 0) - (var3.stringWidth(this.slimeColText[this.p1Col]) / 2 | 0), (this.nHeight / 2 | 0) - (var3.getAscent() / 2 | 0));
	            this.screen.setColor(this.difficultyColours[this.difficulty]);
	            this.screen.fillRect((this.nWidth * 3 / 4 | 0) - (var3.stringWidth(this.difficultyText[this.difficulty]) / 2 | 0) - 10, (this.nHeight / 2 | 0) - var3.getAscent() * 2, var3.stringWidth(this.difficultyText[this.difficulty]) + 20, var3.getAscent() * 2);
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(this.difficultyText[this.difficulty], (this.nWidth * 3 / 4 | 0) - (var3.stringWidth(this.difficultyText[this.difficulty]) / 2 | 0), (this.nHeight / 2 | 0) - (var3.getAscent() / 2 | 0));
	            var2.setColor(shims_1.Color.fromString("white"));
	            this.screen.setColor(this.SKY_COL);
	            for (var var4 = 0; var4 < 5; ++var4) {
	                var2.fillRect((this.nWidth / 4 | 0) + (var4 * this.nWidth / 10 | 0) + 5, (this.nHeight * 2 / 3 | 0) - (var3.getAscent() * 3 / 2 | 0), (this.nWidth / 10 | 0) - 10, 2 * var3.getAscent());
	                this.screen.drawString(var4 + 1 + " overs", (this.nWidth * 3 / 10 | 0) + (var4 * this.nWidth / 10 | 0) - (var3.stringWidth(var4 + 1 + " overs") / 2 | 0), (this.nHeight * 2 / 3 | 0) - var3.getAscent() * 0);
	            }
	            var3 = var2.getFontMetrics();
	            var2.setColor(shims_1.Color.fromString("white"));
	            var2.drawString("Written by Wedgey and Fractoid", (this.nWidth / 2 | 0) - (var3.stringWidth("Written by Wedgey and Fractoid") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 6);
	            var2.drawString("with input from Browny, Chucky and Damo", (this.nWidth / 2 | 0) - (var3.stringWidth("with input from Browny, Chucky and Damo") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 5);
	            this.drawScores();
	            var2.drawString("Bowling first", (this.nWidth / 4 | 0) - (var3.stringWidth("Bowling first") / 2 | 0), (this.nHeight / 2 | 0) - var3.getAscent() * 3);
	            var2.drawString("Batting first", (this.nWidth / 2 | 0) - (var3.stringWidth("Batting first") / 2 | 0), (this.nHeight / 2 | 0) - var3.getAscent() * 3);
	            var2.drawString("Difficulty", (this.nWidth * 3 / 4 | 0) - (var3.stringWidth("Difficulty") / 2 | 0), (this.nHeight / 2 | 0) - var3.getAscent() * 3);
	            var2.drawString("Click on innings length to start...", (this.nWidth / 2 | 0) - (var3.stringWidth("Click on innings length to start...") / 2 | 0), (this.nHeight * 2 / 3 | 0) - var3.getHeight() * 2);
	            this.screen.setColor(this.SKY_COL);
	        }
	        else if (!this.fInPlay && !this.fEndGame && !this.fEndOfOver) {
	            var3 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString("Change of innings", (this.nWidth / 2 | 0) - (var3.stringWidth("Change of innings") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 5);
	            this.drawScores();
	        }
	        else if (this.fEndOfOver) {
	            var3 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            switch ((this.inns)) {
	                case 1:
	                    this.drawScores();
	                    this.screen.drawString("Over", (this.nWidth / 2 | 0) - (var3.stringWidth("Over") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 3);
	                    this.screen.drawString("Last over: " + this.thisOver, (this.nWidth / 2 | 0) - (var3.stringWidth("Last over: " + this.thisOver) / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight());
	                    break;
	                case 2:
	                    this.drawScores();
	                    this.screen.drawString("Over", (this.nWidth / 2 | 0) - (var3.stringWidth("Over") / 2 | 0), var3.getHeight());
	                    this.screen.drawString("Last over: " + this.thisOver, (this.nWidth / 2 | 0) - (var3.stringWidth("Last over: " + this.thisOver) / 2 | 0), var3.getHeight() * 2);
	                    this.drawWorm();
	                    this.screen.drawString("After " + (this.ballCount / 6 | 0) + ((this.ballCount / 6 | 0) === 1 ? " over..." : " overs..."), (this.nWidth / 2 | 0) - (var3.stringWidth("After " + (this.ballCount / 6 | 0) + ((this.ballCount / 6 | 0) === 1 ? " over..." : " overs...")) / 2 | 0), var3.getHeight() * 4);
	                    this.screen.drawString(this.slimeColText[this.p2Col].toUpperCase(), (this.nWidth / 3 | 0), var3.getHeight() * 5);
	                    this.screen.drawString(/* valueOf */ new String(this.p2Score).toString(), (this.nWidth * 2 / 3 | 0) - var3.stringWidth(/* valueOf */ new String(this.p2Score).toString()), var3.getHeight() * 5);
	                    this.screen.drawString(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", (this.nWidth / 3 | 0), var3.getHeight() * 6);
	                    this.screen.drawString(/* valueOf */ new String(this.p1bxb[this.ballCount - 1]).toString(), (this.nWidth * 2 / 3 | 0) - var3.stringWidth(/* valueOf */ new String(this.p1bxb[this.ballCount - 1]).toString()), var3.getHeight() * 6);
	            }
	        }
	        else {
	            this.drawScores();
	            this.drawWorm();
	        }
	        var1.drawImage(this.buffer, 0, 0, null);
	    }
	    handleEvent(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((var1.id)) {
	                case 401:
	                case 403:
	                    if (!this.fEndGame) {
	                        switch ((var1.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                break;
	                            case 65:
	                            case 97:
	                                if (!this.p1ai) {
	                                    this.p1L();
	                                }
	                                break;
	                            case 68:
	                            case 100:
	                                if (!this.p1ai) {
	                                    this.p1R();
	                                }
	                                break;
	                            case 69:
	                            case 81:
	                            case 101:
	                            case 113:
	                                if (!this.p1ai) {
	                                    this.p3J();
	                                }
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (!this.p2ai) {
	                                    this.p2J();
	                                }
	                                break;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                if (!this.p2ai) {
	                                    this.p2L();
	                                }
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                this.p2next = true;
	                                if (!this.fEndOfOver && this.p1next && this.p2next) {
	                                    this.nextBall();
	                                }
	                                break;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                if (!this.p2ai) {
	                                    this.p2R();
	                                }
	                                break;
	                            case 83:
	                            case 115:
	                                this.p1next = true;
	                                if (!this.fEndOfOver && this.p1next && this.p2next) {
	                                    this.nextBall();
	                                }
	                                break;
	                            case 87:
	                            case 119:
	                                if (!this.p1ai) {
	                                    this.p1J();
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((var1.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0 && !this.p1ai) {
	                                this.p1S();
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0 && !this.p1ai) {
	                                this.p1S();
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0 && !this.p2ai) {
	                                this.p2S();
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0 && !this.p2ai) {
	                                this.p2S();
	                            }
	                            return false;
	                        case 83:
	                        case 115:
	                            this.p1Hold = false;
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (this.fEndOfOver) {
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                        this.thisOver = "";
	                        this.fEndOfOver = false;
	                        this.promptMsg = "";
	                        this.repaint();
	                    }
	                    else if (!this.fInPlay) {
	                        if (!this.fEndGame) {
	                            this.fInPlay = true;
	                            ++this.inns;
	                            var var7 = this.p1Col;
	                            this.p1Col = this.p2Col;
	                            this.p2Col = var7;
	                            var var8 = this.p1Score;
	                            this.p1Score = this.p2Score;
	                            this.p2Score = var8;
	                            var var9 = this.p1bxb;
	                            this.p1bxb = this.p2bxb;
	                            this.p2bxb = var9;
	                            if (Math.random() < 0.8) {
	                                this.SKY_COL = this.NIGHT_COL;
	                            }
	                            var var6 = this.p1ai;
	                            this.p1ai = this.p2ai;
	                            this.p2ai = var6;
	                        }
	                        else {
	                            var var2 = this.screen.getFontMetrics();
	                            if (var1.y > (this.nHeight * 2 / 3 | 0) - (var2.getAscent() * 3 / 2 | 0) && var1.y < (this.nHeight * 2 / 3 | 0) + (var2.getAscent() / 2 | 0)) {
	                                for (var var3 = 0; var3 < 5 && !this.fInPlay; ++var3) {
	                                    if (var1.x > (this.nWidth / 4 | 0) + (var3 * this.nWidth / 10 | 0) + 5 && var1.x < (this.nWidth / 4 | 0) + ((var3 + 1) * this.nWidth / 10 | 0) - 5) {
	                                        this.fEndGame = false;
	                                        this.fInPlay = true;
	                                        this.p1ai = this.p2ai = false;
	                                        if (this.p1Col === 9) {
	                                            this.p2ai = true;
	                                            while (((this.p1Col = ((Math.random() * this.slimeColours.length) | 0)) === this.p2Col)) {
	                                            }
	                                            ;
	                                        }
	                                        if (this.p2Col === 9) {
	                                            this.p1ai = true;
	                                            while (((this.p2Col = ((Math.random() * this.slimeColours.length) | 0)) === this.p1Col)) {
	                                            }
	                                            ;
	                                        }
	                                        this.inns = 1;
	                                        this.p1Score = this.p2Score = 0;
	                                        var var4 = this.p1Col;
	                                        this.p1Col = this.p2Col;
	                                        this.p2Col = var4;
	                                        this.SKY_COL = this.DAY_COL;
	                                        this.overs = var3 + 1;
	                                        this.p1bxb = new Array(this.overs * 6);
	                                        this.p2bxb = new Array(this.overs * 6);
	                                        for (var var5 = 0; var5 < this.overs * 6; ++var5) {
	                                            this.p1bxb[var5] = this.p2bxb[var5] = 0;
	                                        }
	                                    }
	                                }
	                            }
	                            else if (var1.y > (this.nHeight / 2 | 0) - var2.getAscent() * 2 && var1.y < (this.nHeight / 2 | 0)) {
	                                if (var1.x > (this.nWidth / 4 | 0) - (var2.stringWidth(this.slimeColText[this.p2Col]) / 2 | 0) - 10 && var1.x < (this.nWidth / 4 | 0) + (var2.stringWidth(this.slimeColText[this.p2Col]) / 2 | 0) + 10) {
	                                    while ((true)) {
	                                        this.p2Col = this.p2Col !== this.slimeColours.length - 1 ? this.p2Col + 1 : 0;
	                                        if (this.p1Col !== this.p2Col) {
	                                            this.repaint();
	                                            break;
	                                        }
	                                    }
	                                    ;
	                                }
	                                else if (var1.x > (this.nWidth / 2 | 0) - (var2.stringWidth(this.slimeColText[this.p1Col]) / 2 | 0) - 10 && var1.x < (this.nWidth / 2 | 0) + (var2.stringWidth(this.slimeColText[this.p1Col]) / 2 | 0) + 10) {
	                                    while ((true)) {
	                                        this.p1Col = this.p1Col !== this.slimeColours.length - 1 ? this.p1Col + 1 : 0;
	                                        if (this.p1Col !== this.p2Col) {
	                                            this.repaint();
	                                            break;
	                                        }
	                                    }
	                                    ;
	                                }
	                                else if (var1.x > (this.nWidth * 3 / 4 | 0) - (var2.stringWidth(this.difficultyText[this.difficulty]) / 2 | 0) - 10 && var1.x < (this.nWidth * 3 / 4 | 0) + (var2.stringWidth(this.difficultyText[this.difficulty]) / 2 | 0) + 10) {
	                                    this.difficulty = (this.difficulty + 1) % this.difficultyText.length;
	                                    this.repaint();
	                                }
	                            }
	                        }
	                        if (this.fInPlay) {
	                            this.ballCount = -1;
	                            this.thisOver = "";
	                            this.promptMsg = "";
	                            this.thisBall = 0;
	                            this.nextBall();
	                            this.gameThread = new shims_1.Thread(this);
	                            this.gameThread.start();
	                        }
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Cricket 2: by Wedgey: http://www.student.uwa.edu.au/~wedgey/slimec/");
	            }
	            return false;
	        });
	    }
	    p1L() {
	        this.p1XV = -8;
	    }
	    p1R() {
	        this.p1XV = 8;
	    }
	    p1J() {
	        if (this.p1Y === 0) {
	            this.p1YV = 31;
	        }
	    }
	    p1S() {
	        this.p1XV = 0;
	    }
	    p2L() {
	        this.p2XV = -8;
	    }
	    p2R() {
	        this.p2XV = 8;
	    }
	    p2J() {
	        if (this.p2Y === 0) {
	            this.p2YV = 31;
	        }
	    }
	    p2S() {
	        this.p2XV = 0;
	    }
	    p3J() {
	        if (this.p3Y === 0) {
	            this.p3YV = 31;
	        }
	    }
	    nextBall() {
	        this.__wait = 50;
	        this.p1XMin = this.p1X = this.runningCrease - (this.p1Diam / 2 | 0);
	        this.p2XMin = this.p2XMax = this.p2X = this.battingCrease + 20;
	        this.ballVX = this.ballVY = this.p1Y = this.p2Y = this.p2XV = this.p2YV = this.p3Y = this.p3YV = this.p1XV = this.p1YV = 0;
	        this.ballXMax = this.ballX = this.runningCrease - (this.p1Diam / 2 | 0);
	        this.ballY = 400;
	        this.balltype = -1;
	        this.shottype = -1;
	        this.p1next = this.p2next = false;
	        this.ballbowled = false;
	        this.fP1Touched = this.fP2Touched = false;
	        this.bounces = 0;
	        this.p1Touches = 0;
	        if (this.fNoBall) {
	            ++this.thisBall;
	        }
	        if (this.ballCount >= 0) {
	            this.p2bxb[this.ballCount] = this.p2Score += Math.round(this.thisBall);
	            if (this.fNoBall) {
	                this.thisOver = this.thisOver + "N";
	            }
	            if (this.thisBall !== -this.wicketPenalty && this.thisBall !== -this.wicketPenalty + 1) {
	                if (this.thisBall === 0) {
	                    this.thisOver = this.thisOver + ".";
	                }
	                else if (!this.fNoBall || this.thisBall !== -this.wicketPenalty + 1 && this.thisBall !== 0) {
	                    this.thisOver = this.thisOver + (!this.fNoBall ? this.thisBall : this.thisBall - 1);
	                }
	            }
	            else {
	                this.thisOver = this.thisOver + "W";
	            }
	            this.thisOver = this.thisOver + " ";
	        }
	        this.thisBall = 0;
	        if (!this.fNoBall) {
	            ++this.ballCount;
	            if (this.ballCount % 6 === 0 && this.ballCount !== 0 && this.ballCount !== this.overs * 6) {
	                this.fEndOfOver = true;
	                this.gameThread = null;
	                this.promptMsg = "Click the mouse to continue...";
	            }
	        }
	        this.fNoBall = false;
	        this.fHitBackWall = false;
	        this.stillFrames = 0;
	        this.repaint();
	    }
	    getMinScore(var1) {
	        var var2 = 0;
	        for (var var4 = 0; var4 < this.overs * 6; ++var4) {
	            if ((var1 === 1 ? this.p1bxb[var4] : this.p2bxb[var4]) < var2) {
	                var2 = var1 === 1 ? this.p1bxb[var4] : this.p2bxb[var4];
	            }
	        }
	        return var2;
	    }
	    getMaxScore(var1) {
	        var var2 = 0;
	        for (var var4 = 0; var4 < this.overs * 6; ++var4) {
	            if ((var1 === 1 ? this.p1bxb[var4] : this.p2bxb[var4]) > var2) {
	                var2 = var1 === 1 ? this.p1bxb[var4] : this.p2bxb[var4];
	            }
	        }
	        return var2;
	    }
	    MoveSlimers() {
	        if (this.p1ai) {
	            if (!this.ballbowled) {
	                this.bowl();
	            }
	            else {
	                this.field();
	            }
	        }
	        if (this.p2ai) {
	            if (!this.fP2Touched && !this.fHitBackWall) {
	                this.playball();
	            }
	            else {
	                this.running();
	            }
	        }
	        this.p1X += this.p1XV;
	        if (this.p1X < (this.p1Diam / 2 | 0)) {
	            this.p1X = (this.p1Diam / 2 | 0);
	        }
	        if (this.p1X > this.postPos - (this.p1Diam / 2 | 0) - 5) {
	            this.p1X = this.postPos - (this.p1Diam / 2 | 0) - 5;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= 2;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        if (this.ballX === 200 && this.ballVX === 200 && this.p1X < this.p1XMin) {
	            this.p1XMin = this.p1X;
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > this.postPos - (this.p2Diam / 2 | 0) - 5) {
	            this.p2X = this.postPos - (this.p2Diam / 2 | 0) - 5;
	        }
	        if (this.p2X < (this.p2Diam / 2 | 0)) {
	            this.p2X = (this.p2Diam / 2 | 0);
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= 2;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2X < this.p2XMin && this.p2Y === 0) {
	            this.p2XMin = this.p2X;
	        }
	        else if (this.p2X > this.p2XMax && this.p2Y === 0) {
	            this.p2XMax = this.p2X;
	        }
	        if (this.p2X - (this.p2Diam / 2 | 0) <= this.runningCrease && this.p2XMax + (this.p2Diam / 2 | 0) >= this.battingCrease && (this.fP2Touched || this.fHitBackWall) && this.p2Y === 0) {
	            ++this.thisBall;
	            this.p2XMin = this.p2XMax = this.p2X;
	            this.drawScores();
	        }
	        else if (this.p2XMin - (this.p2Diam / 2 | 0) <= this.runningCrease && this.p2X + (this.p2Diam / 2 | 0) >= this.battingCrease && (this.fP2Touched || this.fHitBackWall) && this.p2Y === 0) {
	            ++this.thisBall;
	            this.p2XMin = this.p2XMax = this.p2X;
	            this.drawScores();
	        }
	        if (this.p3YV !== 0) {
	            this.p3Y += this.p3YV -= 2;
	        }
	        if (this.p3Y < 0) {
	            this.p3Y = 0;
	            this.p3YV = 0;
	        }
	    }
	    DrawSlimers() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var1 = (this.ballX * this.nWidth / 1000 | 0);
	            var var2 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	            var var3 = (this.nWidth * this.p1Diam / 1000 | 0);
	            var var4 = (this.nHeight * this.p1Diam / 1000 | 0);
	            var var5 = (this.p1OldX * this.nWidth / 1000 | 0) - (var3 / 2 | 0);
	            var var6 = (4 * this.nHeight / 5 | 0) - var4 - (this.p1OldY * this.nHeight / 1000 | 0);
	            this.screen.setColor(this.SKY_COL);
	            this.screen.fillRect(var5, var6, var3, var4);
	            var3 = (this.nWidth * this.p2Diam / 1000 | 0);
	            var4 = (this.nHeight * this.p2Diam / 1000 | 0);
	            var5 = (this.p2OldX * this.nWidth / 1000 | 0) - (var3 / 2 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - var4 - (this.p2OldY * this.nHeight / 1000 | 0);
	            this.screen.fillRect(var5, var6, var3, var4);
	            var3 = (this.nWidth / 10 | 0);
	            var4 = (this.nHeight / 10 | 0);
	            var5 = (this.p3X * this.nWidth / 1000 | 0) - (var3 / 2 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - var4 - (this.p3OldY * this.nHeight / 1000 | 0);
	            this.screen.fillRect(var5, var6, var3, var4);
	            var var7 = 5;
	            var var8 = ((this.ballRad + var7) * this.nHeight / 1000 | 0);
	            this.screen.fillOval(var1 - var8, var2 - var8, 2 * var8, 2 * var8);
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillRect((this.nWidth * this.postPos / 1000 | 0) - 2, (this.nHeight * 7 / 10 | 0), 3, (this.nHeight / 10 | 0));
	            var3 = (this.nWidth * this.p1Diam / 1000 | 0);
	            var4 = (this.nHeight * this.p1Diam / 1000 | 0);
	            var5 = (this.p1X * this.nWidth / 1000 | 0) - (var3 / 2 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - var4 - (this.p1Y * this.nHeight / 1000 | 0);
	            this.screen.setColor(this.slimeColours2[this.p1Col]);
	            this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);
	            this.screen.setColor(this.slimeColours[this.p1Col]);
	            this.screen.fillArc(var5, var6, var3, 2 * var4, 53, 74);
	            this.screen.fillRect(var5 + (var3 / 5 | 0), var6 + (var4 / 5 | 0), (var3 * 3 / 5 | 0), (var4 * 4 / 5 | 0));
	            var var9 = this.p1X + (38 * this.p1Diam / 100 | 0);
	            var var10 = this.p1Y - (60 * this.p1Diam / 100 | 0);
	            var5 = (var9 * this.nWidth / 1000 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - var4 - (var10 * this.nHeight / 1000 | 0);
	            var var11 = var5 - var1;
	            var var12 = var6 - var2;
	            var var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	            if (var13 === 0) {
	                var13 = 1;
	            }
	            var var14 = ((this.nWidth / 50 | 0) * this.p1Diam / 100 | 0);
	            var var15 = ((this.nHeight / 25 | 0) * this.p1Diam / 100 | 0);
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillOval(var5 - (4 * var11 / var13 | 0) - (3 * var14 / 4 | 0), var6 - (4 * var12 / var13 | 0) - (3 * var15 / 4 | 0), (var14 / 2 | 0), (var15 / 2 | 0));
	            var3 = (this.nWidth * this.p2Diam / 1000 | 0);
	            var4 = (this.nHeight * this.p2Diam / 1000 | 0);
	            var5 = (this.p2X * this.nWidth / 1000 | 0) - (var3 / 2 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - (this.p2Diam * this.nHeight / 1000 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	            this.screen.setColor(this.slimeColours2[this.p2Col]);
	            this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);
	            this.screen.setColor(this.slimeColours[this.p2Col]);
	            this.screen.fillArc(var5, var6, var3, 2 * var4, 53, 74);
	            this.screen.fillRect(var5 + (var3 / 5 | 0), var6 + (var4 / 5 | 0), (var3 * 3 / 5 | 0), (var4 * 4 / 5 | 0));
	            var9 = this.p2X - (18 * this.p2Diam / 100 | 0);
	            var10 = this.p2Y - (60 * this.p2Diam / 100 | 0);
	            var5 = (var9 * this.nWidth / 1000 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - var4 - (var10 * this.nHeight / 1000 | 0);
	            var11 = var5 - var1;
	            var12 = var6 - var2;
	            var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	            if (var13 === 0) {
	                var13 = 1;
	            }
	            var14 = ((this.nWidth / 50 | 0) * this.p2Diam / 100 | 0);
	            var15 = ((this.nHeight / 25 | 0) * this.p2Diam / 100 | 0);
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillOval(var5 - (4 * var11 / var13 | 0) - (3 * var14 / 4 | 0), var6 - (4 * var12 / var13 | 0) - (3 * var15 / 4 | 0), (var14 / 2 | 0), (var15 / 2 | 0));
	            var3 = (this.nWidth * this.p1Diam / 1000 | 0);
	            var4 = (this.nHeight * this.p1Diam / 1000 | 0);
	            var5 = (this.p3X * this.nWidth / 1000 | 0) - (var3 / 2 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - (this.p1Diam * this.nHeight / 1000 | 0) - (this.p3Y * this.nHeight / 1000 | 0);
	            this.screen.setColor(this.slimeColours2[this.p1Col]);
	            this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);
	            this.screen.setColor(this.slimeColours[this.p1Col]);
	            this.screen.fillArc(var5, var6, var3, 2 * var4, 53, 74);
	            this.screen.fillRect(var5 + (var3 / 5 | 0), var6 + (var4 / 5 | 0), (var3 * 3 / 5 | 0), (var4 * 4 / 5 | 0));
	            var9 = this.p3X - (18 * this.p1Diam / 100 | 0);
	            var10 = this.p3Y - (60 * this.p1Diam / 100 | 0);
	            var5 = (var9 * this.nWidth / 1000 | 0);
	            var6 = (4 * this.nHeight / 5 | 0) - var4 - (var10 * this.nHeight / 1000 | 0);
	            var11 = var5 - var1;
	            var12 = var6 - var2;
	            var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	            if (var13 === 0) {
	                var13 = 1;
	            }
	            var14 = ((this.nWidth / 50 | 0) * this.p1Diam / 100 | 0);
	            var15 = ((this.nHeight / 25 | 0) * this.p1Diam / 100 | 0);
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillOval(var5 - (4 * var11 / var13 | 0) - (3 * var14 / 4 | 0), var6 - (4 * var12 / var13 | 0) - (3 * var15 / 4 | 0), (var14 / 2 | 0), (var15 / 2 | 0));
	            yield this.MoveBall();
	        });
	    }
	    MoveBall() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var1 = 5;
	            var var2 = 11;
	            var var3 = 21;
	            var var4 = 17;
	            var var5 = ((this.ballRad + var1) * this.nHeight / 1000 | 0);
	            var var6 = (this.ballOldX * this.nWidth / 1000 | 0);
	            var var7 = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	            this.ballY += --this.ballVY;
	            this.ballX += this.ballVX;
	            this.ballbowled = this.ballbowled || this.ballX > this.bowlingCrease;
	            if (this.ballVX >= 2 || this.ballVY >= 2 || this.p1XV + this.p1YV + this.p2XV + this.p2YV + this.p3YV !== 0 || this.ballX === 200 || this.p2X > this.runningCrease + (this.p2Diam / 2 | 0) && this.p2X < this.battingCrease - (this.p2Diam / 2 | 0)) {
	                this.stillFrames = 0;
	            }
	            else if (this.stillFrames++ > 75) {
	                this.promptMsg = " ";
	            }
	            if (this.ballY < this.ballRad + 5) {
	                this.ballY = this.ballRad + 5;
	                this.ballVY = (-this.ballVY * 2 / 3 | 0);
	                this.ballVX = (this.ballVX * 19 / 20 | 0);
	                ++this.bounces;
	                if (!this.fP2Touched && this.bounces > 1 && !this.fHitBackWall) {
	                    this.fNoBall = true;
	                    this.drawPrompt("No ball! (grubber)", 2);
	                }
	            }
	            if (this.ballX > this.postPos && !this.fP2Touched) {
	                this.fP2Touched = true;
	            }
	            if (this.ballY > 300 && this.ballX > this.battingCrease - (this.p2Diam / 2 | 0) && this.p2X >= this.battingCrease - (this.p2Diam / 2 | 0) && !this.fP2Touched && this.p2XMin > this.battingCrease - (this.p2Diam * 3 / 4 | 0)) {
	                this.fNoBall = true;
	                this.drawPrompt("No ball! (too high)", 2);
	            }
	            if (!this.fEndGame) {
	                var var8 = 2 * (this.ballX - this.p1X);
	                var var9 = this.ballY - this.p1Y;
	                var var10 = (Math.sqrt((var8 * var8 + var9 * var9)) | 0);
	                var var11 = this.ballVX - this.p1XV;
	                var var12 = this.ballVY - this.p1YV;
	                var var13;
	                if (var9 > 0 && var10 < this.p1Diam + this.ballRad && var10 > var1) {
	                    var13 = ((var8 * var11 + var9 * var12) / var10 | 0);
	                    this.ballX = this.p1X + (((this.p1Diam + this.ballRad) / 2 | 0) * var8 / var10 | 0);
	                    this.ballY = this.p1Y + ((this.p1Diam + this.ballRad) * var9 / var10 | 0);
	                    if (var13 <= 0) {
	                        if (!this.p1Hold) {
	                            this.ballVX += this.p1XV - (2 * var8 * var13 / var10 | 0);
	                        }
	                        else {
	                            this.ballVX = 0;
	                            this.ballVY = 0;
	                        }
	                        if (this.ballVX < -var2) {
	                            this.ballVX = -var2;
	                        }
	                        if (this.ballVX > var2) {
	                            this.ballVX = var2;
	                        }
	                        this.ballVY += this.p1YV - (2 * var9 * var13 / var10 | 0);
	                        if (this.ballVY < -var3) {
	                            this.ballVY = -var3;
	                        }
	                        if (this.ballVY > var3) {
	                            this.ballVY = var3;
	                        }
	                    }
	                    if (this.p1Touches > 0 && !this.fP2Touched && this.ballOldX === this.ballXMax && !this.fHitBackWall) {
	                        this.drawPrompt("No ball! (too many touches)", 2);
	                        this.fNoBall = true;
	                    }
	                    if (this.fP2Touched) {
	                        this.fP1Touched = true;
	                    }
	                    if (this.p1X !== this.runningCrease - (this.p1Diam / 2 | 0)) {
	                        ++this.p1Touches;
	                    }
	                    if (this.fP2Touched && this.bounces === 0 && !this.fNoBall && !this.fHitBackWall && this.ballX >= this.p1X) {
	                        this.promptMsg = this.COMM_CAUGHT[((this.COMM_CAUGHT.length * Math.random()) | 0)];
	                        this.thisBall = -this.wicketPenalty;
	                    }
	                }
	                if (!this.fP2Touched) {
	                    var8 = 2 * (this.ballX - this.p2X);
	                    var9 = this.ballY - this.p2Y;
	                    var10 = (Math.sqrt((var8 * var8 + var9 * var9)) | 0);
	                    var11 = this.ballVX - this.p2XV;
	                    var12 = this.ballVY - this.p2YV;
	                    if (var9 > 0 && var10 < this.p2Diam + this.ballRad && var10 > var1 && this.p1Touches > 0) {
	                        var13 = ((var8 * var11 + var9 * var12) / var10 | 0);
	                        this.ballX = this.p2X + (((this.p2Diam + this.ballRad) / 2 | 0) * var8 / var10 | 0);
	                        this.ballY = this.p2Y + ((this.p2Diam + this.ballRad) * var9 / var10 | 0);
	                        if (var13 <= 0) {
	                            this.ballVX += this.p2XV - (2 * var8 * var13 / var10 | 0);
	                            if (this.ballVX < -var4) {
	                                this.ballVX = -var4;
	                            }
	                            if (this.ballVX > var2) {
	                                this.ballVX = var2;
	                            }
	                            this.ballVY += this.p2YV - (2 * var9 * var13 / var10 | 0);
	                            if (this.ballVY < -var3) {
	                                this.ballVY = -var3;
	                            }
	                            if (this.ballVY > var3) {
	                                this.ballVY = var3;
	                            }
	                        }
	                        this.fP2Touched = true;
	                        this.bounces = 0;
	                    }
	                }
	                var8 = 2 * (this.ballX - this.p3X);
	                var9 = this.ballY - this.p3Y;
	                var10 = (Math.sqrt((var8 * var8 + var9 * var9)) | 0);
	                var11 = this.ballVX;
	                var12 = this.ballVY - this.p3YV;
	                if (var9 > 0 && var10 < this.p1Diam + this.ballRad && var10 > var1) {
	                    var13 = (((var8 * var11 + var9 * var12) / var10 | 0) * 2 / 3 | 0);
	                    this.ballX = this.p3X + (((this.p1Diam + this.ballRad) / 2 | 0) * var8 / var10 | 0);
	                    this.ballY = this.p3Y + ((this.p1Diam + this.ballRad) * var9 / var10 | 0);
	                    if (var13 <= 0) {
	                        this.ballVX += (-2 * var8 * var13 / var10 | 0);
	                        if (this.ballVX < -var4) {
	                            this.ballVX = -var4;
	                        }
	                        if (this.ballVX > var2) {
	                            this.ballVX = var2;
	                        }
	                        this.ballVY += this.p3YV - (2 * var9 * var13 / var10 | 0);
	                        if (this.ballVY < -var3) {
	                            this.ballVY = -var3;
	                        }
	                        if (this.ballVY > var3) {
	                            this.ballVY = var3;
	                        }
	                    }
	                    if (!this.fP1Touched && this.fP2Touched && this.bounces === 0 && !this.fNoBall) {
	                        this.promptMsg = this.COMM_CTBEHIND[((this.COMM_CTBEHIND.length * Math.random()) | 0)];
	                        this.thisBall = -this.wicketPenalty;
	                    }
	                    else if (this.p2X < this.battingCrease - (this.p2Diam / 2 | 0) && this.p2X > this.runningCrease + (this.p2Diam / 2 | 0) || this.p2Y !== 0) {
	                        if (this.p2XMin - (this.p2Diam / 2 | 0) > this.runningCrease && !this.fNoBall && !this.fP1Touched) {
	                            this.promptMsg = this.COMM_STUMPED[((this.COMM_STUMPED.length * Math.random()) | 0)];
	                        }
	                        else {
	                            this.promptMsg = this.COMM_RUNOUT[((this.COMM_RUNOUT.length * Math.random()) | 0)];
	                        }
	                        this.thisBall = -this.wicketPenalty;
	                    }
	                    this.fP1Touched = true;
	                }
	                if (this.ballX < 5) {
	                    this.ballX = 5;
	                    this.ballVX = (-this.ballVX * 2 / 3 | 0);
	                    if (this.fP2Touched && this.bounces === 0 && !this.fHitBackWall) {
	                        this.promptMsg = this.COMM_SIX[((this.COMM_SIX.length * Math.random()) | 0)];
	                        if (this.fP1Touched && Math.random() < 0.7) {
	                            this.promptMsg = this.COMM_SIXTOUCHED[((this.COMM_SIXTOUCHED.length * Math.random()) | 0)];
	                        }
	                        this.drawPrompt(this.promptMsg, 1);
	                        this.promptMsg = "";
	                        this.thisBall += 6;
	                    }
	                    else if (this.fP2Touched && !this.fHitBackWall) {
	                        this.promptMsg = this.COMM_FOUR[((this.COMM_FOUR.length * Math.random()) | 0)];
	                        if (this.fP1Touched && Math.random() < 0.7) {
	                            this.promptMsg = this.COMM_FOURTOUCHED[((this.COMM_FOURTOUCHED.length * Math.random()) | 0)];
	                        }
	                        this.drawPrompt(this.promptMsg, 1);
	                        this.promptMsg = "";
	                        this.thisBall += 4;
	                    }
	                    else if (!this.fP2Touched) {
	                        this.fNoBall = true;
	                        this.drawPrompt("No ball! (must bowl forwards)", 2);
	                    }
	                    if (this.fP2Touched) {
	                        this.fHitBackWall = true;
	                    }
	                }
	                if (this.ballX > 995) {
	                    this.ballX = 995;
	                    this.ballVX = (-this.ballVX * 2 / 3 | 0);
	                    this.fHitBackWall = true;
	                }
	                if (this.ballX > this.postPos - this.ballRad && this.ballX < this.postPos + this.ballRad && this.ballY < 105 + this.ballRad) {
	                    if ((this.p2X < this.battingCrease - (this.p2Diam / 2 | 0) && this.p2X > this.runningCrease + (this.p2Diam / 2 | 0) || this.p2Y !== 0) && this.fP1Touched && this.fP2Touched) {
	                        this.promptMsg = this.COMM_RUNOUT[((this.COMM_RUNOUT.length * Math.random()) | 0)];
	                        this.thisBall = -this.wicketPenalty;
	                    }
	                    else if (!this.fNoBall && !this.fHitBackWall && this.p1Touches === 1) {
	                        this.promptMsg = this.COMM_BOWLED[((this.COMM_BOWLED.length * Math.random()) | 0)];
	                        if (this.fP2Touched && Math.random() < 0.5) {
	                            this.promptMsg = this.COMM_PLAYEDON[((this.COMM_PLAYEDON.length * Math.random()) | 0)];
	                        }
	                        this.thisBall = -this.wicketPenalty;
	                    }
	                    this.fHitBackWall = true;
	                    if (this.ballVY < 0 && this.ballY > 105 + this.ballRad) {
	                        this.ballVY *= -1;
	                        this.ballY = 105 + this.ballRad;
	                    }
	                    else if (this.ballX < this.postPos) {
	                        this.ballX = this.postPos - 17;
	                        this.ballVX = ((this.ballVX >= 0 ? -this.ballVX : this.ballVX) * 3 / 4 | 0);
	                    }
	                    else {
	                        this.ballX = this.postPos + 17;
	                        this.ballVX = ((this.ballVX <= 0 ? -this.ballVX : this.ballVX) * 3 / 4 | 0);
	                    }
	                    this.fP2Touched = true;
	                }
	            }
	            if (this.ballX > this.ballXMax) {
	                this.ballXMax = this.ballX;
	            }
	            var6 = (this.ballX * this.nWidth / 1000 | 0);
	            var7 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	            this.screen.setColor(this.BALL_COL);
	            this.screen.fillOval(var6 - var5, var7 - var5, 2 * var5, 2 * var5);
	            this.drawScores();
	            if (this.promptMsg.length > 0) {
	                if (this.promptMsg.length > 1 && Math.random() < 0.3) {
	                    this.promptMsg = this.COMM_OUT_GENERIC[((this.COMM_OUT_GENERIC.length * Math.random()) | 0)];
	                }
	                this.drawPrompt(this.promptMsg, 0);
	                this.getGraphics().drawImage(this.buffer, 0, 0, this);
	                if (this.promptMsg.length > 1) {
	                    yield shims_1.Thread.sleep(1500);
	                }
	                this.promptMsg = "";
	                this.nextBall();
	            }
	        });
	    }
	    sleep(var1) {
	        if (this.gameThread != null) {
	            try {
	                shims_1.Thread.sleep(var1);
	            }
	            catch (var3) {
	            }
	            ;
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(this.COURT_COL);
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(var1, var2) {
	        if (((typeof var1 === 'string') || var1 === null) && ((typeof var2 === 'number') || var2 === null)) {
	            return (() => {
	                var var3 = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("white"));
	                this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var3.getHeight() * (var2 + 1) + 10);
	            })();
	        }
	        else if (var1 === undefined && var2 === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    drawScores() {
	        if (this.inns !== 0) {
	            var var1 = this.screen;
	            var var2 = var1.getFontMetrics();
	            var var3 = 1;
	            var1.setColor(this.SKY_COL);
	            var1.fillRect(0, 0, (this.nWidth / 2 | 0), 3 * var2.getAscent() + 10);
	            var1.setColor(shims_1.Color.fromString("white"));
	            var var4 = this.slimeColText[this.p2Col] + (this.p2Score + Math.round(this.thisBall));
	            var1.drawString(var4, 10, (var2.getAscent() + 3) * var3 + 10);
	            var var5 = var3 + 1;
	            if (this.inns !== 1) {
	                var4 = this.slimeColText[this.p1Col] + this.p1Score;
	                var1.drawString(var4, 10, (var2.getAscent() + 3) * var5 + 10);
	                ++var5;
	            }
	            if (this.ballCount < 6 * this.overs - 1) {
	                var4 = "Over: " + (this.ballCount / 6 | 0);
	                if (this.ballCount % 6 !== 0) {
	                    var4 = var4 + "." + this.ballCount % 6;
	                }
	                var4 = var4 + " (" + this.overs + ")";
	            }
	            else if (this.ballCount === 6 * this.overs - 1) {
	                var4 = "Last ball";
	            }
	            else {
	                var4 = "Over: " + this.overs;
	            }
	            var1.drawString(var4, 10, (var2.getAscent() + 3) * var5 + 20);
	            ++var5;
	            if (this.p1X !== 200 || this.p2X !== 800 || this.fP1Touched || this.fP2Touched) {
	            }
	        }
	    }
	    drawWorm() {
	        var var1 = this.buffer.getGraphics();
	        var var2 = var1.getFontMetrics();
	        var var5 = this.getMinScore(1);
	        var var7 = this.getMinScore(2);
	        var var11 = this.getMaxScore(1);
	        var var13 = this.getMaxScore(2);
	        var var3 = var5 < var7 ? var5 : var7;
	        var var9 = var11 > var13 ? var11 : var13;
	        if (var3 !== 0 || var9 !== 0) {
	            var var15 = (this.nWidth * 4 / 5 | 0) - 5;
	            var var16 = (this.nWidth / 5 | 0);
	            var var17 = ((5 + Math.round(Math.round(((this.nHeight / 5 | 0))) * var9 / (var9 - var3))) | 0);
	            var var18 = (this.nHeight / 5 | 0);
	            if (this.fEndOfOver) {
	                var15 = (this.nWidth / 10 | 0) - 5;
	                var16 = (this.nWidth * 4 / 5 | 0);
	                var17 = ((Math.round(Math.round(((this.nHeight * 2 / 5 | 0))) * var9 / (var9 - var3)) + Math.round(((this.nHeight * 3 / 10 | 0)))) | 0);
	                var18 = (this.nHeight * 2 / 5 | 0);
	            }
	            if (this.inns === 2) {
	                var1.setColor(this.slimeColours[this.p1Col]);
	                var1.drawString(this.slimeColAbbr[this.p1Col], var15 - var2.stringWidth(this.slimeColAbbr[this.p1Col]) - 5, var17 - ((Math.round(Math.round((var9 + var3) / 2) * Math.round(var18) / (var9 - var3))) | 0));
	                var1.drawLine(var15, var17, var15 + (var16 / (6 * this.overs) | 0), ((Math.round(var17) - Math.round(Math.round(var18) * this.p1bxb[0] / (var9 - var3))) | 0));
	                for (var var19 = 1; var19 < 6 * this.overs; ++var19) {
	                    var1.drawLine(var15 + (var16 * var19 / (6 * this.overs) | 0), ((Math.round(var17) - Math.round(Math.round(var18) * this.p1bxb[var19 - 1] / (var9 - var3))) | 0), var15 + (var16 * (var19 + 1) / (6 * this.overs) | 0), ((Math.round(var17) - Math.round(Math.round(var18) * this.p1bxb[var19] / (var9 - var3))) | 0));
	                }
	                var1.setColor(this.slimeColours[this.p2Col]);
	                var1.drawString(this.slimeColAbbr[this.p2Col], var15 - var2.stringWidth(this.slimeColAbbr[this.p2Col]) - 5, var17 - ((Math.round(Math.round((var9 + var3) / 2) * Math.round(var18) / (var9 - var3))) | 0) + var2.getAscent());
	                var1.drawLine(var15, var17, var15 + (var16 / (6 * this.overs) | 0), ((Math.round(var17) - Math.round(Math.round(var18) * this.p2bxb[0] / (var9 - var3))) | 0));
	                for (var var20 = 1; var20 < this.ballCount; ++var20) {
	                    var1.drawLine(var15 + (var16 * var20 / (6 * this.overs) | 0), ((Math.round(var17) - Math.round(Math.round(var18) * this.p2bxb[var20 - 1] / (var9 - var3))) | 0), var15 + (var16 * (var20 + 1) / (6 * this.overs) | 0), ((Math.round(var17) - Math.round(Math.round(var18) * this.p2bxb[var20] / (var9 - var3))) | 0));
	                }
	                var1.setColor(shims_1.Color.fromString("white"));
	                var1.drawString(/* valueOf */ new String(var9).toString(), var15 - 5 - var2.stringWidth(/* valueOf */ new String(var9).toString()), var17 - ((Math.round(var9 * Math.round(var18) / (var9 - var3))) | 0) + var2.getAscent());
	                var1.drawString(/* valueOf */ new String(var3).toString(), var15 - 5 - var2.stringWidth(/* valueOf */ new String(var3).toString()), var17 - ((Math.round(var3 * Math.round(var18) / (var9 - var3))) | 0));
	                var1.drawLine(var15, var17 - ((Math.round(var9 * Math.round(var18) / (var9 - var3))) | 0), var15, var17 - ((Math.round(var3 * Math.round(var18) / (var9 - var3))) | 0));
	                var1.drawLine(var15, var17, var15 + var16, var17);
	            }
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var1 = this.getGraphics();
	            while ((this.gameThread != null)) {
	                if (this.__wait > 0) {
	                    --this.__wait;
	                }
	                this.p1OldX = this.p1X;
	                this.p1OldY = this.p1Y;
	                this.p2OldX = this.p2X;
	                this.p2OldY = this.p2Y;
	                this.p3OldY = this.p3Y;
	                this.ballOldX = this.ballX;
	                this.ballOldY = this.ballY;
	                this.MoveSlimers();
	                yield this.DrawSlimers();
	                var1.drawImage(this.buffer, 0, 0, null);
	                if (this.ballCount === this.overs * 6 && !this.fNoBall) {
	                    this.fInPlay = false;
	                    if (this.inns === 1) {
	                        this.promptMsg = "Click the mouse to continue...";
	                    }
	                    else {
	                        this.DoFatality();
	                        this.promptMsg = "Click team names to select teams, then choose an innings length to start!";
	                        this.fEndGame = true;
	                        if (this.p1ai) {
	                            this.p1Col = 9;
	                        }
	                        if (this.p2ai) {
	                            this.p2Col = 9;
	                        }
	                        this.p1ai = this.p2ai = false;
	                    }
	                    this.gameThread = null;
	                }
	                if (this.gameThread != null) {
	                    try {
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var2) {
	                    }
	                    ;
	                }
	            }
	            ;
	            if (!this.fEndOfOver) {
	                this.fInPlay = false;
	            }
	            this.repaint();
	        });
	    }
	    DoFatality() {
	        this.getGraphics();
	        if (this.p1Score > this.p2Score) {
	            this.p1J();
	            this.drawPrompt(this.slimeColText[this.p1Col] + " wins!", 1);
	        }
	        else if (this.p2Score > this.p1Score) {
	            this.p2J();
	            this.drawPrompt(this.slimeColText[this.p1Col] + " wins!", 1);
	        }
	        else {
	            this.drawPrompt("It\'s a tie!", 1);
	        }
	        this.p1ai = this.p2ai = false;
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    bowl() {
	        if (this.__wait <= 0) {
	            if (this.balltype === -1) {
	                switch ((this.difficulty)) {
	                    case 0:
	                        this.balltype = 0;
	                        break;
	                    case 1:
	                        this.balltype = ((4.0 * Math.random()) | 0);
	                        break;
	                    case 2:
	                        this.balltype = ((2.0 * Math.random()) | 0) + 2;
	                }
	            }
	            if (this.difficulty === 2 && this.p2X - (this.p2Diam / 2 | 0) < this.battingCrease - ((this.battingCrease - this.runningCrease) / 4 | 0)) {
	                this.balltype = 1;
	            }
	            switch ((this.balltype)) {
	                case 0:
	                    if (this.p1X > this.runningCrease - (this.p1Diam * 5 / 6 | 0)) {
	                        this.p1L();
	                        return;
	                    }
	                    if (this.ballY < 200 && this.ballVY < 0) {
	                        this.p1J();
	                        return;
	                    }
	                    this.p1S();
	                    return;
	                case 1:
	                    if (this.p1X > this.runningCrease - (this.p1Diam * 3 / 4 | 0)) {
	                        this.p1L();
	                    }
	                    else {
	                        this.p1S();
	                    }
	                    if (this.ballY < 320 && this.ballVY < 0) {
	                        this.p1J();
	                        return;
	                    }
	                    break;
	                case 2:
	                    if (this.ballVY > 0 && this.p1X > this.runningCrease - (this.p1Diam * 5 / 6 | 0)) {
	                        this.p1L();
	                    }
	                    else {
	                        this.p1S();
	                    }
	                    if (this.ballY > 270 && this.ballVY > 0) {
	                        this.p1J();
	                        return;
	                    }
	                    break;
	                case 3:
	                    if (this.p1X > this.runningCrease - (this.p1Diam * 2 / 3 | 0)) {
	                        this.p1L();
	                        return;
	                    }
	                    this.p1S();
	                    return;
	            }
	        }
	    }
	    field() {
	        if (this.bounces === 0) {
	            if (this.difficulty > 1 && this.ballX > this.p1X && this.ballVX < 0 && this.ballY > (this.p1Diam / 2 | 0) && Math.sqrt(((this.ballX - this.p1X) * (this.ballX - this.p1X) + (this.ballY - this.p1Y) * (this.ballY - this.p1Y))) < 250.0) {
	                this.p1J();
	            }
	            if (this.difficulty === 2 && this.ballX > this.postPos && Math.sqrt(((this.ballX - this.p3X) * (this.ballX - this.p3X) + (this.ballY - this.p3Y) * (this.ballY - this.p3Y))) < 250.0) {
	                this.p3J();
	            }
	        }
	        if (this.difficulty < 2 && !this.fP2Touched && this.ballbowled) {
	            this.p1S();
	        }
	        else if (this.p1X + (this.p1Diam / 2 | 0) > this.ballX) {
	            this.p1L();
	        }
	        else if (this.p1X + this.p1Diam + (this.ballRad * 3 / 2 | 0) < this.postPos) {
	            this.p1R();
	        }
	        else if ((this.p2X + (this.p2Diam / 2 | 0) < this.battingCrease && this.p2X - (this.p2Diam / 2 | 0) > this.runningCrease || this.p2Y !== 0) && this.fP1Touched) {
	            this.p1R();
	        }
	        else {
	            this.p1S();
	        }
	        if (this.ballX > this.p1Diam && this.ballY < (this.p1Diam / 2 | 0) && this.ballVX <= 0 && !this.fHitBackWall && this.p1X - this.ballX < this.p1Diam && this.p1X > this.ballX && this.bounces > 0 && this.difficulty === 2) {
	            this.p1J();
	        }
	    }
	    playball() {
	        var var1 = Math.sqrt(((this.ballX - this.p2X) * (this.ballX - this.p2X) + (this.ballY - this.p2Y) * (this.ballY - this.p2Y)));
	        var var3 = false;
	        var var4 = 0;
	        var var5 = this.ballY;
	        for (var var6 = this.ballVY; var5 > 0; var5 += var6) {
	            ++var4;
	            --var6;
	        }
	        var var8 = this.ballX + this.ballVX * var4;
	        var var7 = var8 < this.postPos - this.p2Diam && var8 >= this.p2X - var4 * 8;
	        switch ((this.difficulty)) {
	            case 0:
	                if (var1 < 400.0 && this.ballX - this.p2X < (this.p2Diam * 3 / 2 | 0) && this.ballX < this.p2X && this.ballY < this.p2Y + (this.p2Diam * 3 / 2 | 0)) {
	                    this.p2L();
	                }
	                else {
	                    this.p2S();
	                }
	                if (var1 < 350.0 && this.ballY > this.p2Diam * 2 && this.ballX > this.p2X - this.p2Diam) {
	                    this.p2J();
	                    return;
	                }
	                break;
	            case 1:
	            case 2:
	                if (this.ballbowled && this.shottype === -1) {
	                    if (this.p2Score > this.p1Score && this.inns === 2 && var7) {
	                        this.shottype = 1;
	                    }
	                    else if (var7 && Math.random() < 0.5) {
	                        if (Math.random() < 0.75) {
	                            this.shottype = 4;
	                        }
	                        else {
	                            this.shottype = 1;
	                        }
	                    }
	                    else if (var8 <= this.battingCrease && Math.random() >= 0.6) {
	                        this.shottype = 2;
	                    }
	                    else {
	                        this.shottype = 3;
	                    }
	                }
	                switch ((this.shottype)) {
	                    case 1:
	                        if (this.ballbowled && this.p2X - this.p2XV - (this.p2Diam / 2 | 0) > var8) {
	                            this.p2L();
	                            return;
	                        }
	                        this.p2S();
	                        return;
	                    case 2:
	                        if (this.ballbowled && this.p2X - this.p2XV - this.p2Diam > var8) {
	                            this.p2L();
	                            return;
	                        }
	                        this.p2S();
	                        if (this.ballX > this.p2X - (this.p2Diam * 2 / 3 | 0)) {
	                            this.p2J();
	                            return;
	                        }
	                        break;
	                    case 3:
	                        if (this.ballbowled && this.p2X + this.p2XV + 50 > var8) {
	                            this.p2L();
	                            return;
	                        }
	                        this.p2S();
	                        if (this.ballX > this.p2X - (this.p2Diam / 2 | 0)) {
	                            this.p2J();
	                            return;
	                        }
	                        break;
	                    case 4:
	                        if (!this.ballbowled || this.p2X - this.p2XV - (this.p2Diam / 2 | 0) <= var8 && this.ballX + 3 * this.ballVX <= this.p2X - (this.p2Diam / 2 | 0)) {
	                            this.p2S();
	                            return;
	                        }
	                        this.p2L();
	                        return;
	                }
	        }
	    }
	    running() {
	        var var1 = false;
	        if (this.ballX > this.postPos || this.ballX > this.p1X && (this.p1X - this.ballX < 400 || this.p1X - this.ballX < 300 && this.ballVX > 0)) {
	            var1 = true;
	        }
	        if (this.ballX < this.runningCrease || this.p1X < this.runningCrease && this.ballVX < 0 && this.ballX < this.battingCrease) {
	            var1 = false;
	        }
	        if (this.ballX < this.postPos && this.p1X < this.p2X && this.ballX > this.p2X && this.p2X - (this.p2Diam / 2 | 0) <= this.runningCrease) {
	            var1 = false;
	        }
	        if (this.ballX < this.postPos && this.ballX - this.p2X > this.battingCrease - this.runningCrease) {
	            var1 = false;
	        }
	        if (var1 && (this.p2X + (this.p2Diam / 2 | 0) >= this.battingCrease || this.p2X - (this.p2Diam / 2 | 0) <= this.runningCrease)) {
	            this.p2S();
	        }
	        else if (var1) {
	            if (this.p2X <= this.runningCrease + ((this.battingCrease - this.runningCrease) / 2 | 0) && this.difficulty >= 2) {
	                this.p2L();
	            }
	            else {
	                this.p2R();
	            }
	        }
	        else if (!var1 && this.p2X - (this.p2Diam / 2 | 0) <= this.runningCrease && this.p2X === this.p2XMax) {
	            this.p2R();
	        }
	        else {
	            if (!var1 && this.p2X + (this.p2Diam / 2 | 0) >= this.battingCrease && this.p2X >= this.p2XMin) {
	                this.p2L();
	            }
	        }
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SlimeCricket2;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class DodgeBallSlime extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.slimeColText = ["Argentina", "Belgium", "Australia", "Iceland", "Cameroon", "P.R. of China", "Costa Rica", "Croatia", "Denmark", "Eucador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "Seth Efrica", "South Corea", "Sveden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany", "Night Elves"];
	        this.darkRed = new shims_1.Color(128, 0, 0);
	        this.darkGreen = new shims_1.Color(0, 128, 0);
	        this.darkBlue = new shims_1.Color(0, 0, 128);
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.ballCount = 0;
	        this.swapped = 0;
	        this.p1Throw = 0;
	        this.p2Throw = 0;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Sticky = false;
	        this.fP2Sticky = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.p1TouchingGoal = 0;
	        this.p2TouchingGoal = 0;
	        this.fEndGame = false;
	        this.fPlayOn = false;
	        this.nScoreX = 0;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.playOnTicks = 0;
	        this.SMILE_DIFF = 0;
	        this.DAMPING = 0;
	        this.MAX_TICKS_TOUCHING_GOAL = 0;
	        this.JUMPVEL = 0;
	        this.SLIMEVEL = 0;
	        this.GRAVITY = 0;
	        this.gameLength = 0;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fSuperSlime = false;
	        this.doubleBuffered = false;
	        this.slimaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), this.darkGreen, shims_1.Color.fromString("white"), this.darkRed, this.darkRed, new shims_1.Color(119, 41, 28), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(128, 128, 255), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(119, 41, 28), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(185, 30, 2), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(252, 239, 82), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(16, 180, 180), new shims_1.Color(241, 245, 71), new shims_1.Color(230, 230, 230), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue")];
	        this.secondaryCols = [shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), new shims_1.Color(128, 128, 255), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), this.darkBlue, shims_1.Color.fromString("green"), shims_1.Color.fromString("blue"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), this.darkGreen, shims_1.Color.fromString("white"), new shims_1.Color(128, 255, 128), new shims_1.Color(255, 128, 0), this.darkGreen, this.darkBlue, new shims_1.Color(13, 131, 10), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), new shims_1.Color(7, 177, 33), shims_1.Color.fromString("red"), shims_1.Color.fromString("black"), shims_1.Color.fromString("blue")];
	        this.ballCol = shims_1.Color.fromString("red");
	        this.SlimaryColsOriginal = shims_1.Color.fromString("red");
	        this.ballCount = 11;
	        this.swapped = 0;
	        this.p1Throw = 1;
	        this.p2Throw = 0;
	        this.frenzyCol = 0;
	        this.SMILE_DIFF = 2;
	        this.DAMPING = 7;
	        this.MAX_TICKS_TOUCHING_GOAL = 600000000;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.pointsX = new Array(0);
	        this.pointsY = new Array(0);
	        this.p2Col = 1;
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    initStuff() {
	        this.swapped = 0;
	        this.p1Throw = 1;
	        this.p2Throw = 0;
	        this.fEndGame = true;
	        this.p1X = 200;
	        this.p1Y = 0;
	        this.p2X = 800;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.ballOldX = this.ballX = 500;
	        this.ballOldY = this.ballY = 200;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.playOnTicks = 10;
	        this.fPlayOn = false;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.JUMPVEL = !this.fSuperSlime ? 31 : 65;
	        this.SLIMEVEL = !this.fSuperSlime ? 8 : 16;
	        this.GRAVITY = !this.fSuperSlime ? 2 : 8;
	    }
	    drawButtons() {
	        var buttons = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "World Cup"];
	        var fm = this.screen.getFontMetrics();
	        var darkBlue = new shims_1.Color(0, 0, 128);
	        for (var i = 0; i < 5; ++i) {
	            this.screen.setColor(darkBlue);
	            this.screen.fillRect(((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(buttons[i], ((2 * i + 1) * this.nWidth / 10 | 0) - (fm.stringWidth(buttons[i]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (fm.getHeight() / 2 | 0));
	        }
	        this.flip();
	    }
	    testButton(x, y) {
	        for (var i = 0; i < 5; ++i) {
	            if (x > ((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) && x < ((2 * i + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) && y > (this.nHeight * 2 / 10 | 0) && y < (this.nHeight * 3 / 10 | 0)) {
	                if (i === 4) {
	                    this.gameLength = 120000;
	                    this.worldCup = true;
	                }
	                else {
	                    this.gameLength = (1 << i) * 60000;
	                    this.worldCup = false;
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    handleEvent(event) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((event.id)) {
	                case 401:
	                case 403:
	                    if (this.fCanChangeCol) {
	                        switch ((event.key)) {
	                            case 54:
	                                this.fSuperSlime = !this.fSuperSlime;
	                                this.repaint();
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                do {
	                                    this.p2Col = this.p2Col !== 0 ? this.p2Col - 1 : this.slimaryCols.length - 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                do {
	                                    this.p2Col = this.p2Col === this.slimaryCols.length - 1 ? 0 : this.p2Col + 1;
	                                } while ((this.p2Col === this.p1Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 83:
	                            case 115:
	                                do {
	                                    this.p1Col = this.p1Col === this.slimaryCols.length - 1 ? 0 : this.p1Col + 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 87:
	                            case 119:
	                                while ((true)) {
	                                    this.p1Col = this.p1Col !== 0 ? this.p1Col - 1 : this.slimaryCols.length - 1;
	                                    if (this.p1Col !== this.p2Col) {
	                                        this.drawScores();
	                                        this.repaint();
	                                        break;
	                                    }
	                                }
	                                ;
	                        }
	                    }
	                    if (!this.fEndGame) {
	                        switch ((event.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                return false;
	                            case 65:
	                            case 97:
	                                this.p1XV = -this.SLIMEVEL;
	                                return false;
	                            case 66:
	                            case 98:
	                                this.toggleBuffering();
	                                return false;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.SLIMEVEL;
	                                return false;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (this.p2Y === 0 && !this.worldCup) {
	                                    this.p2YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                if (!this.worldCup) {
	                                    this.p2XV = -this.SLIMEVEL;
	                                }
	                                return false;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                if (!this.worldCup) {
	                                    this.fP2Sticky = false;
	                                }
	                                if (this.p2Throw === 1 && this.ballX > this.p2X - 10 && this.ballX < this.p2X + 10) {
	                                    this.ballVX = -20;
	                                }
	                                return false;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                if (!this.worldCup) {
	                                    this.p2XV = this.SLIMEVEL;
	                                }
	                                return false;
	                            case 83:
	                            case 115:
	                                this.fP1Sticky = false;
	                                if (this.p1Throw === 1 && this.ballX > this.p1X - 10 && this.ballX < this.p1X + 10) {
	                                    this.ballVX = 20;
	                                }
	                                return false;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.JUMPVEL;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((event.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                        case 1005:
	                            if (this.p2Throw === 1) {
	                                this.fP2Sticky = true;
	                            }
	                            if (this.p2Throw === 0) {
	                                this.fP2Sticky = false;
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 83:
	                        case 115:
	                            if (this.p1Throw === 1) {
	                                this.fP1Sticky = true;
	                            }
	                            if (this.p1Throw === 0) {
	                                this.fP1Sticky = false;
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay && this.testButton(event.x, event.y)) {
	                        this.p1Throw = 1;
	                        this.p2Throw = 0;
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 500;
	                        this.ballY = 200;
	                        this.ballOldX = 500;
	                        this.ballOldY = 200;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1Score = 0;
	                        this.p2Score = 0;
	                        this.promptMsg = "";
	                        this.paint(this.getGraphics());
	                        try {
	                            yield shims_1.Thread.sleep(100);
	                        }
	                        catch (var4) {
	                        }
	                        ;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
	                    this.requestFocus();
	            }
	            return false;
	        });
	    }
	    DrawSlimers() {
	        var k1 = (this.nWidth / 10 | 0);
	        var j2 = (this.nHeight / 10 | 0);
	        var i3 = (this.nWidth / 50 | 0);
	        var j3 = (this.nHeight / 25 | 0);
	        var k3 = (this.ballX * this.nWidth / 1000 | 0);
	        var l3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var i = (this.p1OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        var l = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        i = (this.p2OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        if (!this.fEndGame) {
	            this.MoveBall();
	        }
	        i = (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p1Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 2 / 5 | 0);
	        this.pointsX[3] = i + (k1 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var l4 = this.p1X + 38;
	        var i5 = this.p1Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        var i4 = i - k3;
	        var j4 = l - l3;
	        var k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        var flag = Math.random() < 0.01;
	        if (flag) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var i2;
	        var l2;
	        var k;
	        var j1;
	        var k5;
	        if (this.p1Score > this.p2Score + 2) {
	            i2 = (this.p1X * this.nWidth / 1000 | 0);
	            l2 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            k = (this.nWidth / 20 | 0);
	            j1 = (this.nHeight / 20 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        i = (this.p2X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p2Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 3 / 5 | 0);
	        this.pointsX[3] = i + (k1 * 7 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        l4 = this.p2X - 18;
	        i5 = this.p2Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        i4 = i - k3;
	        j4 = l - l3;
	        k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        flag = Math.random() < 0.01;
	        if (flag) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(!flag ? shims_1.Color.fromString("white") : shims_1.Color.fromString("gray"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        if (this.p2Score > this.p1Score + 2) {
	            i2 = (this.nWidth / 20 | 0);
	            l2 = (this.nHeight / 20 | 0);
	            k = (this.p2X * this.nWidth / 1000 | 0) - i2;
	            j1 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	    }
	    paint(g) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.drawScores();
	        if (!this.fInPlay) {
	            this.DrawSlimers();
	            this.drawButtons();
	        }
	        this.DrawGoals();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var fontmetrics = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fSuperSlime) {
	                this.screen.drawString("Super Dodgeball Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Super Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            else {
	                this.screen.drawString("Dodgeball Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            fontmetrics = this.screen.getFontMetrics();
	            this.screen.drawString("Written by Quin Pendragon + Anonymous Tipster", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Written by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + fontmetrics.getHeight() * 2);
	        }
	        this.flip();
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    ReplayFrame(i, j, k, l, i1, flag) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (flag) {
	                this.ballX = -1000;
	                this.ballOldX = 500;
	                this.ballY = -1000;
	                this.ballOldY = 500;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var j1 = i === 0 ? 199 : i - 1;
	                this.p1OldX = this.replayData[j1][0];
	                this.p1OldY = this.replayData[j1][1];
	                this.p2OldX = this.replayData[j1][2];
	                this.p2OldY = this.replayData[j1][3];
	                if (i === 0) {
	                    this.ballOldX = 500;
	                    this.ballOldY = 200;
	                }
	                else {
	                    this.ballOldX = this.replayData[j1][4];
	                    this.ballOldY = this.replayData[j1][5];
	                }
	            }
	            this.p1X = this.replayData[i][0];
	            this.p1Y = this.replayData[i][1];
	            this.p2X = this.replayData[i][2];
	            this.p2Y = this.replayData[i][3];
	            this.ballX = this.replayData[i][4];
	            this.ballY = this.replayData[i][5];
	            this.p1Col = this.replayData[i][6];
	            this.p2Col = this.replayData[i][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((i / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", j, k);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(j, k - i1, l, i1 * 2);
	            }
	            this.DrawSlimers();
	            this.DrawGoals();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var9) {
	            }
	            ;
	        });
	    }
	    MakeTime(l) {
	        var l1 = Math.round(l / 10) % 100;
	        var l2 = Math.round(l / 1000) % 60;
	        var l3 = Math.round(l / 60000) % 60;
	        var s = "";
	        if (l3 < 10) {
	            s = s + "0";
	        }
	        s = s + l3;
	        s = s + ":";
	        if (l2 < 10) {
	            s = s + "0";
	        }
	        s = s + l2;
	        s = s + ":";
	        if (l1 < 10) {
	            s = s + "0";
	        }
	        s = s + l1;
	        return s;
	    }
	    MoveSlimers() {
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 0:
	                    this.controlP2v0();
	                    break;
	                case 1:
	                    this.controlP2v1();
	                    break;
	                case 2:
	                    this.controlP2v2();
	                    break;
	                case 3:
	                    this.controlP2v3();
	            }
	        }
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 950) {
	            this.p1X = 950;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.GRAVITY;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.GRAVITY;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    MoveBall() {
	        ++this.ballCount;
	        if (this.ballCount > 5) {
	            this.ballCol = shims_1.Color.fromString("pink");
	        }
	        if (this.ballCount > 10) {
	            this.ballCol = shims_1.Color.fromString("yellow");
	        }
	        var k = (30 * this.nHeight / 1000 | 0);
	        var i = (this.ballOldX * this.nWidth / 1000 | 0);
	        var j = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var l1 = (this.ballX - this.p1X) * 1;
	            if (this.p1Throw === 1) {
	                l1 = (this.ballX - this.p1X) * 1;
	            }
	            if (this.p1Throw === 0) {
	                l1 = (this.ballX - this.p1X) * 3;
	            }
	            var i2 = this.ballY - this.p1Y;
	            var j2 = l1 * l1 + i2 * i2;
	            var k2 = this.ballVX - this.p1XV;
	            var l2 = this.ballVY - this.p1YV;
	            var i1;
	            var k1;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p1X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p1Y + (i2 * 125 / i1 | 0);
	                if (this.p1Throw === 0) {
	                    if (k1 <= 0) {
	                        ++this.p2Score;
	                        this.ballVX = -this.ballVX;
	                        this.ballVY = -this.ballVY;
	                        if (this.p2Score === 1) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
	                        }
	                        if (this.p2Score === 2) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores....for the second time";
	                        }
	                        if (this.p2Score === 3) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + "..Wabam!";
	                        }
	                        if (this.p2Score === 4) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + "..double Wabam!";
	                        }
	                        if (this.p2Score === 5) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + "- gimmie a hi-five!";
	                        }
	                        if (this.p2Score === 6) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + "- six points and going strong";
	                        }
	                        if (this.p2Score === 7) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + "- another point";
	                        }
	                        if (this.p2Score === 8) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + "- will he ever stop scoring?";
	                        }
	                        if (this.p2Score === 9) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + "- he scores ruthlessly";
	                        }
	                        if (this.p2Score > 9 && this.p1Score < 20) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores -" + this.slimeColText[this.p1Col] + " is taking a beating!";
	                        }
	                        if (this.p2Score > 19 && this.p1Score < 30) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + " - Yet again";
	                        }
	                        if (this.p2Score > 19 && this.p1Score < 30) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + " - Yet again....and again";
	                        }
	                        if (this.p2Score > 29 && this.p1Score < 40) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + " - Yet again....and again....and again";
	                        }
	                        if (this.p2Score > 39) {
	                            this.promptMsg = this.slimeColText[this.p2Col] + "...Too many goals to count";
	                        }
	                        this.drawScores();
	                        this.drawPrompt();
	                        this.ballCol = shims_1.Color.fromString("red");
	                        this.ballCount = 0;
	                    }
	                    ++this.ballCount;
	                    if (this.ballCount > 20) {
	                        this.ballCol = shims_1.Color.fromString("yellow");
	                    }
	                }
	                if (k1 <= 0) {
	                    if (!this.fP1Sticky) {
	                        this.ballVY += this.p1YV - (2 * i2 * k1 / i1 | 0);
	                        this.ballVX += ((this.p1XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                    }
	                    else if (this.p1Throw === 1) {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	            }
	            if (this.p2Throw === 1) {
	                l1 = (this.ballX - this.p2X) * 1;
	            }
	            if (this.p2Throw === 0) {
	                l1 = (this.ballX - this.p2X) * 3;
	            }
	            i2 = this.ballY - this.p2Y;
	            j2 = l1 * l1 + i2 * i2;
	            k2 = this.ballVX - this.p2XV;
	            l2 = this.ballVY - this.p2YV;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p2X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p2Y + (i2 * 125 / i1 | 0);
	                if (this.p2Throw === 0 && k1 <= 0) {
	                    ++this.p1Score;
	                    this.ballVX = -this.ballVX;
	                    this.ballVY = -this.ballVY;
	                    if (this.p1Score === 1) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
	                    }
	                    if (this.p1Score === 2) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + " Scores....for the second time";
	                    }
	                    if (this.p1Score === 3) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + "..Wabam!";
	                    }
	                    if (this.p1Score === 4) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + "..double Wabam!";
	                    }
	                    if (this.p1Score === 5) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + "- gimmie a hi-five!";
	                    }
	                    if (this.p1Score === 6) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + "- six points and going strong";
	                    }
	                    if (this.p1Score === 7) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + "- another point";
	                    }
	                    if (this.p1Score === 8) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + "- will he ever stop scoring?";
	                    }
	                    if (this.p1Score === 9) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + "- he scores ruthlessly";
	                    }
	                    if (this.p1Score > 9 && this.p1Score < 20) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + " Scores -" + this.slimeColText[this.p2Col] + " is taking a beating!";
	                    }
	                    if (this.p1Score > 19 && this.p1Score < 30) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + " - Yet again";
	                    }
	                    if (this.p1Score > 19 && this.p1Score < 30) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + " - Yet again....and again";
	                    }
	                    if (this.p1Score > 29 && this.p1Score < 40) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + " - Yet again....and again....and again";
	                    }
	                    if (this.p1Score > 39) {
	                        this.promptMsg = this.slimeColText[this.p1Col] + "...Too many goals to count";
	                    }
	                    this.drawScores();
	                    this.drawPrompt();
	                    this.ballCol = shims_1.Color.fromString("red");
	                    this.ballCount = 0;
	                }
	                if (k1 <= 0) {
	                    if (!this.fP2Sticky) {
	                        this.ballVX += ((this.p2XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                        this.ballVY += this.p2YV - (2 * i2 * k1 / i1 | 0);
	                    }
	                    else if (this.p2Throw === 1) {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballY < 34) {
	                this.ballY = 34;
	                this.ballVY = (-this.ballVY * 7 / 10 | 0);
	                this.ballVX = (this.ballVX * 7 / 10 | 0);
	            }
	        }
	        i = (this.ballX * this.nWidth / 1000 | 0);
	        j = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.ballCol);
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	    }
	    DrawGoals() {
	    }
	    DrawStatus() {
	        var g = this.screen;
	        var fontmetrics = this.screen.getFontMetrics();
	        var s = null;
	        var time = this.MakeTime(this.gameTime);
	        if (this.gameTime < Math.round(((this.gameLength / 2 | 0)))) {
	            this.p1Throw = 0;
	            this.p2Throw = 1;
	            if (this.swapped === 0) {
	                this.promptMsg = "SWAP!";
	                this.swapped = 1;
	                this.drawPrompt();
	            }
	        }
	        var i = (this.nHeight / 20 | 0);
	        var k = 0;
	        var kt = fontmetrics.stringWidth(time);
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 1:
	                    s = "Quarter Finals";
	                    break;
	                case 2:
	                    s = "Semi-Finals";
	                    break;
	                case 3:
	                    s = "Final";
	                    break;
	                default:
	                    s = "Qualifying";
	            }
	            if (this.fGoldenGoal) {
	                s = s + " [Golden Goal]";
	            }
	            else if (this.fExtraTime) {
	                s = s + " [Extra Time]";
	            }
	            k = fontmetrics.stringWidth(s);
	        }
	        var mw = k <= kt ? kt : k;
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect((this.nWidth / 2 | 0) - (mw / 2 | 0) - 5, 0, mw + 10, i + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(time, (this.nWidth / 2 | 0) - (kt / 2 | 0), fontmetrics.getAscent() + 20);
	        if (s != null) {
	            this.screen.drawString(s, (this.nWidth / 2 | 0) - (k / 2 | 0), fontmetrics.getAscent() + 20 - fontmetrics.getHeight());
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(s, i) {
	        if (((typeof s === 'string') || s === null) && ((typeof i === 'number') || i === null)) {
	            return (() => {
	                var fontmetrics = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fontmetrics.getHeight() * (i + 1) + 10);
	            })();
	        }
	        else if (s === undefined && i === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    promptBox(msg1, msg2) {
	        var fontmetrics = this.screen.getFontMetrics();
	        var len1 = fontmetrics.stringWidth(msg1);
	        var len2 = fontmetrics.stringWidth(msg2);
	        var maxlen = len1 <= len2 ? len2 : len1;
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect((this.nWidth / 2 | 0) - (maxlen / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), maxlen + 40, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(msg1, (this.nWidth / 2 | 0) - (len1 / 2 | 0), (this.nHeight * 9 / 20 | 0));
	        this.screen.drawString(msg2, (this.nWidth / 2 | 0) - (len2 / 2 | 0), (this.nHeight * 11 / 20 | 0));
	        this.flip();
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    drawScores() {
	        var g = this.screen;
	        var k = (this.nHeight / 20 | 0);
	        var fm = this.screen.getFontMetrics();
	        var i = fm.stringWidth("Replay...");
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect(0, 0, this.nWidth, k + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        g.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, (this.nWidth / 20 | 0), k);
	        var p2ScrStr = this.p2Score + " : " + this.slimeColText[this.p2Col];
	        g.drawString(p2ScrStr, this.nWidth - (this.nWidth / 20 | 0) - fm.stringWidth(p2ScrStr), k);
	    }
	    checkScored() {
	        return false;
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.worldCupRound = 0;
	            do {
	                this.initStuff();
	                this.swapped = 0;
	                this.p1Throw = 1;
	                this.p2Throw = 0;
	                this.replayPos = this.replayStart = 0;
	                this.scoringRun = 0;
	                this.fP1Touched = this.fP2Touched = false;
	                this.gameTime = 0;
	                this.startTime = shims_1.System.currentTimeMillis();
	                this.fEndGame = false;
	                this.fCanChangeCol = false;
	                this.mousePressed = false;
	                this.gameTime = Math.round(this.gameLength);
	                this.fInPlay = true;
	                this.fEndGame = false;
	                var l;
	                if (this.worldCup) {
	                    this.paint(this.getGraphics());
	                    do {
	                        this.p2Col = ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);
	                    } while ((this.p1Col === this.p2Col));
	                    l = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
	                    switch ((this.worldCupRound)) {
	                        case 0:
	                            this.promptBox("Qualifying Round", l);
	                            this.gameLength = 30000;
	                            break;
	                        case 1:
	                            this.promptBox("Quarter Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 2:
	                            this.promptBox("Semi-Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 3:
	                            this.promptBox("World Cup Final", l);
	                            this.gameLength = 300000;
	                    }
	                    try {
	                        yield shims_1.Thread.sleep(4000);
	                    }
	                    catch (var5) {
	                    }
	                    ;
	                    this.repaint();
	                    this.flip();
	                }
	                while ((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1Score === this.p2Score)) {
	                    this.gameTime = this.startTime + Math.round(this.gameLength) - shims_1.System.currentTimeMillis();
	                    if (this.gameTime < 0) {
	                        this.gameTime = 0;
	                    }
	                    if (this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1Score === this.p2Score) {
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ".", "And the game goes into extra time...");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var10) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                        this.startTime += 30000;
	                        this.gameTime += 30000;
	                        this.fExtraTime = true;
	                    }
	                    else if (this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1Score === this.p2Score) {
	                        this.fGoldenGoal = true;
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ", and the game goes into Golden Goal.", "The next player to score will win the match!");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var9) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                    }
	                    this.SaveReplayData();
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    this.DrawGoals();
	                    this.DrawStatus();
	                    this.flip();
	                    if (this.p1X < 150) {
	                        ++this.p1TouchingGoal;
	                    }
	                    else {
	                        this.p1TouchingGoal = 0;
	                    }
	                    if (this.p2X > 850) {
	                        ++this.p2TouchingGoal;
	                    }
	                    else {
	                        this.p2TouchingGoal = 0;
	                    }
	                    if (this.fPlayOn) {
	                        --this.playOnTicks;
	                    }
	                    else {
	                        this.fPlayOn = this.checkScored();
	                    }
	                    if (this.playOnTicks === 0 || this.p1TouchingGoal > 600000000 || this.p2TouchingGoal > 600000000) {
	                        var var11 = shims_1.System.currentTimeMillis();
	                        if (this.p1TouchingGoal > 600000000) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.p2TouchingGoal > 600000000) {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.nScoreX < 500) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
	                        }
	                        else {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
	                        }
	                        this.drawPrompt();
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.flip();
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var8) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.playOnTicks = 10;
	                        this.fPlayOn = false;
	                        this.startTime += shims_1.System.currentTimeMillis() - var11;
	                        this.ballX = 490 + ((Math.random() * 20.0) | 0);
	                        this.ballY = 190 + ((Math.random() * 20.0) | 0);
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p1YV = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p2YV = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.repaint();
	                    }
	                    if (this.gameThread != null) {
	                        try {
	                            if (this.fPlayOn) {
	                                yield shims_1.Thread.sleep(120);
	                            }
	                            else {
	                                yield shims_1.Thread.sleep(20);
	                            }
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                    }
	                }
	                ;
	                this.fEndGame = true;
	                if (this.fPlayOn) {
	                    if (this.nScoreX < 500) {
	                        ++this.p2Score;
	                        this.promptMsg = this.slimeColText[this.p2Col] + " scores at the final whistle!";
	                    }
	                    else {
	                        ++this.p1Score;
	                        this.promptMsg = this.slimeColText[this.p1Col] + " scores at the final whistle!";
	                    }
	                    this.drawPrompt();
	                }
	                else {
	                    this.drawPrompt("And that\'s the final whistle!", 0);
	                }
	                if (this.worldCup) {
	                    if (this.p1Score === this.p2Score) {
	                        this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                        this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
	                        this.worldCup = false;
	                        this.flip();
	                    }
	                    else if (this.p1Score >= this.p2Score) {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the world cup!", 1);
	                                break;
	                            case 1:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
	                                break;
	                            case 2:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
	                                break;
	                            case 3:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " wins the WORLD CUP!!!!!", 1);
	                        }
	                        if (this.worldCupRound === 3) {
	                            this.worldCup = false;
	                            this.promptBox("You win the world cup!!!", "Congratulations!");
	                        }
	                        else {
	                            ++this.worldCupRound;
	                        }
	                    }
	                    else {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                            case 1:
	                                this.promptBox("You have been eliminated.", "Goodbye.");
	                                break;
	                            case 2:
	                                this.promptBox("You have been knocked out of the semifinals.", "You played well.");
	                                break;
	                            case 3:
	                                this.promptBox("You came second.", "Are you satisfied with that?");
	                        }
	                        this.worldCup = false;
	                    }
	                }
	                else if (this.p1Score === this.p2Score) {
	                    this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                }
	                else if (this.p1Score < this.p2Score) {
	                    this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1);
	                }
	                else {
	                    this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
	                }
	                this.flip();
	                try {
	                    yield shims_1.Thread.sleep(5000);
	                }
	                catch (var6) {
	                }
	                ;
	                this.initStuff();
	            } while ((this.worldCup));
	            this.fCanChangeCol = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.initStuff();
	        this.promptMsg = "Click on an option to play...";
	        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    toggleBuffering() {
	        if (this.doubleBuffered = !this.doubleBuffered) {
	            this.screen = this.backBuffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        else {
	            this.screen = this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        this.repaint();
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var fontmetrics = this.screen.getFontMetrics();
	            var i = fontmetrics.stringWidth("Replay...");
	            var j = fontmetrics.getHeight();
	            var k = (this.nWidth / 2 | 0) - (i / 2 | 0);
	            var l = (this.nHeight / 2 | 0) - j;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            var i1 = this.replayPos - 1;
	            while ((!this.mousePressed)) {
	                ++i1;
	                if (i1 >= 200) {
	                    i1 = 0;
	                }
	                if (i1 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var9) {
	                    }
	                    ;
	                    i1 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	                yield this.ReplayFrame(i1, k, l, i, j, false);
	                this.flip();
	            }
	            ;
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    flip() {
	        if (this.doubleBuffered) {
	            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
	        }
	    }
	    getBallBounceX() {
	        var t = this.ballVY + (Math.sqrt((this.ballVY * this.ballVY + 2 * this.ballY)) | 0);
	        var ballBounceX = this.ballX + t * this.ballVX;
	        if (ballBounceX < 0) {
	            ballBounceX = -ballBounceX;
	        }
	        if (ballBounceX > 1000) {
	            ballBounceX = 1000 - ballBounceX;
	        }
	        return ballBounceX;
	    }
	    getBallMaxY() {
	        return this.ballVY < 0 ? this.ballY : this.ballY + (this.ballVY * this.ballVY / 2 | 0);
	    }
	    controlP2v0() {
	        this.p2XV = 0;
	        if (this.swapped === 0) {
	            if (this.ballX > this.p2X) {
	                this.p2XV = -this.SLIMEVEL;
	            }
	            if (this.ballX < this.p2X) {
	                this.p2XV = this.SLIMEVEL;
	            }
	        }
	        if (this.swapped === 1) {
	            if (this.ballX > this.p2X + 25) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX < this.p2X - 25) {
	                this.p2XV = -this.SLIMEVEL;
	            }
	            if (this.ballX > this.p2X - 25 && this.ballX < this.p2X + 25) {
	                if (this.p1X > this.p2X) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                if (this.p1X < this.p2X) {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	                if (this.p1X > this.p2X - 100 && this.p1X < this.p2X) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                if (this.p1X > this.p2X && this.p1X < this.p2X + 100) {
	                    this.fP2Sticky = false;
	                    if (this.p2Throw === 1 && this.ballX > this.p2X - 10 && this.ballX < this.p2X + 10) {
	                        this.ballVX = -20;
	                    }
	                }
	            }
	        }
	    }
	    controlP2v1() {
	        this.p2XV = 0;
	        if (this.swapped === 0) {
	            if (this.ballX > this.p2X && this.ballVX < 0) {
	                this.p2XV = -this.SLIMEVEL;
	            }
	            if (this.ballX < this.p2X && this.ballVX > 0) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX === this.p2X) {
	                if (this.p2X > (this.nWidth / 2 | 0)) {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	                if (this.p2X < (this.nWidth / 2 | 0)) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	            }
	            if ((this.ballVX > 0 || this.ballVX < 0 && this.ballY < 25) && this.ballX > this.p2X - 100 && this.ballX < this.p2X + 100 && this.p2YV === 0) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.swapped === 1) {
	            if (this.ballX < this.p2X - 40 || this.ballX > this.p2X + 40) {
	                if (this.ballX > this.p2X) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                if (this.ballX < this.p2X) {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	            }
	            if (this.ballX > this.p2X - 40 && this.ballX < this.p2X + 40) {
	                if (this.p1X > this.p2X) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                if (this.p1X < this.p2X) {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	                if (this.p1X > this.p2X + 20 && this.p1X < this.p2X + 100) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                if (this.p1X > this.p2X - 100 && this.p1X < this.p2X) {
	                    this.fP2Sticky = false;
	                    if (this.p2Throw === 1) {
	                        this.ballVX = -20;
	                    }
	                }
	            }
	        }
	    }
	    controlP2v2() {
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        this.p2XV = 0;
	        if (this.swapped === 0) {
	            if (this.ballX > this.p2X && this.ballVX < 0) {
	                this.p2XV = -this.SLIMEVEL;
	            }
	            if (this.ballX < this.p2X && this.ballVX > 0) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX === this.p2X) {
	                if (this.p2X > (this.nWidth / 2 | 0)) {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	                if (this.p2X < (this.nWidth / 2 | 0)) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	            }
	            if ((this.ballVX > 0 || this.ballVX < 0 && this.ballY < 25) && this.ballX > this.p2X - 100 && this.ballX < this.p2X + 100 && this.p2YV === 0) {
	                this.p2YV = this.JUMPVEL;
	            }
	            if (this.p2X < this.ballX && this.ballY < this.p2X + 25 && bounceX < this.ballX) {
	                this.p2XV = -this.SLIMEVEL;
	                if (this.p2YV === 0) {
	                    this.p2YV = this.JUMPVEL;
	                }
	            }
	            if (bounceX < this.p2X + 50 && bounceX > this.p2X - 50) {
	                if (this.ballVX > 0) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                else {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	            }
	        }
	        if (this.swapped === 1) {
	            if (this.ballX < this.p2X - 40 || this.ballX > this.p2X + 40) {
	                if (this.ballX > this.p2X) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                if (this.ballX < this.p2X) {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	            }
	            if (this.ballX > this.p2X - 40 && this.ballX < this.p2X + 40) {
	                if (this.p1X > this.p2X) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                if (this.p1X < this.p2X) {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	                if (this.p1X > this.p2X + 20 && this.p1X < this.p2X + 100) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                if (this.p1X > this.p2X - 100 && this.p1X < this.p2X) {
	                    this.fP2Sticky = false;
	                    if (this.p1Y <= 0) {
	                        if (this.p2Throw === 1 && this.p1XV <= 0) {
	                            this.ballVX = -20;
	                        }
	                        if (this.p1Y > 0 && this.p2Throw === 1 && this.p1XV <= 0) {
	                            this.p2YV = this.JUMPVEL;
	                            this.ballVX = -20;
	                        }
	                    }
	                }
	            }
	        }
	    }
	    controlP2v3() {
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        this.p2XV = 0;
	        if (this.swapped === 0) {
	            if (this.ballX > this.p2X && this.ballVX < 0) {
	                this.p2XV = -this.SLIMEVEL;
	            }
	            if (this.ballX < this.p2X && this.ballVX > 0) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX === this.p2X) {
	                if (this.p2X > (this.nWidth / 2 | 0)) {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	                if (this.p2X < (this.nWidth / 2 | 0)) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	            }
	            if ((this.ballVX > 0 || this.ballVX < 0 && this.ballY < 25) && this.ballX > this.p2X - 100 && this.ballX < this.p2X + 100 && this.p2YV === 0) {
	                this.p2YV = this.JUMPVEL;
	            }
	            if (this.p2X < this.ballX && this.ballY < this.p2X + 25 && bounceX < this.ballX) {
	                this.p2XV = -this.SLIMEVEL;
	                if (this.p2YV === 0) {
	                    this.p2YV = this.JUMPVEL;
	                }
	            }
	            if (bounceX < this.p2X + 100 && bounceX > this.p2X - 100) {
	                if (this.ballVX > 0) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                else {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	            }
	            if (this.p2YV === this.JUMPVEL) {
	                if (bounceX < this.p2X && bounceX > this.p2X - 200) {
	                    this.p2YV = 0;
	                    this.p2XV = this.SLIMEVEL;
	                }
	                if (bounceX > this.p2X && bounceX < this.p2X + 200) {
	                    this.p2YV = 0;
	                    this.p2XV = -this.SLIMEVEL;
	                }
	            }
	        }
	        if (this.swapped === 1) {
	            if (this.ballX < this.p2X - 40 || this.ballX > this.p2X + 40) {
	                if (this.ballX > this.p2X) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                if (this.ballX < this.p2X) {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	            }
	            if (this.ballX > this.p2X - 40 && this.ballX < this.p2X + 40) {
	                if (this.p1X > this.p2X) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                if (this.p1X < this.p2X) {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	                if (this.p1X > this.p2X + 20 && this.p1X < this.p2X + 100) {
	                    this.p2XV = this.SLIMEVEL;
	                }
	                if (this.p1X > this.p2X - 100 && this.p1X < this.p2X) {
	                    this.fP2Sticky = false;
	                    if (this.p1Y <= 0) {
	                        if (this.p2Throw === 1 && this.p1XV <= 0) {
	                            this.ballVX = -20;
	                        }
	                        if (this.p1Y > 0 && this.p2Throw === 1 && this.p1XV <= 0) {
	                            this.ballVX = -20;
	                            if (this.p2Y < 1) {
	                                this.p2YV = this.JUMPVEL;
	                            }
	                        }
	                    }
	                }
	            }
	            if (this.ballX > this.p2X - 40 && this.ballX < this.p2X + 40 && this.ballY > this.p2Y && this.ballY < this.p2Y + 200 && this.p1X > this.p2X + 200 && this.p2X < 400) {
	                if (this.p2X > 200) {
	                    this.p2XV = -this.SLIMEVEL;
	                }
	                if (this.p2X < 200 && this.p2X > 80) {
	                    this.p2XV = -this.SLIMEVEL;
	                    if (this.p2Y < 1) {
	                        this.p2YV = this.JUMPVEL;
	                    }
	                }
	                if (this.p2X < 80 && this.p2Throw === 1) {
	                    if (this.ballVX === this.p2XV) {
	                        this.ballVX = -20;
	                    }
	                    this.p2XV = this.SLIMEVEL;
	                }
	            }
	            if (this.p1YV === this.JUMPVEL && this.p1X > this.p2X - 150 && this.p1X < this.p2X + 150) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	    }
	    method_rn_DodgeBallSlime_p_1(s) {
	        shims_1.System.out.println(s);
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = DodgeBallSlime;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class TestSlime extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.slimeColText = ["Argentina", "Belgium", "Australia", "Iceland", "Cameroon", "P.R. of China", "Costa Rica", "Croatia", "Denmark", "Eucador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "Seth Efrica", "South Corea", "Sveden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany", "Night Elves"];
	        this.darkRed = new shims_1.Color(128, 0, 0);
	        this.darkGreen = new shims_1.Color(0, 128, 0);
	        this.darkBlue = new shims_1.Color(0, 0, 128);
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Sticky = false;
	        this.fP1Fast = false;
	        this.fP2Sticky = false;
	        this.fP2Fast = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.p1TouchingGoal = 0;
	        this.p2TouchingGoal = 0;
	        this.fEndGame = false;
	        this.fPlayOn = false;
	        this.nScoreX = 0;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.playOnTicks = 0;
	        this.SMILE_DIFF = 0;
	        this.DAMPING = 0;
	        this.MAX_TICKS_TOUCHING_GOAL = 0;
	        this.JUMPVEL = 0;
	        this.SLIMEVEL = 0;
	        this.GRAVITY = 0;
	        this.gameLength = 0;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fSuperSlime = false;
	        this.doubleBuffered = false;
	        this.slimaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), this.darkGreen, shims_1.Color.fromString("white"), this.darkRed, this.darkRed, new shims_1.Color(119, 41, 28), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(128, 128, 255), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(119, 41, 28), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(185, 30, 2), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(252, 239, 82), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(16, 180, 180), new shims_1.Color(241, 245, 71), new shims_1.Color(230, 230, 230), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue")];
	        this.secondaryCols = [shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), new shims_1.Color(128, 128, 255), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), this.darkBlue, shims_1.Color.fromString("green"), shims_1.Color.fromString("blue"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), this.darkGreen, shims_1.Color.fromString("white"), new shims_1.Color(128, 255, 128), new shims_1.Color(255, 128, 0), this.darkGreen, this.darkBlue, new shims_1.Color(13, 131, 10), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), new shims_1.Color(7, 177, 33), shims_1.Color.fromString("red"), shims_1.Color.fromString("black"), shims_1.Color.fromString("blue")];
	        this.frenzyCol = 0;
	        this.SMILE_DIFF = 2;
	        this.DAMPING = 7;
	        this.MAX_TICKS_TOUCHING_GOAL = 60;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.pointsX = new Array(0);
	        this.pointsY = new Array(0);
	        this.p2Col = 1;
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    initStuff() {
	        this.fEndGame = true;
	        this.p1X = 200;
	        this.p1Y = 0;
	        this.p2X = 800;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.ballOldX = this.ballX = 500;
	        this.ballOldY = this.ballY = 200;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.playOnTicks = 10;
	        this.fPlayOn = false;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.JUMPVEL = !this.fSuperSlime ? 31 : 65;
	        this.SLIMEVEL = !this.fSuperSlime ? 8 : 16;
	        this.GRAVITY = !this.fSuperSlime ? 2 : 8;
	    }
	    drawButtons() {
	        var buttons = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "World Cup"];
	        var fm = this.screen.getFontMetrics();
	        var darkBlue = new shims_1.Color(0, 0, 128);
	        for (var i = 0; i < 5; ++i) {
	            this.screen.setColor(darkBlue);
	            this.screen.fillRect(((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(buttons[i], ((2 * i + 1) * this.nWidth / 10 | 0) - (fm.stringWidth(buttons[i]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (fm.getHeight() / 2 | 0));
	        }
	        this.flip();
	    }
	    testButton(x, y) {
	        for (var i = 0; i < 5; ++i) {
	            if (x > ((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) && x < ((2 * i + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) && y > (this.nHeight * 2 / 10 | 0) && y < (this.nHeight * 3 / 10 | 0)) {
	                if (i === 4) {
	                    this.gameLength = 120000;
	                    this.worldCup = true;
	                }
	                else {
	                    this.gameLength = (1 << i) * 60000;
	                    this.worldCup = false;
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    handleEvent(event) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((event.id)) {
	                case 401:
	                case 403:
	                    if (this.fCanChangeCol) {
	                        switch ((event.key)) {
	                            case 54:
	                                this.fSuperSlime = !this.fSuperSlime;
	                                this.repaint();
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                do {
	                                    this.p2Col = this.p2Col !== 0 ? this.p2Col - 1 : this.slimaryCols.length - 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                do {
	                                    this.p2Col = this.p2Col === this.slimaryCols.length - 1 ? 0 : this.p2Col + 1;
	                                } while ((this.p2Col === this.p1Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 83:
	                            case 115:
	                                do {
	                                    this.p1Col = this.p1Col === this.slimaryCols.length - 1 ? 0 : this.p1Col + 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 87:
	                            case 119:
	                                while ((true)) {
	                                    this.p1Col = this.p1Col !== 0 ? this.p1Col - 1 : this.slimaryCols.length - 1;
	                                    if (this.p1Col !== this.p2Col) {
	                                        this.drawScores();
	                                        this.repaint();
	                                        break;
	                                    }
	                                }
	                                ;
	                        }
	                    }
	                    if (!this.fEndGame) {
	                        switch ((event.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                return false;
	                            case 65:
	                            case 97:
	                                this.p1XV = -this.SLIMEVEL;
	                                return false;
	                            case 66:
	                            case 98:
	                                this.toggleBuffering();
	                                return false;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.SLIMEVEL;
	                                return false;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (this.p2Y === 0 && !this.worldCup) {
	                                    this.p2YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                if (!this.worldCup) {
	                                    this.p2XV = -this.SLIMEVEL;
	                                }
	                                return false;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                if (!this.worldCup) {
	                                    this.fP2Sticky = true;
	                                }
	                                this.fP2Fast = true;
	                                return false;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                if (!this.worldCup) {
	                                    this.p2XV = this.SLIMEVEL;
	                                }
	                                return false;
	                            case 83:
	                            case 115:
	                                this.fP1Sticky = true;
	                                this.fP1Fast = true;
	                                return false;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.JUMPVEL;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((event.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = (-this.SLIMEVEL / 2 | 0);
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = (this.SLIMEVEL / 2 | 0);
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0 && !this.worldCup) {
	                                this.p2XV = (-this.SLIMEVEL / 2 | 0);
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                        case 1005:
	                            this.fP2Sticky = false;
	                            this.fP2Fast = false;
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0 && !this.worldCup) {
	                                this.p2XV = (this.SLIMEVEL / 2 | 0);
	                            }
	                            return false;
	                        case 83:
	                        case 115:
	                            this.fP1Sticky = false;
	                            this.fP1Fast = false;
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay && this.testButton(event.x, event.y)) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 500;
	                        this.ballY = 200;
	                        this.ballOldX = 500;
	                        this.ballOldY = 200;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1Score = 0;
	                        this.p2Score = 0;
	                        this.promptMsg = "";
	                        this.paint(this.getGraphics());
	                        try {
	                            yield shims_1.Thread.sleep(100);
	                        }
	                        catch (var4) {
	                        }
	                        ;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
	                    this.requestFocus();
	            }
	            return false;
	        });
	    }
	    DrawSlimers() {
	        var k1 = (this.nWidth / 10 | 0);
	        var j2 = (this.nHeight / 10 | 0);
	        var i3 = (this.nWidth / 50 | 0);
	        var j3 = (this.nHeight / 25 | 0);
	        var k3 = (this.ballX * this.nWidth / 1000 | 0);
	        var l3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var i = (this.p1OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        var l = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        i = (this.p2OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        if (!this.fEndGame) {
	            this.MoveBall();
	        }
	        i = (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p1Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 2 / 5 | 0);
	        this.pointsX[3] = i + (k1 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var l4 = this.p1X + 38;
	        var i5 = this.p1Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        var i4 = i - k3;
	        var j4 = l - l3;
	        var k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        var flag = Math.random() < 0.01;
	        if (flag) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var i2;
	        var l2;
	        var k;
	        var j1;
	        var k5;
	        if (this.p1Score > this.p2Score + 2) {
	            i2 = (this.p1X * this.nWidth / 1000 | 0);
	            l2 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            k = (this.nWidth / 20 | 0);
	            j1 = (this.nHeight / 20 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        i = (this.p2X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p2Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 3 / 5 | 0);
	        this.pointsX[3] = i + (k1 * 7 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        l4 = this.p2X - 18;
	        i5 = this.p2Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        i4 = i - k3;
	        j4 = l - l3;
	        k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        flag = Math.random() < 0.01;
	        if (flag) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(!flag ? shims_1.Color.fromString("white") : shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        if (this.p2Score > this.p1Score + 2) {
	            i2 = (this.nWidth / 20 | 0);
	            l2 = (this.nHeight / 20 | 0);
	            k = (this.p2X * this.nWidth / 1000 | 0) - i2;
	            j1 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	    }
	    paint(g) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.drawScores();
	        if (!this.fInPlay) {
	            this.DrawSlimers();
	            this.drawButtons();
	        }
	        this.DrawGoals();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var fontmetrics = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fSuperSlime) {
	                this.screen.drawString("Super Hockey Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Super Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            else {
	                this.screen.drawString("Hockey Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            fontmetrics = this.screen.getFontMetrics();
	            this.screen.drawString("Written by Quin Pendragon + Anonymous tipster", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Written by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + fontmetrics.getHeight() * 2);
	        }
	        this.flip();
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    ReplayFrame(i, j, k, l, i1, flag) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (flag) {
	                this.ballX = -1000;
	                this.ballOldX = 500;
	                this.ballY = -1000;
	                this.ballOldY = 500;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var j1 = i === 0 ? 199 : i - 1;
	                this.p1OldX = this.replayData[j1][0];
	                this.p1OldY = this.replayData[j1][1];
	                this.p2OldX = this.replayData[j1][2];
	                this.p2OldY = this.replayData[j1][3];
	                if (i === 0) {
	                    this.ballOldX = 500;
	                    this.ballOldY = 200;
	                }
	                else {
	                    this.ballOldX = this.replayData[j1][4];
	                    this.ballOldY = this.replayData[j1][5];
	                }
	            }
	            this.p1X = this.replayData[i][0];
	            this.p1Y = this.replayData[i][1];
	            this.p2X = this.replayData[i][2];
	            this.p2Y = this.replayData[i][3];
	            this.ballX = this.replayData[i][4];
	            this.ballY = this.replayData[i][5];
	            this.p1Col = this.replayData[i][6];
	            this.p2Col = this.replayData[i][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((i / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", j, k);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(j, k - i1, l, i1 * 2);
	            }
	            this.DrawSlimers();
	            this.DrawGoals();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var9) {
	            }
	            ;
	        });
	    }
	    MakeTime(l) {
	        var l1 = Math.round(l / 10) % 100;
	        var l2 = Math.round(l / 1000) % 60;
	        var l3 = Math.round(l / 60000) % 60;
	        var s = "";
	        if (l3 < 10) {
	            s = s + "0";
	        }
	        s = s + l3;
	        s = s + ":";
	        if (l2 < 10) {
	            s = s + "0";
	        }
	        s = s + l2;
	        s = s + ":";
	        if (l1 < 10) {
	            s = s + "0";
	        }
	        s = s + l1;
	        return s;
	    }
	    MoveSlimers() {
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 0:
	                    this.controlP2v0();
	                    break;
	                case 1:
	                    this.controlP2v1();
	                    break;
	                case 2:
	                    this.controlP2v2();
	                    break;
	                case 3:
	                    this.controlP2v3();
	            }
	        }
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 950) {
	            this.p1X = 950;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.GRAVITY;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.GRAVITY;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    MoveBall() {
	        var k = (30 * this.nHeight / 1000 | 0);
	        var i = (this.ballOldX * this.nWidth / 1000 | 0);
	        var j = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var l1 = (this.ballX - this.p1X) * 2;
	            var i2 = this.ballY - this.p1Y;
	            var j2 = l1 * l1 + i2 * i2;
	            var k2 = this.ballVX - this.p1XV;
	            var l2 = this.ballVY - this.p1YV;
	            var i1;
	            var k1;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p1X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p1Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP1Sticky) {
	                        this.ballVY += this.p1YV - (2 * i2 * k1 / i1 | 0);
	                        this.ballVX += ((this.p1XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	            }
	            l1 = (this.ballX - this.p2X) * 2;
	            i2 = this.ballY - this.p2Y;
	            j2 = l1 * l1 + i2 * i2;
	            k2 = this.ballVX - this.p2XV;
	            l2 = this.ballVY - this.p2YV;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p2X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p2Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP2Sticky) {
	                        this.ballVX += ((this.p2XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                        this.ballVY += this.p2YV - (2 * i2 * k1 / i1 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX <= 50 || this.ballX >= 950) {
	                if (this.ballY > 200 && this.ballOldY < 200 || this.ballY < 200 && this.ballOldY >= 200) {
	                    this.ballY = 200;
	                    this.ballVY *= -1;
	                }
	                if (this.ballY > 180 && this.ballY < 220) {
	                    if (this.ballX > 40 && this.ballX < 50 && this.ballVX < 0) {
	                        this.ballX = 50;
	                        this.ballVX *= -1;
	                    }
	                    if (this.ballX < 960 && this.ballX > 950 && this.ballVX > 0) {
	                        this.ballX = 950;
	                        this.ballVX *= -1;
	                    }
	                }
	            }
	            if (this.ballY < 34) {
	                this.ballY = 34;
	                this.ballVY = (-this.ballVY * 7 / 10 | 0);
	                this.ballVX = (this.ballVX * 7 / 10 | 0);
	            }
	        }
	        i = (this.ballX * this.nWidth / 1000 | 0);
	        j = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("yellow"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	    }
	    DrawGoals() {
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect((this.nWidth / 20 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 20 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        this.screen.fillRect((this.nWidth * 9 / 10 | 0), (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        var p1TickX;
	        for (p1TickX = 0; p1TickX < (this.nWidth / 20 | 0); p1TickX += 5) {
	            this.screen.drawLine(p1TickX, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), p1TickX, (4 * this.nHeight / 5 | 0));
	            this.screen.drawLine(this.nWidth - p1TickX, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), this.nWidth - p1TickX, (4 * this.nHeight / 5 | 0));
	        }
	        for (p1TickX = (4 * this.nHeight / 5 | 0) - (this.nHeight / 5 | 0); p1TickX < (4 * this.nHeight / 5 | 0); p1TickX += 5) {
	            this.screen.drawLine(0, p1TickX, (this.nWidth / 20 | 0), p1TickX);
	            this.screen.drawLine(this.nWidth, p1TickX, this.nWidth - (this.nWidth / 20 | 0), p1TickX);
	        }
	        p1TickX = ((60 - this.p1TouchingGoal) * this.nWidth / 120 | 0);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.screen.fillRect(0, this.nHeight - 5, p1TickX, 5);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect(p1TickX, this.nHeight - 5, (this.nWidth / 2 | 0) - p1TickX, 5);
	        var p2TickX = this.nWidth - ((60 - this.p2TouchingGoal) * this.nWidth / 120 | 0);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.screen.fillRect(p2TickX, this.nHeight - 5, this.nWidth, 5);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect((this.nWidth / 2 | 0), this.nHeight - 5, p2TickX - (this.nWidth / 2 | 0), 5);
	    }
	    DrawStatus() {
	        var g = this.screen;
	        var fontmetrics = this.screen.getFontMetrics();
	        var s = null;
	        var time = this.MakeTime(this.gameTime);
	        var i = (this.nHeight / 20 | 0);
	        var k = 0;
	        var kt = fontmetrics.stringWidth(time);
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 1:
	                    s = "Quarter Finals";
	                    break;
	                case 2:
	                    s = "Semi-Finals";
	                    break;
	                case 3:
	                    s = "Final";
	                    break;
	                default:
	                    s = "Qualifying";
	            }
	            if (this.fGoldenGoal) {
	                s = s + " [Golden Goal]";
	            }
	            else if (this.fExtraTime) {
	                s = s + " [Extra Time]";
	            }
	            k = fontmetrics.stringWidth(s);
	        }
	        var mw = k <= kt ? kt : k;
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect((this.nWidth / 2 | 0) - (mw / 2 | 0) - 5, 0, mw + 10, i + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(time, (this.nWidth / 2 | 0) - (kt / 2 | 0), fontmetrics.getAscent() + 20);
	        if (s != null) {
	            this.screen.drawString(s, (this.nWidth / 2 | 0) - (k / 2 | 0), fontmetrics.getAscent() + 20 - fontmetrics.getHeight());
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(s, i) {
	        if (((typeof s === 'string') || s === null) && ((typeof i === 'number') || i === null)) {
	            return (() => {
	                var fontmetrics = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fontmetrics.getHeight() * (i + 1) + 10);
	            })();
	        }
	        else if (s === undefined && i === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    promptBox(msg1, msg2) {
	        var fontmetrics = this.screen.getFontMetrics();
	        var len1 = fontmetrics.stringWidth(msg1);
	        var len2 = fontmetrics.stringWidth(msg2);
	        var maxlen = len1 <= len2 ? len2 : len1;
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect((this.nWidth / 2 | 0) - (maxlen / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), maxlen + 40, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(msg1, (this.nWidth / 2 | 0) - (len1 / 2 | 0), (this.nHeight * 9 / 20 | 0));
	        this.screen.drawString(msg2, (this.nWidth / 2 | 0) - (len2 / 2 | 0), (this.nHeight * 11 / 20 | 0));
	        this.flip();
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    drawScores() {
	        var g = this.screen;
	        var k = (this.nHeight / 20 | 0);
	        var fm = this.screen.getFontMetrics();
	        var i = fm.stringWidth("Replay...");
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect(0, 0, this.nWidth, k + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        g.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, (this.nWidth / 20 | 0), k);
	        var p2ScrStr = this.p2Score + " : " + this.slimeColText[this.p2Col];
	        g.drawString(p2ScrStr, this.nWidth - (this.nWidth / 20 | 0) - fm.stringWidth(p2ScrStr), k);
	    }
	    checkScored() {
	        if (this.ballY >= 200 || this.ballX >= 40 && this.ballX <= 960) {
	            return false;
	        }
	        else {
	            this.nScoreX = this.ballX;
	            this.fPlayOn = true;
	            this.playOnTicks = 10;
	            return true;
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.worldCupRound = 0;
	            do {
	                this.initStuff();
	                this.replayPos = this.replayStart = 0;
	                this.scoringRun = 0;
	                this.fP1Touched = this.fP2Touched = false;
	                this.gameTime = 0;
	                this.startTime = shims_1.System.currentTimeMillis();
	                this.fEndGame = false;
	                this.fCanChangeCol = false;
	                this.mousePressed = false;
	                this.gameTime = Math.round(this.gameLength);
	                this.fInPlay = true;
	                this.fEndGame = false;
	                var l;
	                if (this.worldCup) {
	                    this.paint(this.getGraphics());
	                    do {
	                        this.p2Col = ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);
	                    } while ((this.p1Col === this.p2Col));
	                    l = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
	                    switch ((this.worldCupRound)) {
	                        case 0:
	                            this.promptBox("Qualifying Round", l);
	                            this.gameLength = 30000;
	                            break;
	                        case 1:
	                            this.promptBox("Quarter Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 2:
	                            this.promptBox("Semi-Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 3:
	                            this.promptBox("World Cup Final", l);
	                            this.gameLength = 300000;
	                    }
	                    try {
	                        yield shims_1.Thread.sleep(4000);
	                    }
	                    catch (var5) {
	                    }
	                    ;
	                    this.repaint();
	                    this.flip();
	                }
	                while ((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1Score === this.p2Score)) {
	                    this.gameTime = this.startTime + Math.round(this.gameLength) - shims_1.System.currentTimeMillis();
	                    if (this.gameTime < 0) {
	                        this.gameTime = 0;
	                    }
	                    if (this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1Score === this.p2Score) {
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ".", "And the game goes into extra time...");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var10) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                        this.startTime += 30000;
	                        this.gameTime += 30000;
	                        this.fExtraTime = true;
	                    }
	                    else if (this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1Score === this.p2Score) {
	                        this.fGoldenGoal = true;
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ", and the game goes into Golden Goal.", "The next player to score will win the match!");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var9) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                    }
	                    this.SaveReplayData();
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    this.DrawGoals();
	                    this.DrawStatus();
	                    this.flip();
	                    if (this.p1X < 150) {
	                        ++this.p1TouchingGoal;
	                    }
	                    else {
	                        this.p1TouchingGoal = 0;
	                    }
	                    if (this.p2X > 850) {
	                        ++this.p2TouchingGoal;
	                    }
	                    else {
	                        this.p2TouchingGoal = 0;
	                    }
	                    if (this.fPlayOn) {
	                        --this.playOnTicks;
	                    }
	                    else {
	                        this.fPlayOn = this.checkScored();
	                    }
	                    if (this.playOnTicks === 0 || this.p1TouchingGoal > 60 || this.p2TouchingGoal > 60) {
	                        var var11 = shims_1.System.currentTimeMillis();
	                        if (this.p1TouchingGoal > 60) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.p2TouchingGoal > 60) {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.nScoreX < 500) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
	                        }
	                        else {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
	                        }
	                        this.drawPrompt();
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.flip();
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var8) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.playOnTicks = 10;
	                        this.fPlayOn = false;
	                        this.startTime += shims_1.System.currentTimeMillis() - var11;
	                        this.ballX = 490 + ((Math.random() * 20.0) | 0);
	                        this.ballY = 190 + ((Math.random() * 20.0) | 0);
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p1YV = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p2YV = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.repaint();
	                    }
	                    if (this.gameThread != null) {
	                        try {
	                            if (this.fPlayOn) {
	                                yield shims_1.Thread.sleep(120);
	                            }
	                            else {
	                                yield shims_1.Thread.sleep(20);
	                            }
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                    }
	                }
	                ;
	                this.fEndGame = true;
	                if (this.fPlayOn) {
	                    if (this.nScoreX < 500) {
	                        ++this.p2Score;
	                        this.promptMsg = this.slimeColText[this.p2Col] + " scores at the final whistle!";
	                    }
	                    else {
	                        ++this.p1Score;
	                        this.promptMsg = this.slimeColText[this.p1Col] + " scores at the final whistle!";
	                    }
	                    this.drawPrompt();
	                }
	                else {
	                    this.drawPrompt("And that\'s the final whistle!", 0);
	                }
	                if (this.worldCup) {
	                    if (this.p1Score === this.p2Score) {
	                        this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                        this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
	                        this.worldCup = false;
	                        this.flip();
	                    }
	                    else if (this.p1Score >= this.p2Score) {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the world cup!", 1);
	                                break;
	                            case 1:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
	                                break;
	                            case 2:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
	                                break;
	                            case 3:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " wins the WORLD CUP!!!!!", 1);
	                        }
	                        if (this.worldCupRound === 3) {
	                            this.worldCup = false;
	                            this.promptBox("You win the world cup!!!", "Congratulations!");
	                        }
	                        else {
	                            ++this.worldCupRound;
	                        }
	                    }
	                    else {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                            case 1:
	                                this.promptBox("You have been eliminated.", "Goodbye.");
	                                break;
	                            case 2:
	                                this.promptBox("You have been knocked out of the semifinals.", "You played well.");
	                                break;
	                            case 3:
	                                this.promptBox("You came second.", "Are you satisfied with that?");
	                        }
	                        this.worldCup = false;
	                    }
	                }
	                else if (this.p1Score === this.p2Score) {
	                    this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                }
	                else if (this.p1Score < this.p2Score) {
	                    this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1);
	                }
	                else {
	                    this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
	                }
	                this.flip();
	                try {
	                    yield shims_1.Thread.sleep(5000);
	                }
	                catch (var6) {
	                }
	                ;
	                this.initStuff();
	            } while ((this.worldCup));
	            this.fCanChangeCol = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.initStuff();
	        this.promptMsg = "Click on an option to play...";
	        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    toggleBuffering() {
	        if (this.doubleBuffered = !this.doubleBuffered) {
	            this.screen = this.backBuffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        else {
	            this.screen = this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        this.repaint();
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var fontmetrics = this.screen.getFontMetrics();
	            var i = fontmetrics.stringWidth("Replay...");
	            var j = fontmetrics.getHeight();
	            var k = (this.nWidth / 2 | 0) - (i / 2 | 0);
	            var l = (this.nHeight / 2 | 0) - j;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            var i1 = this.replayPos - 1;
	            while ((!this.mousePressed)) {
	                ++i1;
	                if (i1 >= 200) {
	                    i1 = 0;
	                }
	                if (i1 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var9) {
	                    }
	                    ;
	                    i1 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	                yield this.ReplayFrame(i1, k, l, i, j, false);
	                this.flip();
	            }
	            ;
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    flip() {
	        if (this.doubleBuffered) {
	            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
	        }
	    }
	    getBallBounceX() {
	        var t = this.ballVY + (Math.sqrt((this.ballVY * this.ballVY + 2 * this.ballY)) | 0);
	        var ballBounceX = this.ballX + t * this.ballVX;
	        if (ballBounceX < 0) {
	            ballBounceX = -ballBounceX;
	        }
	        if (ballBounceX > 1000) {
	            ballBounceX = 1000 - ballBounceX;
	        }
	        return ballBounceX;
	    }
	    getBallMaxY() {
	        return this.ballVY < 0 ? this.ballY : this.ballY + (this.ballVY * this.ballVY / 2 | 0);
	    }
	    controlP2v0() {
	        this.p2XV = 0;
	        if (this.ballX > this.p2X + 5 && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.ballX + 50 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X + 50 && this.p2YV === 0 && this.ballY > 10 && this.ballY < 150) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v1() {
	        this.p2XV = 0;
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        if (bounceX > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2X < 150) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v2() {
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (bounceX > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && bounceX > 500 && ballMaxY > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v3() {
	        var SLIMEVEL = (this.SLIMEVEL * 4 / 3 | 0);
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var5 = true;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (bounceX > 900) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2XV > 0 && ballMaxY > 200 && bounceX > this.p2X + 300) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && bounceX > this.p2X + 400 && ballMaxY > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / SLIMEVEL | 0)) {
	            this.p2XV = -SLIMEVEL;
	        }
	    }
	    method_rn_TestSlime_p_1(s) {
	        shims_1.System.out.println(s);
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = TestSlime;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class RugbySlime extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.slimeColText = ["Argentina", "Belgium", "Australia", "Iceland", "Cameroon", "P.R. of China", "Costa Rica", "Croatia", "Denmark", "Eucador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "Seth Efrica", "South Corea", "Sveden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany", "Night Elves"];
	        this.darkRed = new shims_1.Color(128, 0, 0);
	        this.darkGreen = new shims_1.Color(0, 128, 0);
	        this.darkBlue = new shims_1.Color(0, 0, 128);
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Sticky = false;
	        this.fP1Stuck = false;
	        this.fP2Stuck = false;
	        this.fP2Sticky = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.p1TouchingGoal = 0;
	        this.p2TouchingGoal = 0;
	        this.fEndGame = false;
	        this.fPlayOn = false;
	        this.nScoreX = 0;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.playOnTicks = 0;
	        this.SMILE_DIFF = 0;
	        this.DAMPING = 0;
	        this.MAX_TICKS_TOUCHING_GOAL = 0;
	        this.JUMPVEL = 0;
	        this.SLIMEVEL = 0;
	        this.GRAVITY = 0;
	        this.gameLength = 0;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fSuperSlime = false;
	        this.doubleBuffered = false;
	        this.slimaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), this.darkGreen, shims_1.Color.fromString("white"), this.darkRed, this.darkRed, new shims_1.Color(119, 41, 28), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(128, 128, 255), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(119, 41, 28), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(185, 30, 2), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(252, 239, 82), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(16, 180, 180), new shims_1.Color(241, 245, 71), new shims_1.Color(230, 230, 230), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue")];
	        this.secondaryCols = [shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), new shims_1.Color(128, 128, 255), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), this.darkBlue, shims_1.Color.fromString("green"), shims_1.Color.fromString("blue"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), this.darkGreen, shims_1.Color.fromString("white"), new shims_1.Color(128, 255, 128), new shims_1.Color(255, 128, 0), this.darkGreen, this.darkBlue, new shims_1.Color(13, 131, 10), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), new shims_1.Color(7, 177, 33), shims_1.Color.fromString("red"), shims_1.Color.fromString("black"), shims_1.Color.fromString("blue")];
	        this.frenzyCol = 0;
	        this.SMILE_DIFF = 2;
	        this.DAMPING = 7;
	        this.MAX_TICKS_TOUCHING_GOAL = 60000;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.pointsX = new Array(0);
	        this.pointsY = new Array(0);
	        this.p2Col = 1;
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    initStuff() {
	        this.fEndGame = true;
	        this.p1X = 200;
	        this.p1Y = 0;
	        this.p2X = 800;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.ballOldX = this.ballX = 500;
	        this.ballOldY = this.ballY = 200;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.playOnTicks = 10;
	        this.fPlayOn = false;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fP1Stuck = false;
	        this.fP2Stuck = false;
	        this.JUMPVEL = !this.fSuperSlime ? 31 : 65;
	        this.SLIMEVEL = !this.fSuperSlime ? 8 : 16;
	        this.GRAVITY = !this.fSuperSlime ? 2 : 8;
	    }
	    drawButtons() {
	        var buttons = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "World Cup"];
	        var fm = this.screen.getFontMetrics();
	        var darkBlue = new shims_1.Color(200, 0, 0);
	        for (var i = 0; i < 5; ++i) {
	            this.screen.setColor(darkBlue);
	            this.screen.fillRect(((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(buttons[i], ((2 * i + 1) * this.nWidth / 10 | 0) - (fm.stringWidth(buttons[i]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (fm.getHeight() / 2 | 0));
	        }
	        this.flip();
	    }
	    testButton(x, y) {
	        for (var i = 0; i < 5; ++i) {
	            if (x > ((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) && x < ((2 * i + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) && y > (this.nHeight * 2 / 10 | 0) && y < (this.nHeight * 3 / 10 | 0)) {
	                if (i === 4) {
	                    this.gameLength = 120000;
	                    this.worldCup = true;
	                }
	                else {
	                    this.gameLength = (1 << i) * 60000;
	                    this.worldCup = false;
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    handleEvent(event) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((event.id)) {
	                case 401:
	                case 403:
	                    if (this.fCanChangeCol) {
	                        switch ((event.key)) {
	                            case 54:
	                                this.fSuperSlime = !this.fSuperSlime;
	                                this.repaint();
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                do {
	                                    this.p2Col = this.p2Col !== 0 ? this.p2Col - 1 : this.slimaryCols.length - 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                do {
	                                    this.p2Col = this.p2Col === this.slimaryCols.length - 1 ? 0 : this.p2Col + 1;
	                                } while ((this.p2Col === this.p1Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 83:
	                            case 115:
	                                do {
	                                    this.p1Col = this.p1Col === this.slimaryCols.length - 1 ? 0 : this.p1Col + 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 87:
	                            case 119:
	                                while ((true)) {
	                                    this.p1Col = this.p1Col !== 0 ? this.p1Col - 1 : this.slimaryCols.length - 1;
	                                    if (this.p1Col !== this.p2Col) {
	                                        this.drawScores();
	                                        this.repaint();
	                                        break;
	                                    }
	                                }
	                                ;
	                        }
	                    }
	                    if (!this.fEndGame) {
	                        switch ((event.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                return false;
	                            case 65:
	                            case 97:
	                                this.p1XV = -this.SLIMEVEL;
	                                return false;
	                            case 66:
	                            case 98:
	                                this.toggleBuffering();
	                                return false;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.SLIMEVEL;
	                                return false;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (this.p2Y === 0 && !this.worldCup) {
	                                    this.p2YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                if (!this.worldCup) {
	                                    this.p2XV = -this.SLIMEVEL;
	                                }
	                                return false;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                if (!this.worldCup) {
	                                    this.fP2Sticky = false;
	                                }
	                                if (this.ballX > this.p2X - 10 && this.ballX < this.p2X + 10) {
	                                    this.ballVX = -20;
	                                }
	                                return false;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                if (!this.worldCup) {
	                                    this.p2XV = this.SLIMEVEL;
	                                }
	                                return false;
	                            case 83:
	                            case 115:
	                                this.fP1Sticky = false;
	                                if (this.ballX > this.p1X - 10 && this.ballX < this.p1X + 10) {
	                                    this.ballVX = 20;
	                                }
	                                return false;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.JUMPVEL;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((event.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                        case 1005:
	                            this.fP2Sticky = true;
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 83:
	                        case 115:
	                            this.fP1Sticky = true;
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay && this.testButton(event.x, event.y)) {
	                        this.fEndGame = false;
	                        this.fP1Sticky = true;
	                        this.fP2Sticky = true;
	                        this.fInPlay = true;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 500;
	                        this.ballY = 200;
	                        this.ballOldX = 500;
	                        this.ballOldY = 200;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1Score = 0;
	                        this.p2Score = 0;
	                        this.promptMsg = "";
	                        this.paint(this.getGraphics());
	                        try {
	                            yield shims_1.Thread.sleep(100);
	                        }
	                        catch (var4) {
	                        }
	                        ;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
	                    this.requestFocus();
	            }
	            return false;
	        });
	    }
	    DrawSlimers() {
	        var k1 = (this.nWidth / 10 | 0);
	        var j2 = (this.nHeight / 10 | 0);
	        var i3 = (this.nWidth / 50 | 0);
	        var j3 = (this.nHeight / 25 | 0);
	        var k3 = (this.ballX * this.nWidth / 1000 | 0);
	        var l3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var i = (this.p1OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        var l = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        i = (this.p2OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        if (!this.fEndGame) {
	            this.MoveBall();
	        }
	        i = (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p1Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 2 / 5 | 0);
	        this.pointsX[3] = i + (k1 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var l4 = this.p1X + 38;
	        var i5 = this.p1Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        var i4 = i - k3;
	        var j4 = l - l3;
	        var k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        var flag = Math.random() < 0.01;
	        if (flag) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var i2;
	        var l2;
	        var k;
	        var j1;
	        var k5;
	        if (this.p1Score > this.p2Score + 2) {
	            i2 = (this.p1X * this.nWidth / 1000 | 0);
	            l2 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            k = (this.nWidth / 20 | 0);
	            j1 = (this.nHeight / 20 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        i = (this.p2X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p2Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 3 / 5 | 0);
	        this.pointsX[3] = i + (k1 * 7 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        l4 = this.p2X - 18;
	        i5 = this.p2Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        i4 = i - k3;
	        j4 = l - l3;
	        k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        flag = Math.random() < 0.01;
	        if (flag) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(!flag ? shims_1.Color.fromString("white") : shims_1.Color.fromString("green"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        if (this.p2Score > this.p1Score + 2) {
	            i2 = (this.nWidth / 20 | 0);
	            l2 = (this.nHeight / 20 | 0);
	            k = (this.p2X * this.nWidth / 1000 | 0) - i2;
	            j1 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	    }
	    paint(g) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("green"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.drawScores();
	        if (!this.fInPlay) {
	            this.DrawSlimers();
	            this.drawButtons();
	        }
	        this.DrawGoals();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var fontmetrics = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fSuperSlime) {
	                this.screen.drawString("Super Rugby Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Super Rugby Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            else {
	                this.screen.drawString("Rugby Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            fontmetrics = this.screen.getFontMetrics();
	            this.screen.drawString("Written by Quin Pendragon", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Written by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + fontmetrics.getHeight() * 2);
	            this.screen.drawString("Rugby mod by Anonymous tipster", (this.nWidth / 3 | 0) - (fontmetrics.stringWidth("Written by Quin Pendragon") / 8 | 0), (this.nHeight / 2 | 0) + fontmetrics.getHeight() * 3);
	        }
	        this.flip();
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    ReplayFrame(i, j, k, l, i1, flag) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (flag) {
	                this.ballX = -1000;
	                this.ballOldX = 500;
	                this.ballY = -1000;
	                this.ballOldY = 500;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var j1 = i === 0 ? 199 : i - 1;
	                this.p1OldX = this.replayData[j1][0];
	                this.p1OldY = this.replayData[j1][1];
	                this.p2OldX = this.replayData[j1][2];
	                this.p2OldY = this.replayData[j1][3];
	                if (i === 0) {
	                    this.ballOldX = 500;
	                    this.ballOldY = 200;
	                }
	                else {
	                    this.ballOldX = this.replayData[j1][4];
	                    this.ballOldY = this.replayData[j1][5];
	                }
	            }
	            this.p1X = this.replayData[i][0];
	            this.p1Y = this.replayData[i][1];
	            this.p2X = this.replayData[i][2];
	            this.p2Y = this.replayData[i][3];
	            this.ballX = this.replayData[i][4];
	            this.ballY = this.replayData[i][5];
	            this.p1Col = this.replayData[i][6];
	            this.p2Col = this.replayData[i][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((i / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", j, k);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(j, k - i1, l, i1 * 2);
	            }
	            this.DrawSlimers();
	            this.DrawGoals();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var9) {
	            }
	            ;
	        });
	    }
	    MakeTime(l) {
	        var l1 = Math.round(l / 10) % 100;
	        var l2 = Math.round(l / 1000) % 60;
	        var l3 = Math.round(l / 60000) % 60;
	        var s = "";
	        if (l3 < 10) {
	            s = s + "0";
	        }
	        s = s + l3;
	        s = s + ":";
	        if (l2 < 10) {
	            s = s + "0";
	        }
	        s = s + l2;
	        s = s + ":";
	        if (l1 < 10) {
	            s = s + "0";
	        }
	        s = s + l1;
	        return s;
	    }
	    MoveSlimers() {
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 0:
	                    this.controlP2v0();
	                    break;
	                case 1:
	                    this.controlP2v1();
	                    break;
	                case 2:
	                    this.controlP2v2();
	                    break;
	                case 3:
	                    this.controlP2v3();
	            }
	        }
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 950) {
	            this.p1X = 950;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.GRAVITY;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.GRAVITY;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    MoveBall() {
	        this.fP1Stuck = false;
	        this.fP2Stuck = false;
	        var k = (30 * this.nHeight / 1000 | 0);
	        var i = (this.ballOldX * this.nWidth / 1000 | 0);
	        var j = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var l1 = (this.ballX - this.p1X) * 1;
	            var i2 = this.ballY - this.p1Y;
	            var j2 = l1 * l1 + i2 * i2;
	            var k2 = this.ballVX - this.p1XV;
	            var l2 = this.ballVY - this.p1YV;
	            var i1;
	            var k1;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p1X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p1Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP1Sticky) {
	                        this.ballVY += 0;
	                        this.ballVX += 0;
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.ballVY = this.p1YV;
	                        this.ballVX = this.p1XV;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 0;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 0;
	                    }
	                }
	                this.fP1Touched = true;
	            }
	            l1 = (this.ballX - this.p2X) * 1;
	            i2 = this.ballY - this.p2Y;
	            j2 = l1 * l1 + i2 * i2;
	            k2 = this.ballVX - this.p2XV;
	            l2 = this.ballVY - this.p2YV;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p2X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p2Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP2Sticky) {
	                        this.ballVX += ((this.p2XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                        this.ballVY += this.p2YV - (2 * i2 * k1 / i1 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.ballVY = this.p2YV;
	                        this.ballVX = this.p2XV;
	                        this.fP2Stuck = true;
	                        this.fP1Stuck = true;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX <= 0 || this.ballX >= 1000) {
	                if (this.ballY > 200 && this.ballOldY < 200 || this.ballY < 200 && this.ballOldY >= 200) {
	                    this.ballY = 200;
	                    this.ballVY *= -1;
	                }
	                if (this.ballY > 180 && this.ballY < 220) {
	                    if (this.ballX > 40 && this.ballX < 50 && this.ballVX < 0) {
	                        this.ballX = 50;
	                        this.ballVX *= -1;
	                    }
	                    if (this.ballX < 960 && this.ballX > 950 && this.ballVX > 0) {
	                        this.ballX = 950;
	                        this.ballVX *= -1;
	                    }
	                }
	            }
	            if (this.ballY < 34) {
	                this.ballY = 34;
	                this.ballVY = (-this.ballVY * 7 / 10 | 0);
	                this.ballVX = (this.ballVX * 7 / 10 | 0);
	            }
	        }
	        i = (this.ballX * this.nWidth / 1000 | 0);
	        j = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("orange"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	    }
	    DrawGoals() {
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect((this.nWidth / 20 | 0), (4 * this.nHeight / 5 | 0) - (10 * this.nHeight / 1000 | 0), 5, (40 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 20 | 0) - 5, (4 * this.nHeight / 5 | 0) - (10 * this.nHeight / 1000 | 0), 5, (40 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        this.screen.fillRect((this.nWidth * 9 / 10 | 0), (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        var p1TickX;
	        for (p1TickX = 0; p1TickX < (this.nWidth / 20 | 0); p1TickX += 5) {
	        }
	        for (p1TickX = (4 * this.nHeight / 5 | 0) - (this.nHeight / 5 | 0); p1TickX < (4 * this.nHeight / 5 | 0); p1TickX += 5) {
	        }
	        p1TickX = ((60000 - this.p1TouchingGoal) * this.nWidth / 120000 | 0);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.screen.fillRect(0, this.nHeight - 5, p1TickX, 5);
	        this.screen.setColor(shims_1.Color.fromString("green"));
	        this.screen.fillRect(p1TickX, this.nHeight - 5, (this.nWidth / 2 | 0) - p1TickX, 5);
	        var p2TickX = this.nWidth - ((60000 - this.p2TouchingGoal) * this.nWidth / 120000 | 0);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.screen.fillRect(p2TickX, this.nHeight - 5, this.nWidth, 5);
	        this.screen.setColor(shims_1.Color.fromString("green"));
	        this.screen.fillRect((this.nWidth / 2 | 0), this.nHeight - 5, p2TickX - (this.nWidth / 2 | 0), 5);
	    }
	    DrawStatus() {
	        var g = this.screen;
	        var fontmetrics = this.screen.getFontMetrics();
	        var s = null;
	        var time = this.MakeTime(this.gameTime);
	        var i = (this.nHeight / 20 | 0);
	        var k = 0;
	        var kt = fontmetrics.stringWidth(time);
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 1:
	                    s = "Quarter Finals";
	                    break;
	                case 2:
	                    s = "Semi-Finals";
	                    break;
	                case 3:
	                    s = "Final";
	                    break;
	                default:
	                    s = "Qualifying";
	            }
	            if (this.fGoldenGoal) {
	                s = s + " [Golden Goal]";
	            }
	            else if (this.fExtraTime) {
	                s = s + " [Extra Time]";
	            }
	            k = fontmetrics.stringWidth(s);
	        }
	        var mw = k <= kt ? kt : k;
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect((this.nWidth / 2 | 0) - (mw / 2 | 0) - 5, 0, mw + 10, i + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(time, (this.nWidth / 2 | 0) - (kt / 2 | 0), fontmetrics.getAscent() + 20);
	        if (s != null) {
	            this.screen.drawString(s, (this.nWidth / 2 | 0) - (k / 2 | 0), fontmetrics.getAscent() + 20 - fontmetrics.getHeight());
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("green"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(s, i) {
	        if (((typeof s === 'string') || s === null) && ((typeof i === 'number') || i === null)) {
	            return (() => {
	                var fontmetrics = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fontmetrics.getHeight() * (i + 1) + 10);
	            })();
	        }
	        else if (s === undefined && i === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    promptBox(msg1, msg2) {
	        var fontmetrics = this.screen.getFontMetrics();
	        var len1 = fontmetrics.stringWidth(msg1);
	        var len2 = fontmetrics.stringWidth(msg2);
	        var maxlen = len1 <= len2 ? len2 : len1;
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect((this.nWidth / 2 | 0) - (maxlen / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), maxlen + 40, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(msg1, (this.nWidth / 2 | 0) - (len1 / 2 | 0), (this.nHeight * 9 / 20 | 0));
	        this.screen.drawString(msg2, (this.nWidth / 2 | 0) - (len2 / 2 | 0), (this.nHeight * 11 / 20 | 0));
	        this.flip();
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    drawScores() {
	        var g = this.screen;
	        var k = (this.nHeight / 20 | 0);
	        var fm = this.screen.getFontMetrics();
	        var i = fm.stringWidth("Replay...");
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect(0, 0, this.nWidth, k + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        g.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, (this.nWidth / 20 | 0), k);
	        var p2ScrStr = this.p2Score + " : " + this.slimeColText[this.p2Col];
	        g.drawString(p2ScrStr, this.nWidth - (this.nWidth / 20 | 0) - fm.stringWidth(p2ScrStr), k);
	    }
	    checkScored() {
	        if (this.ballY >= 200 || this.ballX >= 40 && this.ballX <= 960) {
	            return false;
	        }
	        else {
	            this.nScoreX = this.ballX;
	            this.fPlayOn = true;
	            this.playOnTicks = 10;
	            return true;
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.worldCupRound = 0;
	            do {
	                this.initStuff();
	                this.fP1Stuck = false;
	                this.fP2Stuck = false;
	                this.replayPos = this.replayStart = 0;
	                this.scoringRun = 0;
	                this.fP1Touched = this.fP2Touched = false;
	                this.gameTime = 0;
	                this.startTime = shims_1.System.currentTimeMillis();
	                this.fEndGame = false;
	                this.fCanChangeCol = false;
	                this.mousePressed = false;
	                this.gameTime = Math.round(this.gameLength);
	                this.fInPlay = true;
	                this.fEndGame = false;
	                var l;
	                if (this.worldCup) {
	                    this.paint(this.getGraphics());
	                    do {
	                        this.p2Col = ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);
	                    } while ((this.p1Col === this.p2Col));
	                    l = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
	                    switch ((this.worldCupRound)) {
	                        case 0:
	                            this.promptBox("Qualifying Round", l);
	                            this.gameLength = 30000;
	                            break;
	                        case 1:
	                            this.promptBox("Quarter Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 2:
	                            this.promptBox("Semi-Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 3:
	                            this.promptBox("Final", l);
	                            this.gameLength = 300000;
	                    }
	                    try {
	                        yield shims_1.Thread.sleep(4000);
	                    }
	                    catch (var5) {
	                    }
	                    ;
	                    this.repaint();
	                    this.flip();
	                }
	                while ((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1Score === this.p2Score)) {
	                    this.gameTime = this.startTime + Math.round(this.gameLength) - shims_1.System.currentTimeMillis();
	                    if (this.gameTime < 0) {
	                        this.gameTime = 0;
	                    }
	                    if (this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1Score === this.p2Score) {
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ".", "And the game goes into extra time...");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var10) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                        this.startTime += 30000;
	                        this.gameTime += 30000;
	                        this.fExtraTime = true;
	                    }
	                    else if (this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1Score === this.p2Score) {
	                        this.fGoldenGoal = true;
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ", and the game goes into Golden Goal.", "The next player to score will win the match!");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var9) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                    }
	                    this.SaveReplayData();
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    this.DrawGoals();
	                    this.DrawStatus();
	                    this.flip();
	                    if (this.p1X < 150) {
	                        ++this.p1TouchingGoal;
	                    }
	                    else {
	                        this.p1TouchingGoal = 0;
	                    }
	                    if (this.p2X > 850) {
	                        ++this.p2TouchingGoal;
	                    }
	                    else {
	                        this.p2TouchingGoal = 0;
	                    }
	                    if (this.fPlayOn) {
	                        --this.playOnTicks;
	                    }
	                    else {
	                        this.fPlayOn = this.checkScored();
	                    }
	                    if (this.playOnTicks === 0 || this.p1TouchingGoal > 60000 || this.p2TouchingGoal > 60000) {
	                        var var11 = shims_1.System.currentTimeMillis();
	                        if (this.p1TouchingGoal > 60000) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.p2TouchingGoal > 60000) {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.nScoreX < 500) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
	                        }
	                        else {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
	                        }
	                        this.drawPrompt();
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.flip();
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var8) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.playOnTicks = 10;
	                        this.fPlayOn = false;
	                        this.startTime += shims_1.System.currentTimeMillis() - var11;
	                        this.ballX = 490 + ((Math.random() * 20.0) | 0);
	                        this.ballY = 190 + ((Math.random() * 20.0) | 0);
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p1YV = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p2YV = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.repaint();
	                    }
	                    if (this.gameThread != null) {
	                        try {
	                            if (this.fPlayOn) {
	                                yield shims_1.Thread.sleep(120);
	                            }
	                            else {
	                                yield shims_1.Thread.sleep(20);
	                            }
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                    }
	                }
	                ;
	                this.fEndGame = true;
	                if (this.fPlayOn) {
	                    if (this.nScoreX < 500) {
	                        ++this.p2Score;
	                        this.promptMsg = this.slimeColText[this.p2Col] + " scores at the final whistle!";
	                    }
	                    else {
	                        ++this.p1Score;
	                        this.promptMsg = this.slimeColText[this.p1Col] + " scores at the final whistle!";
	                    }
	                    this.drawPrompt();
	                }
	                else {
	                    this.drawPrompt("And that\'s the final whistle!", 0);
	                }
	                if (this.worldCup) {
	                    if (this.p1Score === this.p2Score) {
	                        this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                        this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
	                        this.worldCup = false;
	                        this.flip();
	                    }
	                    else if (this.p1Score >= this.p2Score) {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the world cup!", 1);
	                                break;
	                            case 1:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
	                                break;
	                            case 2:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
	                                break;
	                            case 3:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " wins the WORLD CUP!!!!!", 1);
	                        }
	                        if (this.worldCupRound === 3) {
	                            this.worldCup = false;
	                            this.promptBox("You win the world cup!!!", "Congratulations!");
	                        }
	                        else {
	                            ++this.worldCupRound;
	                        }
	                    }
	                    else {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                            case 1:
	                                this.promptBox("You have been eliminated.", "Goodbye.");
	                                break;
	                            case 2:
	                                this.promptBox("You have been knocked out of the semifinals.", "You played well.");
	                                break;
	                            case 3:
	                                this.promptBox("You came second.", "Are you satisfied with that?");
	                        }
	                        this.worldCup = false;
	                    }
	                }
	                else if (this.p1Score === this.p2Score) {
	                    this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                }
	                else if (this.p1Score < this.p2Score) {
	                    this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1);
	                }
	                else {
	                    this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
	                }
	                this.flip();
	                try {
	                    yield shims_1.Thread.sleep(5000);
	                }
	                catch (var6) {
	                }
	                ;
	                this.initStuff();
	            } while ((this.worldCup));
	            this.fCanChangeCol = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.initStuff();
	        this.promptMsg = "Click on an option to play...";
	        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    toggleBuffering() {
	        if (this.doubleBuffered = !this.doubleBuffered) {
	            this.screen = this.backBuffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        else {
	            this.screen = this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        this.repaint();
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var fontmetrics = this.screen.getFontMetrics();
	            var i = fontmetrics.stringWidth("Replay...");
	            var j = fontmetrics.getHeight();
	            var k = (this.nWidth / 2 | 0) - (i / 2 | 0);
	            var l = (this.nHeight / 2 | 0) - j;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            var i1 = this.replayPos - 1;
	            while ((!this.mousePressed)) {
	                ++i1;
	                if (i1 >= 200) {
	                    i1 = 0;
	                }
	                if (i1 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var9) {
	                    }
	                    ;
	                    i1 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	                yield this.ReplayFrame(i1, k, l, i, j, false);
	                this.flip();
	            }
	            ;
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    flip() {
	        if (this.doubleBuffered) {
	            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
	        }
	    }
	    getBallBounceX() {
	        var t = this.ballVY + (Math.sqrt((this.ballVY * this.ballVY + 2 * this.ballY)) | 0);
	        var ballBounceX = this.ballX + t * this.ballVX;
	        if (ballBounceX < 0) {
	            ballBounceX = -ballBounceX;
	        }
	        if (ballBounceX > 1000) {
	            ballBounceX = 1000 - ballBounceX;
	        }
	        return ballBounceX;
	    }
	    getBallMaxY() {
	        return this.ballVY < 0 ? this.ballY : this.ballY + (this.ballVY * this.ballVY / 2 | 0);
	    }
	    controlP2v0() {
	        this.p2XV = 0;
	        if (this.ballX > this.p2X + 5 && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.ballX + 50 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X + 50 && this.p2YV === 0 && this.ballY > 10 && this.ballY < 150) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60000 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v1() {
	        this.p2XV = 0;
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        if (bounceX > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2X < 150) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2TouchingGoal > 0 && 60000 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v2() {
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (bounceX > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && bounceX > 500 && ballMaxY > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60000 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v3() {
	        var SLIMEVEL = (this.SLIMEVEL * 4 / 3 | 0);
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var5 = true;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (bounceX > 900) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2XV > 0 && ballMaxY > 200 && bounceX > this.p2X + 300) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && bounceX > this.p2X + 400 && ballMaxY > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60000 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / SLIMEVEL | 0)) {
	            this.p2XV = -SLIMEVEL;
	        }
	    }
	    method_rn_RugbySlime_p_1(s) {
	        shims_1.System.out.println(s);
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RugbySlime;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class WorldCupSoccerSlime extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.slimeColText = ["Argentina", "Belgium", "Australia", "Cameroon", "P.R. of China", "Costa Rica", "Croatia", "Denmark", "Eucador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "Seth Efrica", "South Corea", "Sveden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany"];
	        this.darkRed = new shims_1.Color(128, 0, 0);
	        this.darkGreen = new shims_1.Color(0, 128, 0);
	        this.darkBlue = new shims_1.Color(0, 0, 128);
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Sticky = false;
	        this.fP2Sticky = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.p1TouchingGoal = 0;
	        this.p2TouchingGoal = 0;
	        this.fEndGame = false;
	        this.fPlayOn = false;
	        this.nScoreX = 0;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.playOnTicks = 0;
	        this.SMILE_DIFF = 0;
	        this.DAMPING = 0;
	        this.MAX_TICKS_TOUCHING_GOAL = 0;
	        this.JUMPVEL = 0;
	        this.SLIMEVEL = 0;
	        this.GRAVITY = 0;
	        this.gameLength = 0;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fSuperSlime = false;
	        this.doubleBuffered = false;
	        this.slimaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), this.darkGreen, shims_1.Color.fromString("white"), this.darkRed, this.darkRed, new shims_1.Color(119, 41, 28), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(128, 128, 255), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(119, 41, 28), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(185, 30, 2), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(252, 239, 82), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(16, 180, 180), new shims_1.Color(241, 245, 71), new shims_1.Color(230, 230, 230), shims_1.Color.fromString("white")];
	        this.secondaryCols = [shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), this.darkBlue, shims_1.Color.fromString("green"), shims_1.Color.fromString("blue"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), this.darkGreen, shims_1.Color.fromString("white"), new shims_1.Color(128, 255, 128), new shims_1.Color(255, 128, 0), this.darkGreen, this.darkBlue, new shims_1.Color(13, 131, 10), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), new shims_1.Color(7, 177, 33), shims_1.Color.fromString("red"), shims_1.Color.fromString("black")];
	        this.SMILE_DIFF = 2;
	        this.DAMPING = 7;
	        this.MAX_TICKS_TOUCHING_GOAL = 60;
	        this.worldCup = false;
	        this.pointsX = new Array(0);
	        this.pointsY = new Array(0);
	        this.p2Col = 1;
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    initStuff() {
	        this.fEndGame = true;
	        this.p1X = 200;
	        this.p1Y = 0;
	        this.p2X = 800;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.ballOldX = this.ballX = 500;
	        this.ballOldY = this.ballY = 200;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.playOnTicks = 10;
	        this.fPlayOn = false;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.JUMPVEL = this.fSuperSlime ? 65 : 31;
	        this.SLIMEVEL = this.fSuperSlime ? 16 : 8;
	        this.GRAVITY = this.fSuperSlime ? 8 : 2;
	    }
	    drawButtons() {
	        var var1 = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "World Cup"];
	        var var2 = this.screen.getFontMetrics();
	        var var3 = new shims_1.Color(0, 0, 128);
	        for (var var4 = 0; var4 < 5; ++var4) {
	            this.screen.setColor(var3);
	            this.screen.fillRect(((2 * var4 + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(var1[var4], ((2 * var4 + 1) * this.nWidth / 10 | 0) - (var2.stringWidth(var1[var4]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (var2.getHeight() / 2 | 0));
	        }
	        this.flip();
	    }
	    testButton(var1, var2) {
	        for (var var3 = 0; var3 < 5; ++var3) {
	            if (var1 > ((2 * var3 + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) && var1 < ((2 * var3 + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) && var2 > (this.nHeight * 2 / 10 | 0) && var2 < (this.nHeight * 3 / 10 | 0)) {
	                if (var3 === 4) {
	                    this.gameLength = 120000;
	                    this.worldCup = true;
	                }
	                else {
	                    this.gameLength = (1 << var3) * 60000;
	                    this.worldCup = false;
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    handleEvent(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((var1.id)) {
	                case 401:
	                case 403:
	                    if (this.fCanChangeCol) {
	                        switch ((var1.key)) {
	                            case 54:
	                                this.fSuperSlime = !this.fSuperSlime;
	                                this.repaint();
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                do {
	                                    this.p2Col = this.p2Col === 0 ? this.slimaryCols.length - 1 : this.p2Col - 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                do {
	                                    this.p2Col = this.p2Col !== this.slimaryCols.length - 1 ? this.p2Col + 1 : 0;
	                                } while ((this.p2Col === this.p1Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 83:
	                            case 115:
	                                do {
	                                    this.p1Col = this.p1Col !== this.slimaryCols.length - 1 ? this.p1Col + 1 : 0;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 87:
	                            case 119:
	                                while ((true)) {
	                                    this.p1Col = this.p1Col === 0 ? this.slimaryCols.length - 1 : this.p1Col - 1;
	                                    if (this.p1Col !== this.p2Col) {
	                                        this.drawScores();
	                                        this.repaint();
	                                        break;
	                                    }
	                                }
	                                ;
	                        }
	                    }
	                    if (!this.fEndGame) {
	                        switch ((var1.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                return false;
	                            case 65:
	                            case 97:
	                                this.p1XV = -this.SLIMEVEL;
	                                return false;
	                            case 66:
	                            case 98:
	                                this.toggleBuffering();
	                                return false;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.SLIMEVEL;
	                                return false;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (this.p2Y === 0 && !this.worldCup) {
	                                    this.p2YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                if (!this.worldCup) {
	                                    this.p2XV = -this.SLIMEVEL;
	                                }
	                                return false;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                if (!this.worldCup) {
	                                    this.fP2Sticky = true;
	                                }
	                                return false;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                if (!this.worldCup) {
	                                    this.p2XV = this.SLIMEVEL;
	                                }
	                                return false;
	                            case 83:
	                            case 115:
	                                this.fP1Sticky = true;
	                                return false;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.JUMPVEL;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((var1.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                        case 1005:
	                            this.fP2Sticky = false;
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 83:
	                        case 115:
	                            this.fP1Sticky = false;
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay && this.testButton(var1.x, var1.y)) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 500;
	                        this.ballY = 200;
	                        this.ballOldX = 500;
	                        this.ballOldY = 200;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1Score = 0;
	                        this.p2Score = 0;
	                        this.promptMsg = "";
	                        this.paint(this.getGraphics());
	                        try {
	                            yield shims_1.Thread.sleep(100);
	                        }
	                        catch (var2) {
	                        }
	                        ;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
	                    this.requestFocus();
	            }
	            return false;
	        });
	    }
	    DrawSlimers() {
	        var var1 = (this.nWidth / 10 | 0);
	        var var2 = (this.nHeight / 10 | 0);
	        var var3 = (this.nWidth / 50 | 0);
	        var var4 = (this.nHeight / 25 | 0);
	        var var5 = (this.ballX * this.nWidth / 1000 | 0);
	        var var6 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var var7 = (this.p1OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var var8 = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7, var8, var1, var2);
	        var7 = (this.p2OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7, var8, var1, var2);
	        if (!this.fEndGame) {
	            this.MoveBall();
	        }
	        var7 = (this.p1X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.fSuperSlime ? this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length] : this.slimaryCols[this.p1Col]);
	        this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.pointsX[0] = this.pointsX[2] = var7 + (var1 / 2 | 0);
	        this.pointsX[1] = var7 + (var1 * 2 / 5 | 0);
	        this.pointsX[3] = var7 + (var1 / 8 | 0);
	        this.pointsY[0] = var8;
	        this.pointsY[1] = this.pointsY[3] = var8 + (var2 / 2 | 0);
	        this.pointsY[2] = var8 + var2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var var9 = this.p1X + 38;
	        var var10 = this.p1Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var var11 = var7 - var5;
	        var var12 = var8 - var6;
	        var var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var var14 = Math.random() < 0.01;
	        if (var14) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var var15;
	        var var16;
	        var var17;
	        var var18;
	        var var19;
	        if (this.p1Score > this.p2Score + 2) {
	            var15 = (this.p1X * this.nWidth / 1000 | 0);
	            var16 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            var17 = (this.nWidth / 20 | 0);
	            var18 = (this.nHeight / 20 | 0);
	            var19 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(var15, var16 + var19, var17, var18, -30, -150);
	                ++var19;
	            } while ((var19 < 3));
	        }
	        var7 = (this.p2X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.fSuperSlime ? this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length] : this.slimaryCols[this.p2Col]);
	        this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.pointsX[0] = this.pointsX[2] = var7 + (var1 / 2 | 0);
	        this.pointsX[1] = var7 + (var1 * 3 / 5 | 0);
	        this.pointsX[3] = var7 + (var1 * 7 / 8 | 0);
	        this.pointsY[0] = var8;
	        this.pointsY[1] = this.pointsY[3] = var8 + (var2 / 2 | 0);
	        this.pointsY[2] = var8 + var2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var9 = this.p2X - 18;
	        var10 = this.p2Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var11 = var7 - var5;
	        var12 = var8 - var6;
	        var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var14 = Math.random() < 0.01;
	        if (var14) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(var14 ? shims_1.Color.fromString("gray") : shims_1.Color.fromString("white"));
	            this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        if (this.p2Score > this.p1Score + 2) {
	            var15 = (this.nWidth / 20 | 0);
	            var16 = (this.nHeight / 20 | 0);
	            var17 = (this.p2X * this.nWidth / 1000 | 0) - var15;
	            var18 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            var19 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(var17, var18 + var19, var15, var16, -10, -150);
	                ++var19;
	            } while ((var19 < 3));
	        }
	    }
	    paint(var1) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.drawScores();
	        if (!this.fInPlay) {
	            this.DrawSlimers();
	            this.drawButtons();
	        }
	        this.DrawGoals();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var var2 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fSuperSlime) {
	                this.screen.drawString("Super Soccer Slime!", (this.nWidth / 2 | 0) - (var2.stringWidth("Super Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - var2.getHeight());
	            }
	            else {
	                this.screen.drawString("Soccer Slime!", (this.nWidth / 2 | 0) - (var2.stringWidth("Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - var2.getHeight());
	            }
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            var2 = this.screen.getFontMetrics();
	            this.screen.drawString("Written by Quin Pendragon", (this.nWidth / 2 | 0) - (var2.stringWidth("Written by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + var2.getHeight() * 2);
	        }
	        this.flip();
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    ReplayFrame(var1, var2, var3, var4, var5, var6) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (var6) {
	                this.ballX = -1000;
	                this.ballOldX = 500;
	                this.ballY = -1000;
	                this.ballOldY = 500;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var var7 = var1 !== 0 ? var1 - 1 : 199;
	                this.p1OldX = this.replayData[var7][0];
	                this.p1OldY = this.replayData[var7][1];
	                this.p2OldX = this.replayData[var7][2];
	                this.p2OldY = this.replayData[var7][3];
	                if (var1 === 0) {
	                    this.ballOldX = 500;
	                    this.ballOldY = 200;
	                }
	                else {
	                    this.ballOldX = this.replayData[var7][4];
	                    this.ballOldY = this.replayData[var7][5];
	                }
	            }
	            this.p1X = this.replayData[var1][0];
	            this.p1Y = this.replayData[var1][1];
	            this.p2X = this.replayData[var1][2];
	            this.p2Y = this.replayData[var1][3];
	            this.ballX = this.replayData[var1][4];
	            this.ballY = this.replayData[var1][5];
	            this.p1Col = this.replayData[var1][6];
	            this.p2Col = this.replayData[var1][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((var1 / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", var2, var3);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(var2, var3 - var5, var4, var5 * 2);
	            }
	            this.DrawSlimers();
	            this.DrawGoals();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var8) {
	            }
	            ;
	        });
	    }
	    MakeTime(var1) {
	        var var3 = Math.round(var1 / 10) % 100;
	        var var5 = Math.round(var1 / 1000) % 60;
	        var var7 = Math.round(var1 / 60000) % 60;
	        var var9 = "";
	        if (var7 < 10) {
	            var9 = var9 + "0";
	        }
	        var9 = var9 + var7;
	        var9 = var9 + ":";
	        if (var5 < 10) {
	            var9 = var9 + "0";
	        }
	        var9 = var9 + var5;
	        var9 = var9 + ":";
	        if (var3 < 10) {
	            var9 = var9 + "0";
	        }
	        var9 = var9 + var3;
	        return var9;
	    }
	    MoveSlimers() {
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 0:
	                    this.controlP2v0();
	                    break;
	                case 1:
	                    this.controlP2v1();
	                    break;
	                case 2:
	                    this.controlP2v2();
	                    break;
	                case 3:
	                    this.controlP2v3();
	            }
	        }
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 950) {
	            this.p1X = 950;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.GRAVITY;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.GRAVITY;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    MoveBall() {
	        var var1 = (30 * this.nHeight / 1000 | 0);
	        var var2 = (this.ballOldX * this.nWidth / 1000 | 0);
	        var var3 = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var var4 = (this.ballX - this.p1X) * 2;
	            var var5 = this.ballY - this.p1Y;
	            var var6 = var4 * var4 + var5 * var5;
	            var var7 = this.ballVX - this.p1XV;
	            var var8 = this.ballVY - this.p1YV;
	            var var9;
	            var var10;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p1X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p1Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    if (!this.fP1Sticky) {
	                        this.ballVY += this.p1YV - (2 * var5 * var10 / var9 | 0);
	                        this.ballVX += ((this.p1XV - (2 * var4 * var10 / var9 | 0)) * 7 / 10 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	            }
	            var4 = (this.ballX - this.p2X) * 2;
	            var5 = this.ballY - this.p2Y;
	            var6 = var4 * var4 + var5 * var5;
	            var7 = this.ballVX - this.p2XV;
	            var8 = this.ballVY - this.p2YV;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p2X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p2Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    if (!this.fP2Sticky) {
	                        this.ballVX += ((this.p2XV - (2 * var4 * var10 / var9 | 0)) * 7 / 10 | 0);
	                        this.ballVY += this.p2YV - (2 * var5 * var10 / var9 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX <= 50 || this.ballX >= 950) {
	                if (this.ballY > 200 && this.ballOldY < 200 || this.ballY < 200 && this.ballOldY >= 200) {
	                    this.ballY = 200;
	                    this.ballVY *= -1;
	                }
	                if (this.ballY > 180 && this.ballY < 220) {
	                    if (this.ballX > 40 && this.ballX < 50 && this.ballVX < 0) {
	                        this.ballX = 50;
	                        this.ballVX *= -1;
	                    }
	                    if (this.ballX < 960 && this.ballX > 950 && this.ballVX > 0) {
	                        this.ballX = 950;
	                        this.ballVX *= -1;
	                    }
	                }
	            }
	            if (this.ballY < 34) {
	                this.ballY = 34;
	                this.ballVY = (-this.ballVY * 7 / 10 | 0);
	                this.ballVX = (this.ballVX * 7 / 10 | 0);
	            }
	        }
	        var2 = (this.ballX * this.nWidth / 1000 | 0);
	        var3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("yellow"));
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	    }
	    DrawGoals() {
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect((this.nWidth / 20 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 20 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        this.screen.fillRect((this.nWidth * 9 / 10 | 0), (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        for (var var1 = 0; var1 < (this.nWidth / 20 | 0); var1 += 5) {
	            this.screen.drawLine(var1, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), var1, (4 * this.nHeight / 5 | 0));
	            this.screen.drawLine(this.nWidth - var1, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), this.nWidth - var1, (4 * this.nHeight / 5 | 0));
	        }
	        for (var var2 = (4 * this.nHeight / 5 | 0) - (this.nHeight / 5 | 0); var2 < (4 * this.nHeight / 5 | 0); var2 += 5) {
	            this.screen.drawLine(0, var2, (this.nWidth / 20 | 0), var2);
	            this.screen.drawLine(this.nWidth, var2, this.nWidth - (this.nWidth / 20 | 0), var2);
	        }
	        var var3 = ((60 - this.p1TouchingGoal) * this.nWidth / 120 | 0);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.screen.fillRect(0, this.nHeight - 5, var3, 5);
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(var3, this.nHeight - 5, (this.nWidth / 2 | 0) - var3, 5);
	        var var4 = this.nWidth - ((60 - this.p2TouchingGoal) * this.nWidth / 120 | 0);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.screen.fillRect(var4, this.nHeight - 5, this.nWidth, 5);
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect((this.nWidth / 2 | 0), this.nHeight - 5, var4 - (this.nWidth / 2 | 0), 5);
	    }
	    DrawStatus() {
	        var var1 = this.screen;
	        var var2 = this.screen.getFontMetrics();
	        var var3 = null;
	        var var4 = this.MakeTime(this.gameTime);
	        var var5 = (this.nHeight / 20 | 0);
	        var var6 = 0;
	        var var7 = var2.stringWidth(var4);
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 1:
	                    var3 = "Quarter Finals";
	                    break;
	                case 2:
	                    var3 = "Semi-Finals";
	                    break;
	                case 3:
	                    var3 = "Final";
	                    break;
	                default:
	                    var3 = "Qualifying";
	            }
	            if (this.fGoldenGoal) {
	                var3 = var3 + " [Golden Goal]";
	            }
	            else if (this.fExtraTime) {
	                var3 = var3 + " [Extra Time]";
	            }
	            var6 = var2.stringWidth(var3);
	        }
	        var var8 = var6 > var7 ? var6 : var7;
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var1.fillRect((this.nWidth / 2 | 0) - (var8 / 2 | 0) - 5, 0, var8 + 10, var5 + 22);
	        var1.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(var4, (this.nWidth / 2 | 0) - (var7 / 2 | 0), var2.getAscent() + 20);
	        if (var3 != null) {
	            this.screen.drawString(var3, (this.nWidth / 2 | 0) - (var6 / 2 | 0), var2.getAscent() + 20 - var2.getHeight());
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(var1, var2) {
	        if (((typeof var1 === 'string') || var1 === null) && ((typeof var2 === 'number') || var2 === null)) {
	            return (() => {
	                var var3 = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var3.getHeight() * (var2 + 1) + 10);
	            })();
	        }
	        else if (var1 === undefined && var2 === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    promptBox(var1, var2) {
	        var var3 = this.screen.getFontMetrics();
	        var var4 = var3.stringWidth(var1);
	        var var5 = var3.stringWidth(var2);
	        var var6 = var4 > var5 ? var4 : var5;
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect((this.nWidth / 2 | 0) - (var6 / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), var6 + 40, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(var1, (this.nWidth / 2 | 0) - (var4 / 2 | 0), (this.nHeight * 9 / 20 | 0));
	        this.screen.drawString(var2, (this.nWidth / 2 | 0) - (var5 / 2 | 0), (this.nHeight * 11 / 20 | 0));
	        this.flip();
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    drawScores() {
	        var var1 = this.screen;
	        var var2 = (this.nHeight / 20 | 0);
	        var var3 = this.screen.getFontMetrics();
	        var3.stringWidth("Replay...");
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var1.fillRect(0, 0, this.nWidth, var2 + 22);
	        var1.setColor(shims_1.Color.fromString("white"));
	        var1.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, (this.nWidth / 20 | 0), var2);
	        var var4 = this.p2Score + " : " + this.slimeColText[this.p2Col];
	        var1.drawString(var4, this.nWidth - (this.nWidth / 20 | 0) - var3.stringWidth(var4), var2);
	    }
	    checkScored() {
	        if (this.ballY >= 200 || this.ballX >= 40 && this.ballX <= 960) {
	            return false;
	        }
	        else {
	            this.nScoreX = this.ballX;
	            this.fPlayOn = true;
	            this.playOnTicks = 10;
	            return true;
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.worldCupRound = 0;
	            do {
	                this.initStuff();
	                this.replayPos = this.replayStart = 0;
	                this.scoringRun = 0;
	                this.fP1Touched = this.fP2Touched = false;
	                this.gameTime = 0;
	                this.startTime = shims_1.System.currentTimeMillis();
	                this.fEndGame = false;
	                this.fCanChangeCol = false;
	                this.mousePressed = false;
	                this.gameTime = Math.round(this.gameLength);
	                this.fInPlay = true;
	                this.fEndGame = false;
	                var var1;
	                if (this.worldCup) {
	                    this.paint(this.getGraphics());
	                    do {
	                        this.p2Col = ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);
	                    } while ((this.p1Col === this.p2Col));
	                    var1 = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
	                    switch ((this.worldCupRound)) {
	                        case 0:
	                            this.promptBox("Qualifying Round", var1);
	                            this.gameLength = 30000;
	                            break;
	                        case 1:
	                            this.promptBox("Quarter Finals", var1);
	                            this.gameLength = 120000;
	                            break;
	                        case 2:
	                            this.promptBox("Semi-Finals", var1);
	                            this.gameLength = 120000;
	                            break;
	                        case 3:
	                            this.promptBox("World Cup Final", var1);
	                            this.gameLength = 300000;
	                    }
	                    try {
	                        yield shims_1.Thread.sleep(4000);
	                    }
	                    catch (var3) {
	                    }
	                    ;
	                    this.repaint();
	                    this.flip();
	                }
	                while ((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1Score === this.p2Score)) {
	                    this.gameTime = this.startTime + Math.round(this.gameLength) - shims_1.System.currentTimeMillis();
	                    if (this.gameTime < 0) {
	                        this.gameTime = 0;
	                    }
	                    if (this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1Score === this.p2Score) {
	                        var1 = this.p1Score === 0 ? " nil" : " " + this.p1Score;
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + var1 + ", " + this.slimeColText[this.p2Col] + var1 + ".", "And the game goes into extra time...");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var8) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                        this.startTime += 30000;
	                        this.gameTime += 30000;
	                        this.fExtraTime = true;
	                    }
	                    else if (this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1Score === this.p2Score) {
	                        this.fGoldenGoal = true;
	                        var1 = this.p1Score === 0 ? " nil" : " " + this.p1Score;
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + var1 + ", " + this.slimeColText[this.p2Col] + var1 + ", and the game goes into Golden Goal.", "The next player to score will win the match!");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                    }
	                    this.SaveReplayData();
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    this.DrawGoals();
	                    this.DrawStatus();
	                    this.flip();
	                    if (this.p1X < 150) {
	                        ++this.p1TouchingGoal;
	                    }
	                    else {
	                        this.p1TouchingGoal = 0;
	                    }
	                    if (this.p2X > 850) {
	                        ++this.p2TouchingGoal;
	                    }
	                    else {
	                        this.p2TouchingGoal = 0;
	                    }
	                    if (this.fPlayOn) {
	                        --this.playOnTicks;
	                    }
	                    else {
	                        this.fPlayOn = this.checkScored();
	                    }
	                    if (this.playOnTicks === 0 || this.p1TouchingGoal > 60 || this.p2TouchingGoal > 60) {
	                        var var9 = shims_1.System.currentTimeMillis();
	                        if (this.p1TouchingGoal > 60) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.p2TouchingGoal > 60) {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.nScoreX < 500) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
	                        }
	                        else {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
	                        }
	                        this.drawPrompt();
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.flip();
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var6) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.playOnTicks = 10;
	                        this.fPlayOn = false;
	                        this.startTime += shims_1.System.currentTimeMillis() - var9;
	                        this.ballX = 490 + ((Math.random() * 20.0) | 0);
	                        this.ballY = 190 + ((Math.random() * 20.0) | 0);
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p1YV = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p2YV = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.repaint();
	                    }
	                    if (this.gameThread != null) {
	                        try {
	                            if (this.fPlayOn) {
	                                yield shims_1.Thread.sleep(120);
	                            }
	                            else {
	                                yield shims_1.Thread.sleep(20);
	                            }
	                        }
	                        catch (var5) {
	                        }
	                        ;
	                    }
	                }
	                ;
	                this.fEndGame = true;
	                if (this.fPlayOn) {
	                    if (this.nScoreX < 500) {
	                        ++this.p2Score;
	                        this.promptMsg = this.slimeColText[this.p2Col] + " scores at the final whistle!";
	                    }
	                    else {
	                        ++this.p1Score;
	                        this.promptMsg = this.slimeColText[this.p1Col] + " scores at the final whistle!";
	                    }
	                    this.drawPrompt();
	                }
	                else {
	                    this.drawPrompt("And that\'s the final whistle!", 0);
	                }
	                if (this.worldCup) {
	                    if (this.p1Score === this.p2Score) {
	                        this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                        this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
	                        this.worldCup = false;
	                        this.flip();
	                    }
	                    else if (this.p1Score >= this.p2Score) {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the world cup!", 1);
	                                break;
	                            case 1:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
	                                break;
	                            case 2:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
	                                break;
	                            case 3:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " wins the WORLD CUP!!!!!", 1);
	                        }
	                        if (this.worldCupRound === 3) {
	                            this.worldCup = false;
	                            this.promptBox("You win the world cup!!!", "Congratulations!");
	                        }
	                        else {
	                            ++this.worldCupRound;
	                        }
	                    }
	                    else {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                            case 1:
	                                this.promptBox("You have been eliminated.", "Goodbye.");
	                                break;
	                            case 2:
	                                this.promptBox("You have been knocked out of the semifinals.", "You played well.");
	                                break;
	                            case 3:
	                                this.promptBox("You came second.", "Are you satisfied with that?");
	                        }
	                        this.worldCup = false;
	                    }
	                }
	                else if (this.p1Score === this.p2Score) {
	                    this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                }
	                else if (this.p1Score < this.p2Score) {
	                    this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1);
	                }
	                else {
	                    this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
	                }
	                this.flip();
	                try {
	                    yield shims_1.Thread.sleep(5000);
	                }
	                catch (var4) {
	                }
	                ;
	                this.initStuff();
	            } while ((this.worldCup));
	            this.fCanChangeCol = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.initStuff();
	        this.promptMsg = "Click on an option to play...";
	        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    toggleBuffering() {
	        if (this.doubleBuffered = !this.doubleBuffered) {
	            this.screen = this.backBuffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        else {
	            this.screen = this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        this.repaint();
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var1 = this.screen.getFontMetrics();
	            var var2 = var1.stringWidth("Replay...");
	            var var3 = var1.getHeight();
	            var var4 = (this.nWidth / 2 | 0) - (var2 / 2 | 0);
	            var var5 = (this.nHeight / 2 | 0) - var3;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            var var6 = this.replayPos - 1;
	            while ((!this.mousePressed)) {
	                ++var6;
	                if (var6 >= 200) {
	                    var6 = 0;
	                }
	                if (var6 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var7) {
	                    }
	                    ;
	                    var6 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	                yield this.ReplayFrame(var6, var4, var5, var2, var3, false);
	                this.flip();
	            }
	            ;
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    flip() {
	        if (this.doubleBuffered) {
	            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
	        }
	    }
	    getBallBounceX() {
	        var var1 = this.ballVY + (Math.sqrt((this.ballVY * this.ballVY + 2 * this.ballY)) | 0);
	        var var2 = this.ballX + var1 * this.ballVX;
	        if (var2 < 0) {
	            var2 = -var2;
	        }
	        if (var2 > 1000) {
	            var2 = 1000 - var2;
	        }
	        return var2;
	    }
	    getBallMaxY() {
	        return this.ballVY < 0 ? this.ballY : this.ballY + (this.ballVY * this.ballVY / 2 | 0);
	    }
	    controlP2v0() {
	        this.p2XV = 0;
	        if (this.ballX > this.p2X + 5 && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.ballX + 50 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X + 50 && this.p2YV === 0 && this.ballY > 10 && this.ballY < 150) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v1() {
	        this.p2XV = 0;
	        var var1 = this.getBallBounceX();
	        var var2 = this.getBallMaxY();
	        if (var1 > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (var1 + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (var1 > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && var1 < 200 && this.p2X > this.p1X || var1 < this.p1X + 50 && var1 > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && var1 > 950 && this.p2YV === 0 && var2 > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (var2 < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2X < 150) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v2() {
	        var var1 = this.getBallBounceX();
	        var var2 = this.getBallMaxY();
	        if (this.p2X < 790) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (var1 > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (var1 + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (var1 > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && var1 < 200 && this.p2X > this.p1X || var1 < this.p1X + 50 && var1 > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && var1 > 950 && this.p2YV === 0 && var2 > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (var2 < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && var1 > 500 && var2 > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v3() {
	        var var1 = (this.SLIMEVEL * 4 / 3 | 0);
	        var var2 = this.getBallBounceX();
	        var var3 = this.getBallMaxY();
	        if (this.p2X < 790) {
	            this.p2XV = var1;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -var1;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (var2 > 900) {
	            this.p2XV = var1;
	        }
	        if (var2 + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -var1;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = var1;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (var2 > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = var1;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = var1;
	        }
	        if (this.p2Score >= this.p1Score && var2 < 200 && this.p2X > this.p1X || var2 < this.p1X + 50 && var2 > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = var1;
	            }
	            if (this.ballX > 800 && var2 > 950 && this.p2YV === 0 && var3 > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (var3 < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2XV > 0 && var3 > 200 && var2 > this.p2X + 300) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && var2 > this.p2X + 400 && var3 > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / var1 | 0)) {
	            this.p2XV = -var1;
	        }
	    }
	    method_rn_WorldCupSoccerSlime_p_1(var1) {
	        shims_1.System.out.println(var1);
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = WorldCupSoccerSlime;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class ElasticSlime extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.slimeColText = ["Argentina", "Belgium", "Australia", "Iceland", "Cameroon", "P.R. of China", "Costa Rica", "Croatia", "Denmark", "Eucador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "Seth Efrica", "South Corea", "Sveden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany", "Night Elves"];
	        this.darkRed = new shims_1.Color(128, 0, 0);
	        this.darkGreen = new shims_1.Color(0, 128, 0);
	        this.darkBlue = new shims_1.Color(0, 0, 128);
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Sticky = false;
	        this.fP2Sticky = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.p1TouchingGoal = 0;
	        this.p2TouchingGoal = 0;
	        this.fEndGame = false;
	        this.fPlayOn = false;
	        this.nScoreX = 0;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.playOnTicks = 0;
	        this.SMILE_DIFF = 0;
	        this.DAMPING = 0;
	        this.MAX_TICKS_TOUCHING_GOAL = 0;
	        this.JUMPVEL = 0;
	        this.SLIMEVEL = 0;
	        this.GRAVITY = 0;
	        this.gameLength = 0;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.Speed = 0;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fSuperSlime = false;
	        this.dustX = 0;
	        this.dustY = 0;
	        this.doubleBuffered = false;
	        this.NUM_PARTICLES = 0;
	        this.particle_size = 0;
	        this.slimaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), this.darkGreen, shims_1.Color.fromString("white"), this.darkRed, this.darkRed, new shims_1.Color(119, 41, 28), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(128, 128, 255), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(119, 41, 28), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(185, 30, 2), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(252, 239, 82), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(16, 180, 180), new shims_1.Color(241, 245, 71), new shims_1.Color(230, 230, 230), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue")];
	        this.secondaryCols = [shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), new shims_1.Color(128, 128, 255), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), this.darkBlue, shims_1.Color.fromString("green"), shims_1.Color.fromString("blue"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), this.darkGreen, shims_1.Color.fromString("white"), new shims_1.Color(128, 255, 128), new shims_1.Color(255, 128, 0), this.darkGreen, this.darkBlue, new shims_1.Color(13, 131, 10), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), new shims_1.Color(7, 177, 33), shims_1.Color.fromString("red"), shims_1.Color.fromString("black"), shims_1.Color.fromString("blue")];
	        this.frenzyCol = 0;
	        this.SMILE_DIFF = 2;
	        this.DAMPING = 7;
	        this.MAX_TICKS_TOUCHING_GOAL = 600000000;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.Speed = 16;
	        this.dustX = 0;
	        this.dustY = 0;
	        this.NUM_PARTICLES = 100;
	        this.particle_size = 1;
	        this.particle_x = new Array(this.NUM_PARTICLES);
	        this.particle_y = new Array(this.NUM_PARTICLES);
	        this.particle_weight = new Array(this.NUM_PARTICLES);
	        this.pointsX = new Array(0);
	        this.pointsY = new Array(0);
	        this.p2Col = 1;
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    initStuff() {
	        this.fEndGame = true;
	        this.p1X = 200;
	        this.p1Y = 0;
	        this.p2X = 800;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.ballOldX = this.ballX = 500;
	        this.ballOldY = this.ballY = 200;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.playOnTicks = 10;
	        this.fPlayOn = false;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.JUMPVEL = !this.fSuperSlime ? 31 : 65;
	        this.SLIMEVEL = !this.fSuperSlime ? 8 : 16;
	        this.GRAVITY = !this.fSuperSlime ? 2 : 8;
	    }
	    drawButtons() {
	        var buttons = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "World Cup"];
	        var fm = this.screen.getFontMetrics();
	        var darkBlue = new shims_1.Color(0, 0, 128);
	        for (var i = 0; i < 5; ++i) {
	            this.screen.setColor(darkBlue);
	            this.screen.fillRect(((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(buttons[i], ((2 * i + 1) * this.nWidth / 10 | 0) - (fm.stringWidth(buttons[i]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (fm.getHeight() / 2 | 0));
	        }
	        this.flip();
	    }
	    testButton(x, y) {
	        for (var i = 0; i < 5; ++i) {
	            if (x > ((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) && x < ((2 * i + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) && y > (this.nHeight * 2 / 10 | 0) && y < (this.nHeight * 3 / 10 | 0)) {
	                if (i === 4) {
	                    this.gameLength = 120000;
	                    this.worldCup = true;
	                }
	                else {
	                    this.gameLength = (1 << i) * 60000;
	                    this.worldCup = false;
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    handleEvent(event) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((event.id)) {
	                case 401:
	                case 403:
	                    if (this.fCanChangeCol) {
	                        switch ((event.key)) {
	                            case 54:
	                                this.fSuperSlime = !this.fSuperSlime;
	                                this.repaint();
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                do {
	                                    this.p2Col = this.p2Col !== 0 ? this.p2Col - 1 : this.slimaryCols.length - 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                do {
	                                    this.p2Col = this.p2Col === this.slimaryCols.length - 1 ? 0 : this.p2Col + 1;
	                                } while ((this.p2Col === this.p1Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 83:
	                            case 115:
	                                do {
	                                    this.p1Col = this.p1Col === this.slimaryCols.length - 1 ? 0 : this.p1Col + 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 87:
	                            case 119:
	                                while ((true)) {
	                                    this.p1Col = this.p1Col !== 0 ? this.p1Col - 1 : this.slimaryCols.length - 1;
	                                    if (this.p1Col !== this.p2Col) {
	                                        this.drawScores();
	                                        this.repaint();
	                                        break;
	                                    }
	                                }
	                                ;
	                        }
	                    }
	                    if (!this.fEndGame) {
	                        switch ((event.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                return false;
	                            case 65:
	                            case 97:
	                                this.p1XV = -this.SLIMEVEL;
	                                return false;
	                            case 66:
	                            case 98:
	                                this.toggleBuffering();
	                                return false;
	                            case 68:
	                            case 100:
	                                this.SLIMEVEL = !this.fSuperSlime ? 8 : 16;
	                                if (this.Speed > 5) {
	                                }
	                                --this.Speed;
	                                this.SLIMEVEL = !this.fSuperSlime ? (this.Speed / 2 | 0) : this.Speed;
	                                this.p1XV = this.SLIMEVEL;
	                                return false;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (this.p2Y === 0 && !this.worldCup) {
	                                    this.p2YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                this.SLIMEVEL = !this.fSuperSlime ? 8 : 16;
	                                if (this.Speed > 5) {
	                                }
	                                --this.Speed;
	                                this.SLIMEVEL = !this.fSuperSlime ? (this.Speed / 2 | 0) : this.Speed;
	                                this.p2XV = this.SLIMEVEL;
	                                if (!this.worldCup) {
	                                    this.p2XV = -this.SLIMEVEL;
	                                }
	                                return false;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                if (!this.worldCup) {
	                                    this.fP2Sticky = true;
	                                }
	                                return false;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                if (!this.worldCup) {
	                                    this.p2XV = this.SLIMEVEL;
	                                }
	                                return false;
	                            case 83:
	                            case 115:
	                                this.fP1Sticky = true;
	                                return false;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.JUMPVEL;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((event.key)) {
	                        case 65:
	                        case 76:
	                        case 97:
	                        case 108:
	                        case 1007:
	                        default:
	                            return false;
	                        case 68:
	                        case 100:
	                            this.SLIMEVEL = !this.fSuperSlime ? 8 : 16;
	                            this.Speed = 16;
	                            if (this.p1X > 0) {
	                                this.p1XV = -50;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            this.SLIMEVEL = !this.fSuperSlime ? 8 : 16;
	                            this.Speed = 16;
	                            if (this.p2X > 0) {
	                                this.p2XV = 50;
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                        case 1005:
	                            this.fP2Sticky = false;
	                            return false;
	                        case 83:
	                        case 115:
	                            this.fP1Sticky = false;
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay && this.testButton(event.x, event.y)) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 500;
	                        this.ballY = 200;
	                        this.ballOldX = 500;
	                        this.ballOldY = 200;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1Score = 0;
	                        this.p2Score = 0;
	                        this.promptMsg = "";
	                        this.paint(this.getGraphics());
	                        try {
	                            yield shims_1.Thread.sleep(100);
	                        }
	                        catch (var4) {
	                        }
	                        ;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
	                    this.requestFocus();
	            }
	            return false;
	        });
	    }
	    DrawSlimers() {
	        var k1 = (this.nWidth / 10 | 0);
	        var j2 = (this.nHeight / 10 | 0);
	        var i3 = (this.nWidth / 50 | 0);
	        var j3 = (this.nHeight / 25 | 0);
	        var k3 = (this.ballX * this.nWidth / 1000 | 0);
	        var l3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var i = (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        var l = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawLine(i, l + 20, 0, l + 20);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.drawLine(i, l - 1 + 20, 0, l - 1 + 20);
	        this.screen.drawLine(i, l + 1 + 20, 0, l + 1 + 20);
	        this.screen.drawLine(i, l - 2 + 20, 0, l - 2 + 20);
	        this.screen.drawLine(i, l + 2 + 20, 0, l + 2 + 20);
	        this.screen.drawLine(i, l - 3 + 20, 0, l - 3 + 20);
	        this.screen.drawLine(i, l + 3 + 20, 0, l + 3 + 20);
	        this.screen.drawLine(i, l - 4 + 20, 0, l - 4 + 20);
	        this.screen.drawLine(i, l + 4 + 20, 0, l + 4 + 20);
	        this.screen.drawLine(i, l - 5 + 20, 0, l - 5 + 20);
	        this.screen.drawLine(i, l + 5 + 20, 0, l + 5 + 20);
	        this.screen.drawLine(i, l - 6 + 20, 0, l - 6 + 20);
	        this.screen.drawLine(i, l + 6 + 20, 0, l + 6 + 20);
	        this.screen.drawLine(i, l - 7 + 20, 0, l - 7 + 20);
	        this.screen.drawLine(i, l + 7 + 20, 0, l + 7 + 20);
	        this.screen.drawLine(i, l - 8 + 20, 0, l - 8 + 20);
	        this.screen.drawLine(i, l + 8 + 20, 0, l + 8 + 20);
	        this.screen.drawLine(i, l - 9 + 20, 0, l - 9 + 20);
	        this.screen.drawLine(i, l + 9 + 20, 0, l + 9 + 20);
	        this.screen.drawLine(i, l - 10 + 20, 0, l - 10 + 20);
	        this.screen.drawLine(i, l + 10 + 20, 0, l + 10 + 20);
	        i = (this.p1OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        i = (this.p2OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        if (!this.fEndGame) {
	            this.MoveBall();
	        }
	        i = (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p1Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 2 / 5 | 0);
	        this.pointsX[3] = i + (k1 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var l4 = this.p1X + 38;
	        var i5 = this.p1Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        var i4 = i - k3;
	        var j4 = l - l3;
	        var k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        var flag = Math.random() < 0.01;
	        if (flag) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var i2;
	        var l2;
	        var k;
	        var j1;
	        var k5;
	        if (this.p1Score > this.p2Score + 2) {
	            i2 = (this.p1X * this.nWidth / 1000 | 0);
	            l2 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            k = (this.nWidth / 20 | 0);
	            j1 = (this.nHeight / 20 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        i = (this.p2X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawLine(i, l + 20, 1000, l + 20);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.drawLine(i, l - 1 + 20, 1000, l - 1 + 20);
	        this.screen.drawLine(i, l + 1 + 20, 1000, l + 1 + 20);
	        this.screen.drawLine(i, l - 2 + 20, 1000, l - 2 + 20);
	        this.screen.drawLine(i, l + 2 + 20, 1000, l + 2 + 20);
	        this.screen.drawLine(i, l - 3 + 20, 1000, l - 3 + 20);
	        this.screen.drawLine(i, l + 3 + 20, 1000, l + 3 + 20);
	        this.screen.drawLine(i, l - 4 + 20, 1000, l - 4 + 20);
	        this.screen.drawLine(i, l + 4 + 20, 1000, l + 4 + 20);
	        this.screen.drawLine(i, l - 5 + 20, 1000, l - 5 + 20);
	        this.screen.drawLine(i, l + 5 + 20, 1000, l + 5 + 20);
	        this.screen.drawLine(i, l - 6 + 20, 1000, l - 6 + 20);
	        this.screen.drawLine(i, l + 6 + 20, 1000, l + 6 + 20);
	        this.screen.drawLine(i, l - 7 + 20, 1000, l - 7 + 20);
	        this.screen.drawLine(i, l + 7 + 20, 1000, l + 7 + 20);
	        this.screen.drawLine(i, l - 8 + 20, 1000, l - 8 + 20);
	        this.screen.drawLine(i, l + 8 + 20, 1000, l + 8 + 20);
	        this.screen.drawLine(i, l - 9 + 20, 1000, l - 9 + 20);
	        this.screen.drawLine(i, l + 9 + 20, 1000, l + 9 + 20);
	        this.screen.drawLine(i, l - 10 + 20, 1000, l - 10 + 20);
	        this.screen.drawLine(i, l + 10 + 20, 1000, l + 10 + 20);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p2Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 3 / 5 | 0);
	        this.pointsX[3] = i + (k1 * 7 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        l4 = this.p2X - 18;
	        i5 = this.p2Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        i4 = i - k3;
	        j4 = l - l3;
	        k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        flag = Math.random() < 0.01;
	        if (flag) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(!flag ? shims_1.Color.fromString("white") : shims_1.Color.fromString("gray"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        if (this.p2Score > this.p1Score + 2) {
	            i2 = (this.nWidth / 20 | 0);
	            l2 = (this.nHeight / 20 | 0);
	            k = (this.p2X * this.nWidth / 1000 | 0) - i2;
	            j1 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        if (this.p1X < 500) {
	            this.drawDust();
	        }
	    }
	    drawDust() {
	    }
	    paint(g) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.drawScores();
	        if (!this.fInPlay) {
	            this.DrawSlimers();
	            this.drawButtons();
	        }
	        this.DrawGoals();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var fontmetrics = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fSuperSlime) {
	                this.screen.drawString("Super Elastic Soccer Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Super Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            else {
	                this.screen.drawString("Elastic Soccer Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            fontmetrics = this.screen.getFontMetrics();
	            this.screen.drawString("Written by Quin Pendragon + Anonymous Tipster", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Written by Quin Pendragon + Anonymous Tipster") / 2 | 0), (this.nHeight / 2 | 0) + fontmetrics.getHeight() * 2);
	        }
	        this.flip();
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    ReplayFrame(i, j, k, l, i1, flag) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (flag) {
	                this.ballX = -1000;
	                this.ballOldX = 500;
	                this.ballY = -1000;
	                this.ballOldY = 500;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var j1 = i === 0 ? 199 : i - 1;
	                this.p1OldX = this.replayData[j1][0];
	                this.p1OldY = this.replayData[j1][1];
	                this.p2OldX = this.replayData[j1][2];
	                this.p2OldY = this.replayData[j1][3];
	                if (i === 0) {
	                    this.ballOldX = 500;
	                    this.ballOldY = 200;
	                }
	                else {
	                    this.ballOldX = this.replayData[j1][4];
	                    this.ballOldY = this.replayData[j1][5];
	                }
	            }
	            this.p1X = this.replayData[i][0];
	            this.p1Y = this.replayData[i][1];
	            this.p2X = this.replayData[i][2];
	            this.p2Y = this.replayData[i][3];
	            this.ballX = this.replayData[i][4];
	            this.ballY = this.replayData[i][5];
	            this.p1Col = this.replayData[i][6];
	            this.p2Col = this.replayData[i][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((i / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", j, k);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(j, k - i1, l, i1 * 2);
	            }
	            this.DrawSlimers();
	            this.DrawGoals();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var9) {
	            }
	            ;
	        });
	    }
	    MakeTime(l) {
	        var l1 = Math.round(l / 10) % 100;
	        var l2 = Math.round(l / 1000) % 60;
	        var l3 = Math.round(l / 60000) % 60;
	        var s = "";
	        if (l3 < 10) {
	            s = s + "0";
	        }
	        s = s + l3;
	        s = s + ":";
	        if (l2 < 10) {
	            s = s + "0";
	        }
	        s = s + l2;
	        s = s + ":";
	        if (l1 < 10) {
	            s = s + "0";
	        }
	        s = s + l1;
	        return s;
	    }
	    MoveSlimers() {
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 0:
	                    this.controlP2v0();
	                    break;
	                case 1:
	                    this.controlP2v1();
	                    break;
	                case 2:
	                    this.controlP2v2();
	                    break;
	                case 3:
	                    this.controlP2v3();
	            }
	        }
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 950) {
	            this.p1X = 950;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.GRAVITY;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.GRAVITY;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    MoveBall() {
	        var k = (30 * this.nHeight / 1000 | 0);
	        var i = (this.ballOldX * this.nWidth / 1000 | 0);
	        var j = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var l1 = (this.ballX - this.p1X) * 2;
	            var i2 = this.ballY - this.p1Y;
	            var j2 = l1 * l1 + i2 * i2;
	            var k2 = this.ballVX - this.p1XV;
	            var l2 = this.ballVY - this.p1YV;
	            var i1;
	            var k1;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p1X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p1Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP1Sticky) {
	                        this.ballVY += this.p1YV - (2 * i2 * k1 / i1 | 0);
	                        this.ballVX += ((this.p1XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	            }
	            l1 = (this.ballX - this.p2X) * 2;
	            i2 = this.ballY - this.p2Y;
	            j2 = l1 * l1 + i2 * i2;
	            k2 = this.ballVX - this.p2XV;
	            l2 = this.ballVY - this.p2YV;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p2X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p2Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP2Sticky) {
	                        this.ballVX += ((this.p2XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                        this.ballVY += this.p2YV - (2 * i2 * k1 / i1 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX <= 50 || this.ballX >= 950) {
	                if (this.ballY > 200 && this.ballOldY < 200 || this.ballY < 200 && this.ballOldY >= 200) {
	                    this.ballY = 200;
	                    this.ballVY *= -1;
	                }
	                if (this.ballY > 180 && this.ballY < 220) {
	                    if (this.ballX > 40 && this.ballX < 50 && this.ballVX < 0) {
	                        this.ballX = 50;
	                        this.ballVX *= -1;
	                    }
	                    if (this.ballX < 960 && this.ballX > 950 && this.ballVX > 0) {
	                        this.ballX = 950;
	                        this.ballVX *= -1;
	                    }
	                }
	            }
	            if (this.ballY < 34) {
	                this.ballY = 34;
	                this.ballVY = (-this.ballVY * 7 / 10 | 0);
	                this.ballVX = (this.ballVX * 7 / 10 | 0);
	            }
	        }
	        i = (this.ballX * this.nWidth / 1000 | 0);
	        j = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("yellow"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	    }
	    DrawGoals() {
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect((this.nWidth / 20 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 20 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        this.screen.fillRect((this.nWidth * 9 / 10 | 0), (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        var p1TickX;
	        for (p1TickX = 0; p1TickX < (this.nWidth / 20 | 0); p1TickX += 5) {
	            this.screen.drawLine(p1TickX, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), p1TickX, (4 * this.nHeight / 5 | 0));
	            this.screen.drawLine(this.nWidth - p1TickX, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), this.nWidth - p1TickX, (4 * this.nHeight / 5 | 0));
	        }
	        for (p1TickX = (4 * this.nHeight / 5 | 0) - (this.nHeight / 5 | 0); p1TickX < (4 * this.nHeight / 5 | 0); p1TickX += 5) {
	            this.screen.drawLine(0, p1TickX, (this.nWidth / 20 | 0), p1TickX);
	            this.screen.drawLine(this.nWidth, p1TickX, this.nWidth - (this.nWidth / 20 | 0), p1TickX);
	        }
	        p1TickX = ((600000000 - this.p1TouchingGoal) * this.nWidth / 1200000000 | 0);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.screen.fillRect(0, this.nHeight - 5, p1TickX, 5);
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(p1TickX, this.nHeight - 5, (this.nWidth / 2 | 0) - p1TickX, 5);
	        var p2TickX = this.nWidth - ((600000000 - this.p2TouchingGoal) * this.nWidth / 1200000000 | 0);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.screen.fillRect(p2TickX, this.nHeight - 5, this.nWidth, 5);
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect((this.nWidth / 2 | 0), this.nHeight - 5, p2TickX - (this.nWidth / 2 | 0), 5);
	    }
	    DrawStatus() {
	        var g = this.screen;
	        var fontmetrics = this.screen.getFontMetrics();
	        var s = null;
	        var time = this.MakeTime(this.gameTime);
	        var i = (this.nHeight / 20 | 0);
	        var k = 0;
	        var kt = fontmetrics.stringWidth(time);
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 1:
	                    s = "Quarter Finals";
	                    break;
	                case 2:
	                    s = "Semi-Finals";
	                    break;
	                case 3:
	                    s = "Final";
	                    break;
	                default:
	                    s = "Qualifying";
	            }
	            if (this.fGoldenGoal) {
	                s = s + " [Golden Goal]";
	            }
	            else if (this.fExtraTime) {
	                s = s + " [Extra Time]";
	            }
	            k = fontmetrics.stringWidth(s);
	        }
	        var mw = k <= kt ? kt : k;
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect((this.nWidth / 2 | 0) - (mw / 2 | 0) - 5, 0, mw + 10, i + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(time, (this.nWidth / 2 | 0) - (kt / 2 | 0), fontmetrics.getAscent() + 20);
	        if (s != null) {
	            this.screen.drawString(s, (this.nWidth / 2 | 0) - (k / 2 | 0), fontmetrics.getAscent() + 20 - fontmetrics.getHeight());
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(s, i) {
	        if (((typeof s === 'string') || s === null) && ((typeof i === 'number') || i === null)) {
	            return (() => {
	                var fontmetrics = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fontmetrics.getHeight() * (i + 1) + 10);
	            })();
	        }
	        else if (s === undefined && i === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    promptBox(msg1, msg2) {
	        var fontmetrics = this.screen.getFontMetrics();
	        var len1 = fontmetrics.stringWidth(msg1);
	        var len2 = fontmetrics.stringWidth(msg2);
	        var maxlen = len1 <= len2 ? len2 : len1;
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect((this.nWidth / 2 | 0) - (maxlen / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), maxlen + 40, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(msg1, (this.nWidth / 2 | 0) - (len1 / 2 | 0), (this.nHeight * 9 / 20 | 0));
	        this.screen.drawString(msg2, (this.nWidth / 2 | 0) - (len2 / 2 | 0), (this.nHeight * 11 / 20 | 0));
	        this.flip();
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    drawScores() {
	        var g = this.screen;
	        var k = (this.nHeight / 20 | 0);
	        var fm = this.screen.getFontMetrics();
	        var i = fm.stringWidth("Replay...");
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect(0, 0, this.nWidth, k + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        g.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, (this.nWidth / 20 | 0), k);
	        var p2ScrStr = this.p2Score + " : " + this.slimeColText[this.p2Col];
	        g.drawString(p2ScrStr, this.nWidth - (this.nWidth / 20 | 0) - fm.stringWidth(p2ScrStr), k);
	    }
	    checkScored() {
	        if (this.ballY >= 200 || this.ballX >= 40 && this.ballX <= 960) {
	            return false;
	        }
	        else {
	            this.nScoreX = this.ballX;
	            this.fPlayOn = true;
	            this.playOnTicks = 10;
	            return true;
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.worldCupRound = 0;
	            do {
	                this.initStuff();
	                this.replayPos = this.replayStart = 0;
	                this.scoringRun = 0;
	                this.fP1Touched = this.fP2Touched = false;
	                this.gameTime = 0;
	                this.startTime = shims_1.System.currentTimeMillis();
	                this.fEndGame = false;
	                this.fCanChangeCol = false;
	                this.mousePressed = false;
	                this.gameTime = Math.round(this.gameLength);
	                this.fInPlay = true;
	                this.fEndGame = false;
	                var l;
	                if (this.worldCup) {
	                    this.paint(this.getGraphics());
	                    do {
	                        this.p2Col = ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);
	                    } while ((this.p1Col === this.p2Col));
	                    l = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
	                    switch ((this.worldCupRound)) {
	                        case 0:
	                            this.promptBox("Qualifying Round", l);
	                            this.gameLength = 30000;
	                            break;
	                        case 1:
	                            this.promptBox("Quarter Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 2:
	                            this.promptBox("Semi-Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 3:
	                            this.promptBox("World Cup Final", l);
	                            this.gameLength = 300000;
	                    }
	                    try {
	                        yield shims_1.Thread.sleep(4000);
	                    }
	                    catch (var5) {
	                    }
	                    ;
	                    this.repaint();
	                    this.flip();
	                }
	                while ((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1Score === this.p2Score)) {
	                    this.gameTime = this.startTime + Math.round(this.gameLength) - shims_1.System.currentTimeMillis();
	                    if (this.gameTime < 0) {
	                        this.gameTime = 0;
	                    }
	                    if (this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1Score === this.p2Score) {
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ".", "And the game goes into extra time...");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var10) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                        this.startTime += 30000;
	                        this.gameTime += 30000;
	                        this.fExtraTime = true;
	                    }
	                    else if (this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1Score === this.p2Score) {
	                        this.fGoldenGoal = true;
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ", and the game goes into Golden Goal.", "The next player to score will win the match!");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var9) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                    }
	                    this.SaveReplayData();
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    this.DrawGoals();
	                    this.DrawStatus();
	                    this.flip();
	                    if (this.p1X < 150) {
	                        ++this.p1TouchingGoal;
	                    }
	                    else {
	                        this.p1TouchingGoal = 0;
	                    }
	                    if (this.p2X > 850) {
	                        ++this.p2TouchingGoal;
	                    }
	                    else {
	                        this.p2TouchingGoal = 0;
	                    }
	                    if (this.fPlayOn) {
	                        --this.playOnTicks;
	                    }
	                    else {
	                        this.fPlayOn = this.checkScored();
	                    }
	                    if (this.playOnTicks === 0 || this.p1TouchingGoal > 600000000 || this.p2TouchingGoal > 600000000) {
	                        var var11 = shims_1.System.currentTimeMillis();
	                        if (this.p1TouchingGoal > 600000000) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.p2TouchingGoal > 600000000) {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.nScoreX < 500) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
	                        }
	                        else {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
	                        }
	                        this.drawPrompt();
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.flip();
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var8) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.playOnTicks = 10;
	                        this.fPlayOn = false;
	                        this.startTime += shims_1.System.currentTimeMillis() - var11;
	                        this.ballX = 490 + ((Math.random() * 20.0) | 0);
	                        this.ballY = 190 + ((Math.random() * 20.0) | 0);
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p1YV = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p2YV = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.repaint();
	                    }
	                    if (this.gameThread != null) {
	                        try {
	                            if (this.fPlayOn) {
	                                yield shims_1.Thread.sleep(120);
	                            }
	                            else {
	                                yield shims_1.Thread.sleep(20);
	                            }
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                    }
	                }
	                ;
	                this.fEndGame = true;
	                if (this.fPlayOn) {
	                    if (this.nScoreX < 500) {
	                        ++this.p2Score;
	                        this.promptMsg = this.slimeColText[this.p2Col] + " scores at the final whistle!";
	                    }
	                    else {
	                        ++this.p1Score;
	                        this.promptMsg = this.slimeColText[this.p1Col] + " scores at the final whistle!";
	                    }
	                    this.drawPrompt();
	                }
	                else {
	                    this.drawPrompt("And that\'s the final whistle!", 0);
	                }
	                if (this.worldCup) {
	                    if (this.p1Score === this.p2Score) {
	                        this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                        this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
	                        this.worldCup = false;
	                        this.flip();
	                    }
	                    else if (this.p1Score >= this.p2Score) {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the world cup!", 1);
	                                break;
	                            case 1:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
	                                break;
	                            case 2:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
	                                break;
	                            case 3:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " wins the WORLD CUP!!!!!", 1);
	                        }
	                        if (this.worldCupRound === 3) {
	                            this.worldCup = false;
	                            this.promptBox("You win the world cup!!!", "Congratulations!");
	                        }
	                        else {
	                            ++this.worldCupRound;
	                        }
	                    }
	                    else {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                            case 1:
	                                this.promptBox("You have been eliminated.", "Goodbye.");
	                                break;
	                            case 2:
	                                this.promptBox("You have been knocked out of the semifinals.", "You played well.");
	                                break;
	                            case 3:
	                                this.promptBox("You came second.", "Are you satisfied with that?");
	                        }
	                        this.worldCup = false;
	                    }
	                }
	                else if (this.p1Score === this.p2Score) {
	                    this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                }
	                else if (this.p1Score < this.p2Score) {
	                    this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1);
	                }
	                else {
	                    this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
	                }
	                this.flip();
	                try {
	                    yield shims_1.Thread.sleep(5000);
	                }
	                catch (var6) {
	                }
	                ;
	                this.initStuff();
	            } while ((this.worldCup));
	            this.fCanChangeCol = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.initStuff();
	        this.promptMsg = "Click on an option to play...";
	        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    toggleBuffering() {
	        if (this.doubleBuffered = !this.doubleBuffered) {
	            this.screen = this.backBuffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        else {
	            this.screen = this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        this.repaint();
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var fontmetrics = this.screen.getFontMetrics();
	            var i = fontmetrics.stringWidth("Replay...");
	            var j = fontmetrics.getHeight();
	            var k = (this.nWidth / 2 | 0) - (i / 2 | 0);
	            var l = (this.nHeight / 2 | 0) - j;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            var i1 = this.replayPos - 1;
	            while ((!this.mousePressed)) {
	                ++i1;
	                if (i1 >= 200) {
	                    i1 = 0;
	                }
	                if (i1 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var9) {
	                    }
	                    ;
	                    i1 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	                yield this.ReplayFrame(i1, k, l, i, j, false);
	                this.flip();
	            }
	            ;
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    flip() {
	        if (this.doubleBuffered) {
	            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
	        }
	    }
	    getBallBounceX() {
	        var t = this.ballVY + (Math.sqrt((this.ballVY * this.ballVY + 2 * this.ballY)) | 0);
	        var ballBounceX = this.ballX + t * this.ballVX;
	        if (ballBounceX < 0) {
	            ballBounceX = -ballBounceX;
	        }
	        if (ballBounceX > 1000) {
	            ballBounceX = 1000 - ballBounceX;
	        }
	        return ballBounceX;
	    }
	    getBallMaxY() {
	        return this.ballVY < 0 ? this.ballY : this.ballY + (this.ballVY * this.ballVY / 2 | 0);
	    }
	    controlP2v0() {
	        this.p2XV = 0;
	        if (this.ballX > this.p2X + 5 && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.ballX + 50 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X + 50 && this.p2YV === 0 && this.ballY > 10 && this.ballY < 150) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 600000000 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v1() {
	        this.p2XV = 0;
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        if (bounceX > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2X < 150) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2TouchingGoal > 0 && 600000000 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v2() {
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (bounceX > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && bounceX > 500 && ballMaxY > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 600000000 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v3() {
	        var SLIMEVEL = (this.SLIMEVEL * 4 / 3 | 0);
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var5 = true;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (bounceX > 900) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2XV > 0 && ballMaxY > 200 && bounceX > this.p2X + 300) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && bounceX > this.p2X + 400 && ballMaxY > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 600000000 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / SLIMEVEL | 0)) {
	            this.p2XV = -SLIMEVEL;
	        }
	    }
	    method_rn_ElasticSlime_p_1(s) {
	        shims_1.System.out.println(s);
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ElasticSlime;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class SpaceSlime extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.slimeColText = ["Argentina", "Belgium", "Australia", "Iceland", "Cameroon", "P.R. of China", "Costa Rica", "Croatia", "Denmark", "Eucador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "Seth Efrica", "South Corea", "Sveden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany", "Night Elves"];
	        this.darkRed = new shims_1.Color(128, 0, 0);
	        this.darkGreen = new shims_1.Color(0, 128, 0);
	        this.darkBlue = new shims_1.Color(0, 0, 128);
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Sticky = false;
	        this.fP2Sticky = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.p1TouchingGoal = 0;
	        this.p2TouchingGoal = 0;
	        this.fEndGame = false;
	        this.fPlayOn = false;
	        this.nScoreX = 0;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.playOnTicks = 0;
	        this.SMILE_DIFF = 0;
	        this.DAMPING = 0;
	        this.MAX_TICKS_TOUCHING_GOAL = 0;
	        this.JUMPVEL = 0;
	        this.SLIMEVEL = 0;
	        this.GRAVITY = 0;
	        this.gameLength = 0;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.floaty = 0;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fSuperSlime = false;
	        this.doubleBuffered = false;
	        this.slimaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), this.darkGreen, shims_1.Color.fromString("white"), this.darkRed, this.darkRed, new shims_1.Color(119, 41, 28), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(128, 128, 255), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(119, 41, 28), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(185, 30, 2), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(252, 239, 82), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(16, 180, 180), new shims_1.Color(241, 245, 71), new shims_1.Color(230, 230, 230), shims_1.Color.fromString("white"), shims_1.Color.fromString("black")];
	        this.secondaryCols = [shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), new shims_1.Color(128, 128, 255), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), this.darkBlue, shims_1.Color.fromString("green"), shims_1.Color.fromString("black"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), this.darkGreen, shims_1.Color.fromString("white"), new shims_1.Color(128, 255, 128), new shims_1.Color(255, 128, 0), this.darkGreen, this.darkBlue, new shims_1.Color(13, 131, 10), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), new shims_1.Color(7, 177, 33), shims_1.Color.fromString("red"), shims_1.Color.fromString("black"), shims_1.Color.fromString("black")];
	        this.frenzyCol = 0;
	        this.SMILE_DIFF = 2;
	        this.DAMPING = 7;
	        this.MAX_TICKS_TOUCHING_GOAL = 60;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.floaty = 0;
	        this.pointsX = new Array(0);
	        this.pointsY = new Array(0);
	        this.p2Col = 1;
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    initStuff() {
	        this.fEndGame = true;
	        this.p1X = 200;
	        this.p1Y = 0;
	        this.p2X = 800;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.ballOldX = this.ballX = 500;
	        this.ballOldY = this.ballY = 200;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.playOnTicks = 10;
	        this.fPlayOn = false;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.JUMPVEL = !this.fSuperSlime ? 20 : 20;
	        this.SLIMEVEL = !this.fSuperSlime ? 8 : 16;
	        this.GRAVITY = !this.fSuperSlime ? 1 : 1;
	    }
	    drawButtons() {
	        var buttons = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "World Cup"];
	        var fm = this.screen.getFontMetrics();
	        var darkBlue = new shims_1.Color(0, 0, 128);
	        for (var i = 0; i < 5; ++i) {
	            this.screen.setColor(darkBlue);
	            this.screen.fillRect(((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(buttons[i], ((2 * i + 1) * this.nWidth / 10 | 0) - (fm.stringWidth(buttons[i]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (fm.getHeight() / 2 | 0));
	        }
	        this.flip();
	    }
	    testButton(x, y) {
	        for (var i = 0; i < 5; ++i) {
	            if (x > ((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) && x < ((2 * i + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) && y > (this.nHeight * 2 / 10 | 0) && y < (this.nHeight * 3 / 10 | 0)) {
	                if (i === 4) {
	                    this.gameLength = 120000;
	                    this.worldCup = true;
	                }
	                else {
	                    this.gameLength = (1 << i) * 60000;
	                    this.worldCup = false;
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    handleEvent(event) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((event.id)) {
	                case 401:
	                case 403:
	                    if (this.fCanChangeCol) {
	                        switch ((event.key)) {
	                            case 54:
	                                this.fSuperSlime = !this.fSuperSlime;
	                                this.repaint();
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                do {
	                                    this.p2Col = this.p2Col !== 0 ? this.p2Col - 1 : this.slimaryCols.length - 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                do {
	                                    this.p2Col = this.p2Col === this.slimaryCols.length - 1 ? 0 : this.p2Col + 1;
	                                } while ((this.p2Col === this.p1Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 83:
	                            case 115:
	                                do {
	                                    this.p1Col = this.p1Col === this.slimaryCols.length - 1 ? 0 : this.p1Col + 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 87:
	                            case 119:
	                                while ((true)) {
	                                    this.p1Col = this.p1Col !== 0 ? this.p1Col - 1 : this.slimaryCols.length - 1;
	                                    if (this.p1Col !== this.p2Col) {
	                                        this.drawScores();
	                                        this.repaint();
	                                        break;
	                                    }
	                                }
	                                ;
	                        }
	                    }
	                    if (!this.fEndGame) {
	                        switch ((event.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                return false;
	                            case 65:
	                            case 97:
	                                this.p1XV = -this.SLIMEVEL;
	                                return false;
	                            case 66:
	                            case 98:
	                                this.toggleBuffering();
	                                return false;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.SLIMEVEL;
	                                return false;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (!this.worldCup) {
	                                    this.p2YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                if (!this.worldCup) {
	                                    this.p2XV = -this.SLIMEVEL;
	                                }
	                                return false;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                if (!this.worldCup) {
	                                    this.p2YV = -this.JUMPVEL;
	                                }
	                                return false;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                if (!this.worldCup) {
	                                    this.p2XV = this.SLIMEVEL;
	                                }
	                                return false;
	                            case 83:
	                            case 115:
	                                this.p1YV = -this.JUMPVEL;
	                                return false;
	                            case 87:
	                            case 119:
	                                this.p1YV = this.JUMPVEL;
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((event.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                        case 1005:
	                            this.fP2Sticky = false;
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 83:
	                        case 115:
	                            this.fP1Sticky = false;
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay && this.testButton(event.x, event.y)) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 500;
	                        this.ballY = 200;
	                        this.ballOldX = 500;
	                        this.ballOldY = 200;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1Score = 0;
	                        this.p2Score = 0;
	                        this.promptMsg = "";
	                        this.paint(this.getGraphics());
	                        try {
	                            yield shims_1.Thread.sleep(100);
	                        }
	                        catch (var4) {
	                        }
	                        ;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
	                    this.requestFocus();
	            }
	            return false;
	        });
	    }
	    DrawSlimers() {
	        var k1 = (this.nWidth / 10 | 0);
	        var j2 = (this.nHeight / 10 | 0);
	        var i3 = (this.nWidth / 50 | 0);
	        var j3 = (this.nHeight / 25 | 0);
	        var k3 = (this.ballX * this.nWidth / 1000 | 0);
	        var l3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var i = (this.p1OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        var l = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("black"));
	        this.screen.fillRect(i, l, k1, j2);
	        i = (this.p2OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("black"));
	        this.screen.fillRect(i, l, k1, j2);
	        if (!this.fEndGame) {
	            this.MoveBall();
	        }
	        i = (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p1Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 2 / 5 | 0);
	        this.pointsX[3] = i + (k1 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var l4 = this.p1X + 38;
	        var i5 = this.p1Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        var i4 = i - k3;
	        var j4 = l - l3;
	        var k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        var flag = Math.random() < 0.01;
	        if (flag) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var i2;
	        var l2;
	        var k;
	        var j1;
	        var k5;
	        if (this.p1Score > this.p2Score + 2) {
	            i2 = (this.p1X * this.nWidth / 1000 | 0);
	            l2 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            k = (this.nWidth / 20 | 0);
	            j1 = (this.nHeight / 20 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        i = (this.p2X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p2Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 3 / 5 | 0);
	        this.pointsX[3] = i + (k1 * 7 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        l4 = this.p2X - 18;
	        i5 = this.p2Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        i4 = i - k3;
	        j4 = l - l3;
	        k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        flag = Math.random() < 0.01;
	        if (flag) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(!flag ? shims_1.Color.fromString("white") : shims_1.Color.fromString("gray"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        if (this.p2Score > this.p1Score + 2) {
	            i2 = (this.nWidth / 20 | 0);
	            l2 = (this.nHeight / 20 | 0);
	            k = (this.p2X * this.nWidth / 1000 | 0) - i2;
	            j1 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	    }
	    paint(g) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.screen.setColor(shims_1.Color.fromString("black"));
	        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.drawScores();
	        if (!this.fInPlay) {
	            this.DrawSlimers();
	            this.drawButtons();
	        }
	        this.DrawGoals();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var fontmetrics = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fSuperSlime) {
	                this.screen.drawString("Super Space Slime+!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Super Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            else {
	                this.screen.drawString("Space Slime+!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            fontmetrics = this.screen.getFontMetrics();
	            this.screen.drawString("Written by Quin Pendragon", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Written by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + fontmetrics.getHeight() * 2);
	            this.screen.drawString("Space Mod added by anonymous tipster", (this.nWidth / 3 | 0) - (fontmetrics.stringWidth("Written by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + fontmetrics.getHeight() * 3);
	        }
	        this.flip();
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    ReplayFrame(i, j, k, l, i1, flag) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (flag) {
	                this.ballX = -1000;
	                this.ballOldX = 500;
	                this.ballY = -1000;
	                this.ballOldY = 500;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var j1 = i === 0 ? 199 : i - 1;
	                this.p1OldX = this.replayData[j1][0];
	                this.p1OldY = this.replayData[j1][1];
	                this.p2OldX = this.replayData[j1][2];
	                this.p2OldY = this.replayData[j1][3];
	                if (i === 0) {
	                    this.ballOldX = 500;
	                    this.ballOldY = 200;
	                }
	                else {
	                    this.ballOldX = this.replayData[j1][4];
	                    this.ballOldY = this.replayData[j1][5];
	                }
	            }
	            this.p1X = this.replayData[i][0];
	            this.p1Y = this.replayData[i][1];
	            this.p2X = this.replayData[i][2];
	            this.p2Y = this.replayData[i][3];
	            this.ballX = this.replayData[i][4];
	            this.ballY = this.replayData[i][5];
	            this.p1Col = this.replayData[i][6];
	            this.p2Col = this.replayData[i][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((i / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", j, k);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillRect(j, k - i1, l, i1 * 2);
	            }
	            this.DrawSlimers();
	            this.DrawGoals();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var9) {
	            }
	            ;
	        });
	    }
	    MakeTime(l) {
	        var l1 = Math.round(l / 10) % 100;
	        var l2 = Math.round(l / 1000) % 60;
	        var l3 = Math.round(l / 60000) % 60;
	        var s = "";
	        if (l3 < 10) {
	            s = s + "0";
	        }
	        s = s + l3;
	        s = s + ":";
	        if (l2 < 10) {
	            s = s + "0";
	        }
	        s = s + l2;
	        s = s + ":";
	        if (l1 < 10) {
	            s = s + "0";
	        }
	        s = s + l1;
	        return s;
	    }
	    MoveSlimers() {
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 0:
	                    this.controlP2v0();
	                    break;
	                case 1:
	                    this.controlP2v1();
	                    break;
	                case 2:
	                    this.controlP2v2();
	                    break;
	                case 3:
	                    this.controlP2v3();
	            }
	        }
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 950) {
	            this.p1X = 950;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.GRAVITY;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.GRAVITY;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    MoveBall() {
	        var k = (30 * this.nHeight / 1000 | 0);
	        var i = (this.ballOldX * this.nWidth / 1000 | 0);
	        var j = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("black"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var l1 = (this.ballX - this.p1X) * 2;
	            var i2 = this.ballY - this.p1Y;
	            var j2 = l1 * l1 + i2 * i2;
	            var k2 = this.ballVX - this.p1XV;
	            var l2 = this.ballVY - this.p1YV;
	            var i1;
	            var k1;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p1X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p1Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP1Sticky) {
	                        this.ballVY += this.p1YV - (2 * i2 * k1 / i1 | 0);
	                        this.ballVX += ((this.p1XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	            }
	            l1 = (this.ballX - this.p2X) * 2;
	            i2 = this.ballY - this.p2Y;
	            j2 = l1 * l1 + i2 * i2;
	            k2 = this.ballVX - this.p2XV;
	            l2 = this.ballVY - this.p2YV;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p2X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p2Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP2Sticky) {
	                        this.ballVX += ((this.p2XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                        this.ballVY += this.p2YV - (2 * i2 * k1 / i1 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX <= 50 || this.ballX >= 950) {
	                if (this.ballY > 200 && this.ballOldY < 200 || this.ballY < 200 && this.ballOldY >= 200) {
	                    this.ballY = 200;
	                    this.ballVY *= -1;
	                }
	                if (this.ballY > 180 && this.ballY < 220) {
	                    if (this.ballX > 40 && this.ballX < 50 && this.ballVX < 0) {
	                        this.ballX = 50;
	                        this.ballVX *= -1;
	                    }
	                    if (this.ballX < 960 && this.ballX > 950 && this.ballVX > 0) {
	                        this.ballX = 950;
	                        this.ballVX *= -1;
	                    }
	                }
	            }
	            if (this.ballY < 34) {
	                this.ballY = 34;
	                this.ballVY = (-this.ballVY * 7 / 10 | 0);
	                this.ballVX = (this.ballVX * 7 / 10 | 0);
	            }
	        }
	        i = (this.ballX * this.nWidth / 1000 | 0);
	        j = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("yellow"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	    }
	    DrawGoals() {
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect((this.nWidth / 20 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 20 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        this.screen.fillRect((this.nWidth * 9 / 10 | 0), (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        var p1TickX;
	        for (p1TickX = 0; p1TickX < (this.nWidth / 20 | 0); p1TickX += 5) {
	            this.screen.drawLine(p1TickX, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), p1TickX, (4 * this.nHeight / 5 | 0));
	            this.screen.drawLine(this.nWidth - p1TickX, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), this.nWidth - p1TickX, (4 * this.nHeight / 5 | 0));
	        }
	        for (p1TickX = (4 * this.nHeight / 5 | 0) - (this.nHeight / 5 | 0); p1TickX < (4 * this.nHeight / 5 | 0); p1TickX += 5) {
	            this.screen.drawLine(0, p1TickX, (this.nWidth / 20 | 0), p1TickX);
	            this.screen.drawLine(this.nWidth, p1TickX, this.nWidth - (this.nWidth / 20 | 0), p1TickX);
	        }
	        p1TickX = ((60 - this.p1TouchingGoal) * this.nWidth / 120 | 0);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.screen.fillRect(0, this.nHeight - 5, p1TickX, 5);
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(p1TickX, this.nHeight - 5, (this.nWidth / 2 | 0) - p1TickX, 5);
	        var p2TickX = this.nWidth - ((60 - this.p2TouchingGoal) * this.nWidth / 120 | 0);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.screen.fillRect(p2TickX, this.nHeight - 5, this.nWidth, 5);
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect((this.nWidth / 2 | 0), this.nHeight - 5, p2TickX - (this.nWidth / 2 | 0), 5);
	    }
	    DrawStatus() {
	        var g = this.screen;
	        var fontmetrics = this.screen.getFontMetrics();
	        var s = null;
	        var time = this.MakeTime(this.gameTime);
	        var i = (this.nHeight / 20 | 0);
	        var k = 0;
	        var kt = fontmetrics.stringWidth(time);
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 1:
	                    s = "Quarter Finals";
	                    break;
	                case 2:
	                    s = "Semi-Finals";
	                    break;
	                case 3:
	                    s = "Final";
	                    break;
	                default:
	                    s = "Qualifying";
	            }
	            if (this.fGoldenGoal) {
	                s = s + " [Golden Goal]";
	            }
	            else if (this.fExtraTime) {
	                s = s + " [Extra Time]";
	            }
	            k = fontmetrics.stringWidth(s);
	        }
	        var mw = k <= kt ? kt : k;
	        g.setColor(shims_1.Color.fromString("black"));
	        g.fillRect((this.nWidth / 2 | 0) - (mw / 2 | 0) - 5, 0, mw + 10, i + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(time, (this.nWidth / 2 | 0) - (kt / 2 | 0), fontmetrics.getAscent() + 20);
	        if (s != null) {
	            this.screen.drawString(s, (this.nWidth / 2 | 0) - (k / 2 | 0), fontmetrics.getAscent() + 20 - fontmetrics.getHeight());
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(s, i) {
	        if (((typeof s === 'string') || s === null) && ((typeof i === 'number') || i === null)) {
	            return (() => {
	                var fontmetrics = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fontmetrics.getHeight() * (i + 1) + 10);
	            })();
	        }
	        else if (s === undefined && i === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    promptBox(msg1, msg2) {
	        var fontmetrics = this.screen.getFontMetrics();
	        var len1 = fontmetrics.stringWidth(msg1);
	        var len2 = fontmetrics.stringWidth(msg2);
	        var maxlen = len1 <= len2 ? len2 : len1;
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect((this.nWidth / 2 | 0) - (maxlen / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), maxlen + 40, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(msg1, (this.nWidth / 2 | 0) - (len1 / 2 | 0), (this.nHeight * 9 / 20 | 0));
	        this.screen.drawString(msg2, (this.nWidth / 2 | 0) - (len2 / 2 | 0), (this.nHeight * 11 / 20 | 0));
	        this.flip();
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    drawScores() {
	        var g = this.screen;
	        var k = (this.nHeight / 20 | 0);
	        var fm = this.screen.getFontMetrics();
	        var i = fm.stringWidth("Replay...");
	        g.setColor(shims_1.Color.fromString("black"));
	        g.fillRect(0, 0, this.nWidth, k + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        g.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, (this.nWidth / 20 | 0), k);
	        var p2ScrStr = this.p2Score + " : " + this.slimeColText[this.p2Col];
	        g.drawString(p2ScrStr, this.nWidth - (this.nWidth / 20 | 0) - fm.stringWidth(p2ScrStr), k);
	    }
	    checkScored() {
	        if (this.floaty < -200) {
	        }
	        this.floaty += 100;
	        if (this.floaty > 200) {
	        }
	        this.floaty -= 100;
	        this.p1YV += this.floaty;
	        this.p2YV += this.floaty;
	        if (this.ballY >= 200 || this.ballX >= 40 && this.ballX <= 960) {
	            return false;
	        }
	        else {
	            this.nScoreX = this.ballX;
	            this.fPlayOn = true;
	            this.playOnTicks = 10;
	            return true;
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.worldCupRound = 0;
	            do {
	                this.initStuff();
	                this.replayPos = this.replayStart = 0;
	                this.scoringRun = 0;
	                this.fP1Touched = this.fP2Touched = false;
	                this.gameTime = 0;
	                this.startTime = shims_1.System.currentTimeMillis();
	                this.fEndGame = false;
	                this.fCanChangeCol = false;
	                this.mousePressed = false;
	                this.gameTime = Math.round(this.gameLength);
	                this.fInPlay = true;
	                this.fEndGame = false;
	                var l;
	                if (this.worldCup) {
	                    this.paint(this.getGraphics());
	                    do {
	                        this.p2Col = ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);
	                    } while ((this.p1Col === this.p2Col));
	                    l = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
	                    switch ((this.worldCupRound)) {
	                        case 0:
	                            this.promptBox("Qualifying Round", l);
	                            this.gameLength = 30000;
	                            break;
	                        case 1:
	                            this.promptBox("Quarter Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 2:
	                            this.promptBox("Semi-Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 3:
	                            this.promptBox("World Cup Final", l);
	                            this.gameLength = 300000;
	                    }
	                    try {
	                        yield shims_1.Thread.sleep(4000);
	                    }
	                    catch (var5) {
	                    }
	                    ;
	                    this.repaint();
	                    this.flip();
	                }
	                while ((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1Score === this.p2Score)) {
	                    this.gameTime = this.startTime + Math.round(this.gameLength) - shims_1.System.currentTimeMillis();
	                    if (this.gameTime < 0) {
	                        this.gameTime = 0;
	                    }
	                    if (this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1Score === this.p2Score) {
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ".", "And the game goes into extra time...");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var10) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                        this.startTime += 30000;
	                        this.gameTime += 30000;
	                        this.fExtraTime = true;
	                    }
	                    else if (this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1Score === this.p2Score) {
	                        this.fGoldenGoal = true;
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ", and the game goes into Golden Goal.", "The next player to score will win the match!");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var9) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                    }
	                    this.SaveReplayData();
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    this.DrawGoals();
	                    this.DrawStatus();
	                    this.flip();
	                    if (this.p1X < 150) {
	                        ++this.p1TouchingGoal;
	                    }
	                    else {
	                        this.p1TouchingGoal = 0;
	                    }
	                    if (this.p2X > 850) {
	                        ++this.p2TouchingGoal;
	                    }
	                    else {
	                        this.p2TouchingGoal = 0;
	                    }
	                    if (this.fPlayOn) {
	                        --this.playOnTicks;
	                    }
	                    else {
	                        this.fPlayOn = this.checkScored();
	                    }
	                    if (this.playOnTicks === 0 || this.p1TouchingGoal > 60 || this.p2TouchingGoal > 60) {
	                        var var11 = shims_1.System.currentTimeMillis();
	                        if (this.p1TouchingGoal > 60) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.p2TouchingGoal > 60) {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.nScoreX < 500) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
	                        }
	                        else {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
	                        }
	                        this.drawPrompt();
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.flip();
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var8) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.playOnTicks = 10;
	                        this.fPlayOn = false;
	                        this.startTime += shims_1.System.currentTimeMillis() - var11;
	                        this.ballX = 490 + ((Math.random() * 20.0) | 0);
	                        this.ballY = 190 + ((Math.random() * 20.0) | 0);
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p1YV = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p2YV = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.repaint();
	                    }
	                    if (this.gameThread != null) {
	                        try {
	                            if (this.fPlayOn) {
	                                yield shims_1.Thread.sleep(120);
	                            }
	                            else {
	                                yield shims_1.Thread.sleep(20);
	                            }
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                    }
	                }
	                ;
	                this.fEndGame = true;
	                if (this.fPlayOn) {
	                    if (this.nScoreX < 500) {
	                        ++this.p2Score;
	                        this.promptMsg = this.slimeColText[this.p2Col] + " scores at the final whistle!";
	                    }
	                    else {
	                        ++this.p1Score;
	                        this.promptMsg = this.slimeColText[this.p1Col] + " scores at the final whistle!";
	                    }
	                    this.drawPrompt();
	                }
	                else {
	                    this.drawPrompt("And that\'s the final whistle!", 0);
	                }
	                if (this.worldCup) {
	                    if (this.p1Score === this.p2Score) {
	                        this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                        this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
	                        this.worldCup = false;
	                        this.flip();
	                    }
	                    else if (this.p1Score >= this.p2Score) {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the world cup!", 1);
	                                break;
	                            case 1:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
	                                break;
	                            case 2:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
	                                break;
	                            case 3:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " wins the WORLD CUP!!!!!", 1);
	                        }
	                        if (this.worldCupRound === 3) {
	                            this.worldCup = false;
	                            this.promptBox("You win the world cup!!!", "Congratulations!");
	                        }
	                        else {
	                            ++this.worldCupRound;
	                        }
	                    }
	                    else {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                            case 1:
	                                this.promptBox("You have been eliminated.", "Goodbye.");
	                                break;
	                            case 2:
	                                this.promptBox("You have been knocked out of the semifinals.", "You played well.");
	                                break;
	                            case 3:
	                                this.promptBox("You came second.", "Are you satisfied with that?");
	                        }
	                        this.worldCup = false;
	                    }
	                }
	                else if (this.p1Score === this.p2Score) {
	                    this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                }
	                else if (this.p1Score < this.p2Score) {
	                    this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1);
	                }
	                else {
	                    this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
	                }
	                this.flip();
	                try {
	                    yield shims_1.Thread.sleep(5000);
	                }
	                catch (var6) {
	                }
	                ;
	                this.initStuff();
	            } while ((this.worldCup));
	            this.fCanChangeCol = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.initStuff();
	        this.promptMsg = "Click on an option to play...";
	        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    toggleBuffering() {
	        if (this.doubleBuffered = !this.doubleBuffered) {
	            this.screen = this.backBuffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        else {
	            this.screen = this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        this.repaint();
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var fontmetrics = this.screen.getFontMetrics();
	            var i = fontmetrics.stringWidth("Replay...");
	            var j = fontmetrics.getHeight();
	            var k = (this.nWidth / 2 | 0) - (i / 2 | 0);
	            var l = (this.nHeight / 2 | 0) - j;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            var i1 = this.replayPos - 1;
	            while ((!this.mousePressed)) {
	                ++i1;
	                if (i1 >= 200) {
	                    i1 = 0;
	                }
	                if (i1 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var9) {
	                    }
	                    ;
	                    i1 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	                yield this.ReplayFrame(i1, k, l, i, j, false);
	                this.flip();
	            }
	            ;
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    flip() {
	        if (this.doubleBuffered) {
	            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
	        }
	    }
	    getBallBounceX() {
	        var t = this.ballVY + (Math.sqrt((this.ballVY * this.ballVY + 2 * this.ballY)) | 0);
	        var ballBounceX = this.ballX + t * this.ballVX;
	        if (ballBounceX < 0) {
	            ballBounceX = -ballBounceX;
	        }
	        if (ballBounceX > 1000) {
	            ballBounceX = 1000 - ballBounceX;
	        }
	        return ballBounceX;
	    }
	    getBallMaxY() {
	        return this.ballVY < 0 ? this.ballY : this.ballY + (this.ballVY * this.ballVY / 2 | 0);
	    }
	    controlP2v0() {
	        this.p2XV = 0;
	        if (this.ballX > this.p2X + 5 && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.ballX + 50 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X + 50 && this.p2YV === 0 && this.ballY > 10 && this.ballY < 150) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v1() {
	        this.p2XV = 0;
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        if (bounceX > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2X < 150) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v2() {
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (bounceX > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && bounceX > 500 && ballMaxY > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v3() {
	        var SLIMEVEL = (this.SLIMEVEL * 4 / 3 | 0);
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var5 = true;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (bounceX > 900) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2XV > 0 && ballMaxY > 200 && bounceX > this.p2X + 300) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && bounceX > this.p2X + 400 && ballMaxY > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / SLIMEVEL | 0)) {
	            this.p2XV = -SLIMEVEL;
	        }
	    }
	    method_rn_SpaceSlime_p_1(s) {
	        shims_1.System.out.println(s);
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SpaceSlime;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class ThreePSLime extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.slimeColText = ["Argentina", "Belgium", "Australia", "Iceland", "Cameroon", "P.R. of China", "Costa Rica", "Croatia", "Denmark", "Eucador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "Seth Efrica", "South Corea", "Sveden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany", "Night Elves"];
	        this.darkRed = new shims_1.Color(128, 0, 0);
	        this.darkGreen = new shims_1.Color(0, 128, 0);
	        this.darkBlue = new shims_1.Color(0, 0, 128);
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p3X = 0;
	        this.p3Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p3OldX = 0;
	        this.p3OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.p3XV = 0;
	        this.p3YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.p3Blink = 0;
	        this.fP1Sticky = false;
	        this.fP2Sticky = false;
	        this.fP3Sticky = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.fP3Touched = false;
	        this.p1TouchingGoal = 0;
	        this.p2TouchingGoal = 0;
	        this.p3TouchingGoal = 0;
	        this.fEndGame = false;
	        this.fPlayOn = false;
	        this.nScoreX = 0;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.playOnTicks = 0;
	        this.SMILE_DIFF = 0;
	        this.DAMPING = 0;
	        this.MAX_TICKS_TOUCHING_GOAL = 0;
	        this.JUMPVEL = 0;
	        this.SLIMEVEL = 0;
	        this.GRAVITY = 0;
	        this.gameLength = 0;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fSuperSlime = false;
	        this.doubleBuffered = false;
	        this.slimaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), this.darkGreen, shims_1.Color.fromString("white"), this.darkRed, this.darkRed, new shims_1.Color(119, 41, 28), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(128, 128, 255), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(119, 41, 28), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(185, 30, 2), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(252, 239, 82), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(16, 180, 180), new shims_1.Color(241, 245, 71), new shims_1.Color(230, 230, 230), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue")];
	        this.secondaryCols = [shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), new shims_1.Color(128, 128, 255), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), this.darkBlue, shims_1.Color.fromString("green"), shims_1.Color.fromString("blue"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), this.darkGreen, shims_1.Color.fromString("white"), new shims_1.Color(128, 255, 128), new shims_1.Color(255, 128, 0), this.darkGreen, this.darkBlue, new shims_1.Color(13, 131, 10), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), new shims_1.Color(7, 177, 33), shims_1.Color.fromString("red"), shims_1.Color.fromString("black"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("blue")];
	        this.frenzyCol = 0;
	        this.SMILE_DIFF = 2;
	        this.DAMPING = 7;
	        this.MAX_TICKS_TOUCHING_GOAL = 60;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.pointsX = new Array(0);
	        this.pointsY = new Array(0);
	        this.p2Col = 1;
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    initStuff() {
	        this.fEndGame = true;
	        this.p1X = 200;
	        this.p1Y = 0;
	        this.p2X = 800;
	        this.p2Y = 0;
	        this.p3X = 700;
	        this.p3Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p3XV = 0;
	        this.p3YV = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.ballOldX = this.ballX = 500;
	        this.ballOldY = this.ballY = 200;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = this.fP3Touched = false;
	        this.playOnTicks = 10;
	        this.fPlayOn = false;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.JUMPVEL = !this.fSuperSlime ? 31 : 65;
	        this.SLIMEVEL = !this.fSuperSlime ? 8 : 16;
	        this.GRAVITY = !this.fSuperSlime ? 2 : 8;
	    }
	    drawButtons() {
	        var buttons = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "World Cup"];
	        var fm = this.screen.getFontMetrics();
	        var darkBlue = new shims_1.Color(0, 0, 128);
	        for (var i = 0; i < 5; ++i) {
	            this.screen.setColor(darkBlue);
	            this.screen.fillRect(((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(buttons[i], ((2 * i + 1) * this.nWidth / 10 | 0) - (fm.stringWidth(buttons[i]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (fm.getHeight() / 2 | 0));
	        }
	        this.flip();
	    }
	    testButton(x, y) {
	        for (var i = 0; i < 5; ++i) {
	            if (x > ((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) && x < ((2 * i + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) && y > (this.nHeight * 2 / 10 | 0) && y < (this.nHeight * 3 / 10 | 0)) {
	                if (i === 4) {
	                    this.gameLength = 120000;
	                    this.worldCup = true;
	                }
	                else {
	                    this.gameLength = (1 << i) * 60000;
	                    this.worldCup = false;
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    handleEvent(event) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((event.id)) {
	                case 401:
	                case 403:
	                    if (this.fCanChangeCol) {
	                        switch ((event.key)) {
	                            case 54:
	                                this.fSuperSlime = !this.fSuperSlime;
	                                this.repaint();
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                do {
	                                    this.p2Col = this.p2Col !== 0 ? this.p2Col - 1 : this.slimaryCols.length - 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                do {
	                                    this.p2Col = this.p2Col === this.slimaryCols.length - 1 ? 0 : this.p2Col + 1;
	                                } while ((this.p2Col === this.p1Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 83:
	                            case 115:
	                                do {
	                                    this.p1Col = this.p1Col === this.slimaryCols.length - 1 ? 0 : this.p1Col + 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 87:
	                            case 119:
	                                while ((true)) {
	                                    this.p1Col = this.p1Col !== 0 ? this.p1Col - 1 : this.slimaryCols.length - 1;
	                                    if (this.p1Col !== this.p2Col) {
	                                        this.drawScores();
	                                        this.repaint();
	                                        break;
	                                    }
	                                }
	                                ;
	                        }
	                    }
	                    if (!this.fEndGame) {
	                        switch ((event.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                return false;
	                            case 65:
	                            case 97:
	                                this.p1XV = -this.SLIMEVEL;
	                                return false;
	                            case 66:
	                            case 98:
	                                this.toggleBuffering();
	                                return false;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.SLIMEVEL;
	                                return false;
	                            case 73:
	                            case 105:
	                                if (this.p2Y === 0 && !this.worldCup) {
	                                    this.p2YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 74:
	                            case 106:
	                                if (!this.worldCup) {
	                                    this.p2XV = -this.SLIMEVEL;
	                                }
	                                return false;
	                            case 75:
	                            case 107:
	                                if (!this.worldCup) {
	                                    this.fP2Sticky = true;
	                                }
	                                return false;
	                            case 76:
	                            case 108:
	                                if (!this.worldCup) {
	                                    this.p2XV = this.SLIMEVEL;
	                                }
	                                return false;
	                            case 83:
	                            case 115:
	                                this.fP1Sticky = true;
	                                return false;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 1004:
	                                if (this.p3Y === 0 && !this.worldCup) {
	                                    this.p3YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 1005:
	                                if (!this.worldCup) {
	                                    this.fP3Sticky = true;
	                                }
	                                return false;
	                            case 1006:
	                                if (!this.worldCup) {
	                                    this.p3XV = -this.SLIMEVEL;
	                                }
	                                return false;
	                            case 1007:
	                                if (!this.worldCup) {
	                                    this.p3XV = this.SLIMEVEL;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((event.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                            if (this.p2XV < 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                            this.fP2Sticky = false;
	                            return false;
	                        case 76:
	                        case 108:
	                            if (this.p2XV > 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 83:
	                        case 115:
	                            this.fP1Sticky = false;
	                            return false;
	                        case 1005:
	                            this.fP3Sticky = false;
	                            return false;
	                        case 1006:
	                            if (this.p3XV < 0 && !this.worldCup) {
	                                this.p3XV = 0;
	                            }
	                            return false;
	                        case 1007:
	                            if (this.p3XV > 0 && !this.worldCup) {
	                                this.p3XV = 0;
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay && this.testButton(event.x, event.y)) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 500;
	                        this.ballY = 200;
	                        this.ballOldX = 500;
	                        this.ballOldY = 200;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1Score = 0;
	                        this.p2Score = 0;
	                        this.promptMsg = "";
	                        this.paint(this.getGraphics());
	                        try {
	                            yield shims_1.Thread.sleep(100);
	                        }
	                        catch (var4) {
	                        }
	                        ;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
	                    this.requestFocus();
	            }
	            return false;
	        });
	    }
	    DrawSlimers() {
	        var k1 = (this.nWidth / 10 | 0);
	        var j2 = (this.nHeight / 10 | 0);
	        var i3 = (this.nWidth / 50 | 0);
	        var j3 = (this.nHeight / 25 | 0);
	        var k3 = (this.ballX * this.nWidth / 1000 | 0);
	        var l3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var i = (this.p1OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        var l = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        i = (this.p2OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        i = (this.p3OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p3OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        if (!this.fEndGame) {
	            this.MoveBall();
	        }
	        i = (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p1Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 2 / 5 | 0);
	        this.pointsX[3] = i + (k1 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var l4 = this.p1X + 38;
	        var i5 = this.p1Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        var i4 = i - k3;
	        var j4 = l - l3;
	        var k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        var flag = Math.random() < 0.01;
	        if (flag) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var i2;
	        var l2;
	        var k;
	        var j1;
	        var k5;
	        if (this.p1Score > this.p2Score + 2) {
	            i2 = (this.p1X * this.nWidth / 1000 | 0);
	            l2 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            k = (this.nWidth / 20 | 0);
	            j1 = (this.nHeight / 20 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        i = (this.p2X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p2Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 3 / 5 | 0);
	        this.pointsX[3] = i + (k1 * 7 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        l4 = this.p2X - 18;
	        i5 = this.p2Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        i4 = i - k3;
	        j4 = l - l3;
	        k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        flag = Math.random() < 0.01;
	        if (flag) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(!flag ? shims_1.Color.fromString("white") : shims_1.Color.fromString("gray"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        if (this.p2Score > this.p1Score + 2) {
	            i2 = (this.nWidth / 20 | 0);
	            l2 = (this.nHeight / 20 | 0);
	            k = (this.p2X * this.nWidth / 1000 | 0) - i2;
	            j1 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        i = (this.p3X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p3Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p2Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p2Col + 1]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 3 / 5 | 0);
	        this.pointsX[3] = i + (k1 * 7 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        l4 = this.p3X - 18;
	        i5 = this.p3Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        i4 = i - k3;
	        j4 = l - l3;
	        k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        flag = Math.random() < 0.01;
	        if (flag) {
	            this.p3Blink = 5;
	        }
	        if (this.p3Blink === 0) {
	            this.screen.setColor(!flag ? shims_1.Color.fromString("white") : shims_1.Color.fromString("gray"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p3Blink;
	        }
	        if (this.p2Score > this.p1Score + 2) {
	            i2 = (this.nWidth / 20 | 0);
	            l2 = (this.nHeight / 20 | 0);
	            k = (this.p3X * this.nWidth / 1000 | 0) - i2;
	            j1 = (7 * this.nHeight / 10 | 0) - ((this.p3Y - 40) * this.nHeight / 1000 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	    }
	    paint(g) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.drawScores();
	        if (!this.fInPlay) {
	            this.DrawSlimers();
	            this.drawButtons();
	        }
	        this.DrawGoals();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var fontmetrics = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fSuperSlime) {
	                this.screen.drawString("Super 3P Soccer Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Super Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            else {
	                this.screen.drawString("3P Soccer Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            fontmetrics = this.screen.getFontMetrics();
	            this.screen.drawString("Written by Quin Pendragon + Anonymous Tipster", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Written by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + fontmetrics.getHeight() * 2);
	        }
	        this.flip();
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    ReplayFrame(i, j, k, l, i1, flag) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (flag) {
	                this.ballX = -1000;
	                this.ballOldX = 500;
	                this.ballY = -1000;
	                this.ballOldY = 500;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = this.p3OldX = this.p3OldY = -10000;
	            }
	            else {
	                var j1 = i === 0 ? 199 : i - 1;
	                this.p1OldX = this.replayData[j1][0];
	                this.p1OldY = this.replayData[j1][1];
	                this.p2OldX = this.replayData[j1][2];
	                this.p2OldY = this.replayData[j1][3];
	                this.p3OldX = this.replayData[j1][4];
	                this.p3OldY = this.replayData[j1][5];
	                if (i === 0) {
	                    this.ballOldX = 500;
	                    this.ballOldY = 200;
	                }
	                else {
	                    this.ballOldX = this.replayData[j1][4];
	                    this.ballOldY = this.replayData[j1][5];
	                }
	            }
	            this.p1X = this.replayData[i][0];
	            this.p1Y = this.replayData[i][1];
	            this.p2X = this.replayData[i][2];
	            this.p2Y = this.replayData[i][3];
	            this.p3X = this.replayData[i][4];
	            this.p3Y = this.replayData[i][5];
	            this.ballX = this.replayData[i][4];
	            this.ballY = this.replayData[i][5];
	            this.p1Col = this.replayData[i][6];
	            this.p2Col = this.replayData[i][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((i / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", j, k);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(j, k - i1, l, i1 * 2);
	            }
	            this.DrawSlimers();
	            this.DrawGoals();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var9) {
	            }
	            ;
	        });
	    }
	    MakeTime(l) {
	        var l1 = Math.round(l / 10) % 100;
	        var l2 = Math.round(l / 1000) % 60;
	        var l3 = Math.round(l / 60000) % 60;
	        var s = "";
	        if (l3 < 10) {
	            s = s + "0";
	        }
	        s = s + l3;
	        s = s + ":";
	        if (l2 < 10) {
	            s = s + "0";
	        }
	        s = s + l2;
	        s = s + ":";
	        if (l1 < 10) {
	            s = s + "0";
	        }
	        s = s + l1;
	        return s;
	    }
	    MoveSlimers() {
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 0:
	                    this.controlP2v0();
	                    break;
	                case 1:
	                    this.controlP2v1();
	                    break;
	                case 2:
	                    this.controlP2v2();
	                    break;
	                case 3:
	                    this.controlP2v3();
	            }
	        }
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 950) {
	            this.p1X = 950;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.GRAVITY;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.GRAVITY;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	        this.p3X += this.p3XV;
	        if (this.p3X > 950) {
	            this.p3X = 950;
	        }
	        if (this.p3X < 50) {
	            this.p3X = 50;
	        }
	        if (this.p3YV !== 0) {
	            this.p3Y += this.p3YV -= this.GRAVITY;
	            if (this.p3Y < 0) {
	                this.p3Y = 0;
	                this.p3YV = 0;
	            }
	        }
	    }
	    MoveBall() {
	        var k = (30 * this.nHeight / 1000 | 0);
	        var i = (this.ballOldX * this.nWidth / 1000 | 0);
	        var j = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var l1 = (this.ballX - this.p1X) * 2;
	            var i2 = this.ballY - this.p1Y;
	            var j2 = l1 * l1 + i2 * i2;
	            var k2 = this.ballVX - this.p1XV;
	            var l2 = this.ballVY - this.p1YV;
	            var i1;
	            var k1;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p1X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p1Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP1Sticky) {
	                        this.ballVY += this.p1YV - (2 * i2 * k1 / i1 | 0);
	                        this.ballVX += ((this.p1XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	            }
	            l1 = (this.ballX - this.p2X) * 2;
	            i2 = this.ballY - this.p2Y;
	            j2 = l1 * l1 + i2 * i2;
	            k2 = this.ballVX - this.p2XV;
	            l2 = this.ballVY - this.p2YV;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p2X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p2Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP2Sticky) {
	                        this.ballVX += ((this.p2XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                        this.ballVY += this.p2YV - (2 * i2 * k1 / i1 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	            }
	            l1 = (this.ballX - this.p3X) * 2;
	            i2 = this.ballY - this.p3Y;
	            j2 = l1 * l1 + i2 * i2;
	            k2 = this.ballVX - this.p3XV;
	            l2 = this.ballVY - this.p3YV;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p3X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p3Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP3Sticky) {
	                        this.ballVX += ((this.p3XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                        this.ballVY += this.p3YV - (2 * i2 * k1 / i1 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP3Touched = true;
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX <= 50 || this.ballX >= 950) {
	                if (this.ballY > 200 && this.ballOldY < 200 || this.ballY < 200 && this.ballOldY >= 200) {
	                    this.ballY = 200;
	                    this.ballVY *= -1;
	                }
	                if (this.ballY > 180 && this.ballY < 220) {
	                    if (this.ballX > 40 && this.ballX < 50 && this.ballVX < 0) {
	                        this.ballX = 50;
	                        this.ballVX *= -1;
	                    }
	                    if (this.ballX < 960 && this.ballX > 950 && this.ballVX > 0) {
	                        this.ballX = 950;
	                        this.ballVX *= -1;
	                    }
	                }
	            }
	            if (this.ballY < 34) {
	                this.ballY = 34;
	                this.ballVY = (-this.ballVY * 7 / 10 | 0);
	                this.ballVX = (this.ballVX * 7 / 10 | 0);
	            }
	        }
	        i = (this.ballX * this.nWidth / 1000 | 0);
	        j = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("yellow"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	    }
	    DrawGoals() {
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect((this.nWidth / 20 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 20 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        this.screen.fillRect((this.nWidth * 9 / 10 | 0), (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        var p1TickX;
	        for (p1TickX = 0; p1TickX < (this.nWidth / 20 | 0); p1TickX += 5) {
	            this.screen.drawLine(p1TickX, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), p1TickX, (4 * this.nHeight / 5 | 0));
	            this.screen.drawLine(this.nWidth - p1TickX, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), this.nWidth - p1TickX, (4 * this.nHeight / 5 | 0));
	        }
	        for (p1TickX = (4 * this.nHeight / 5 | 0) - (this.nHeight / 5 | 0); p1TickX < (4 * this.nHeight / 5 | 0); p1TickX += 5) {
	            this.screen.drawLine(0, p1TickX, (this.nWidth / 20 | 0), p1TickX);
	            this.screen.drawLine(this.nWidth, p1TickX, this.nWidth - (this.nWidth / 20 | 0), p1TickX);
	        }
	        p1TickX = ((60 - this.p1TouchingGoal) * this.nWidth / 120 | 0);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.screen.fillRect(0, this.nHeight - 5, p1TickX, 5);
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(p1TickX, this.nHeight - 5, (this.nWidth / 2 | 0) - p1TickX, 5);
	        var p2TickX = this.nWidth - ((60 - this.p2TouchingGoal) * this.nWidth / 120 | 0);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.screen.fillRect(p2TickX, this.nHeight - 5, this.nWidth, 5);
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect((this.nWidth / 2 | 0), this.nHeight - 5, p2TickX - (this.nWidth / 2 | 0), 5);
	    }
	    DrawStatus() {
	        var g = this.screen;
	        var fontmetrics = this.screen.getFontMetrics();
	        var s = null;
	        var time = this.MakeTime(this.gameTime);
	        var i = (this.nHeight / 20 | 0);
	        var k = 0;
	        var kt = fontmetrics.stringWidth(time);
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 1:
	                    s = "Quarter Finals";
	                    break;
	                case 2:
	                    s = "Semi-Finals";
	                    break;
	                case 3:
	                    s = "Final";
	                    break;
	                default:
	                    s = "Qualifying";
	            }
	            if (this.fGoldenGoal) {
	                s = s + " [Golden Goal]";
	            }
	            else if (this.fExtraTime) {
	                s = s + " [Extra Time]";
	            }
	            k = fontmetrics.stringWidth(s);
	        }
	        var mw = k <= kt ? kt : k;
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect((this.nWidth / 2 | 0) - (mw / 2 | 0) - 5, 0, mw + 10, i + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(time, (this.nWidth / 2 | 0) - (kt / 2 | 0), fontmetrics.getAscent() + 20);
	        if (s != null) {
	            this.screen.drawString(s, (this.nWidth / 2 | 0) - (k / 2 | 0), fontmetrics.getAscent() + 20 - fontmetrics.getHeight());
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(s, i) {
	        if (((typeof s === 'string') || s === null) && ((typeof i === 'number') || i === null)) {
	            return (() => {
	                var fontmetrics = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fontmetrics.getHeight() * (i + 1) + 10);
	            })();
	        }
	        else if (s === undefined && i === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    promptBox(msg1, msg2) {
	        var fontmetrics = this.screen.getFontMetrics();
	        var len1 = fontmetrics.stringWidth(msg1);
	        var len2 = fontmetrics.stringWidth(msg2);
	        var maxlen = len1 <= len2 ? len2 : len1;
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect((this.nWidth / 2 | 0) - (maxlen / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), maxlen + 40, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(msg1, (this.nWidth / 2 | 0) - (len1 / 2 | 0), (this.nHeight * 9 / 20 | 0));
	        this.screen.drawString(msg2, (this.nWidth / 2 | 0) - (len2 / 2 | 0), (this.nHeight * 11 / 20 | 0));
	        this.flip();
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    drawScores() {
	        var g = this.screen;
	        var k = (this.nHeight / 20 | 0);
	        var fm = this.screen.getFontMetrics();
	        var i = fm.stringWidth("Replay...");
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect(0, 0, this.nWidth, k + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        g.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, (this.nWidth / 20 | 0), k);
	        var p2ScrStr = this.p2Score + " : " + this.slimeColText[this.p2Col];
	        g.drawString(p2ScrStr, this.nWidth - (this.nWidth / 20 | 0) - fm.stringWidth(p2ScrStr), k);
	    }
	    checkScored() {
	        if (this.ballY >= 200 || this.ballX >= 40 && this.ballX <= 960) {
	            return false;
	        }
	        else {
	            this.nScoreX = this.ballX;
	            this.fPlayOn = true;
	            this.playOnTicks = 10;
	            return true;
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.worldCupRound = 0;
	            do {
	                this.initStuff();
	                this.replayPos = this.replayStart = 0;
	                this.scoringRun = 0;
	                this.fP1Touched = this.fP2Touched = this.fP3Touched = false;
	                this.gameTime = 0;
	                this.startTime = shims_1.System.currentTimeMillis();
	                this.fEndGame = false;
	                this.fCanChangeCol = false;
	                this.mousePressed = false;
	                this.gameTime = Math.round(this.gameLength);
	                this.fInPlay = true;
	                this.fEndGame = false;
	                var l;
	                if (this.worldCup) {
	                    this.paint(this.getGraphics());
	                    do {
	                        this.p2Col = ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);
	                    } while ((this.p1Col === this.p2Col));
	                    l = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
	                    switch ((this.worldCupRound)) {
	                        case 0:
	                            this.promptBox("Qualifying Round", l);
	                            this.gameLength = 30000;
	                            break;
	                        case 1:
	                            this.promptBox("Quarter Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 2:
	                            this.promptBox("Semi-Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 3:
	                            this.promptBox("World Cup Final", l);
	                            this.gameLength = 300000;
	                    }
	                    try {
	                        yield shims_1.Thread.sleep(4000);
	                    }
	                    catch (var5) {
	                    }
	                    ;
	                    this.repaint();
	                    this.flip();
	                }
	                while ((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1Score === this.p2Score)) {
	                    this.gameTime = this.startTime + Math.round(this.gameLength) - shims_1.System.currentTimeMillis();
	                    if (this.gameTime < 0) {
	                        this.gameTime = 0;
	                    }
	                    if (this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1Score === this.p2Score) {
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ".", "And the game goes into extra time...");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var10) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                        this.startTime += 30000;
	                        this.gameTime += 30000;
	                        this.fExtraTime = true;
	                    }
	                    else if (this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1Score === this.p2Score) {
	                        this.fGoldenGoal = true;
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ", and the game goes into Golden Goal.", "The next player to score will win the match!");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var9) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                    }
	                    this.SaveReplayData();
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.p3OldX = this.p3X;
	                    this.p3OldY = this.p3Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    this.DrawGoals();
	                    this.DrawStatus();
	                    this.flip();
	                    if (this.p1X < 150) {
	                        ++this.p1TouchingGoal;
	                    }
	                    else {
	                        this.p1TouchingGoal = 0;
	                    }
	                    if (this.p2X <= 850 && this.p3X <= 850) {
	                        this.p2TouchingGoal = 0;
	                    }
	                    else {
	                        ++this.p2TouchingGoal;
	                    }
	                    if (this.fPlayOn) {
	                        --this.playOnTicks;
	                    }
	                    else {
	                        this.fPlayOn = this.checkScored();
	                    }
	                    if (this.playOnTicks === 0 || this.p1TouchingGoal > 60 || this.p2TouchingGoal > 60) {
	                        var var11 = shims_1.System.currentTimeMillis();
	                        if (this.p1TouchingGoal > 60) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.p2TouchingGoal > 60) {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.nScoreX < 500) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
	                        }
	                        else {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
	                        }
	                        this.drawPrompt();
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.flip();
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var8) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.playOnTicks = 10;
	                        this.fPlayOn = false;
	                        this.startTime += shims_1.System.currentTimeMillis() - var11;
	                        this.ballX = 490 + ((Math.random() * 20.0) | 0);
	                        this.ballY = 190 + ((Math.random() * 20.0) | 0);
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p1YV = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p2YV = 0;
	                        this.p3X = 700;
	                        this.p3Y = 0;
	                        this.p3YV = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.repaint();
	                    }
	                    if (this.gameThread != null) {
	                        try {
	                            if (this.fPlayOn) {
	                                yield shims_1.Thread.sleep(120);
	                            }
	                            else {
	                                yield shims_1.Thread.sleep(20);
	                            }
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                    }
	                }
	                ;
	                this.fEndGame = true;
	                if (this.fPlayOn) {
	                    if (this.nScoreX < 500) {
	                        ++this.p2Score;
	                        this.promptMsg = this.slimeColText[this.p2Col] + " scores at the final whistle!";
	                    }
	                    else {
	                        ++this.p1Score;
	                        this.promptMsg = this.slimeColText[this.p1Col] + " scores at the final whistle!";
	                    }
	                    this.drawPrompt();
	                }
	                else {
	                    this.drawPrompt("And that\'s the final whistle!", 0);
	                }
	                if (this.worldCup) {
	                    if (this.p1Score === this.p2Score) {
	                        this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                        this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
	                        this.worldCup = false;
	                        this.flip();
	                    }
	                    else if (this.p1Score >= this.p2Score) {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the world cup!", 1);
	                                break;
	                            case 1:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
	                                break;
	                            case 2:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
	                                break;
	                            case 3:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " wins the WORLD CUP!!!!!", 1);
	                        }
	                        if (this.worldCupRound === 3) {
	                            this.worldCup = false;
	                            this.promptBox("You win the world cup!!!", "Congratulations!");
	                        }
	                        else {
	                            ++this.worldCupRound;
	                        }
	                    }
	                    else {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                            case 1:
	                                this.promptBox("You have been eliminated.", "Goodbye.");
	                                break;
	                            case 2:
	                                this.promptBox("You have been knocked out of the semifinals.", "You played well.");
	                                break;
	                            case 3:
	                                this.promptBox("You came second.", "Are you satisfied with that?");
	                        }
	                        this.worldCup = false;
	                    }
	                }
	                else if (this.p1Score === this.p2Score) {
	                    this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                }
	                else if (this.p1Score < this.p2Score) {
	                    this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1);
	                }
	                else {
	                    this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
	                }
	                this.flip();
	                try {
	                    yield shims_1.Thread.sleep(5000);
	                }
	                catch (var6) {
	                }
	                ;
	                this.initStuff();
	            } while ((this.worldCup));
	            this.fCanChangeCol = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.initStuff();
	        this.promptMsg = "Click on an option to play...";
	        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    toggleBuffering() {
	        if (this.doubleBuffered = !this.doubleBuffered) {
	            this.screen = this.backBuffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        else {
	            this.screen = this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        this.repaint();
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var fontmetrics = this.screen.getFontMetrics();
	            var i = fontmetrics.stringWidth("Replay...");
	            var j = fontmetrics.getHeight();
	            var k = (this.nWidth / 2 | 0) - (i / 2 | 0);
	            var l = (this.nHeight / 2 | 0) - j;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            var i1 = this.replayPos - 1;
	            while ((!this.mousePressed)) {
	                ++i1;
	                if (i1 >= 200) {
	                    i1 = 0;
	                }
	                if (i1 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var9) {
	                    }
	                    ;
	                    i1 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	                yield this.ReplayFrame(i1, k, l, i, j, false);
	                this.flip();
	            }
	            ;
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    flip() {
	        if (this.doubleBuffered) {
	            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
	        }
	    }
	    getBallBounceX() {
	        var t = this.ballVY + (Math.sqrt((this.ballVY * this.ballVY + 2 * this.ballY)) | 0);
	        var ballBounceX = this.ballX + t * this.ballVX;
	        if (ballBounceX < 0) {
	            ballBounceX = -ballBounceX;
	        }
	        if (ballBounceX > 1000) {
	            ballBounceX = 1000 - ballBounceX;
	        }
	        return ballBounceX;
	    }
	    getBallMaxY() {
	        return this.ballVY < 0 ? this.ballY : this.ballY + (this.ballVY * this.ballVY / 2 | 0);
	    }
	    controlP2v0() {
	        this.p2XV = 0;
	        if (this.ballX > this.p2X + 5 && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.ballX + 50 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X + 50 && this.p2YV === 0 && this.ballY > 10 && this.ballY < 150) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v1() {
	        this.p2XV = 0;
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        if (bounceX > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2X < 150) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v2() {
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (bounceX > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && bounceX > 500 && ballMaxY > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v3() {
	        var SLIMEVEL = (this.SLIMEVEL * 4 / 3 | 0);
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var5 = true;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (bounceX > 900) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2XV > 0 && ballMaxY > 200 && bounceX > this.p2X + 300) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && bounceX > this.p2X + 400 && ballMaxY > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / SLIMEVEL | 0)) {
	            this.p2XV = -SLIMEVEL;
	        }
	    }
	    method_rn_ThreePSLime_p_1(s) {
	        shims_1.System.out.println(s);
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = ThreePSLime;


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class Slime2P extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.SERVE = 0;
	        this.NUM_DIFFERENT_SERVES = 6;
	        this.SERVE_STATE = 0;
	        this.randomoffset = 0;
	        this.Level = 1;
	        this.timesincelastjump = 0;
	        this.timesincelastdirectionchange = 0;
	        this.whereland = 0;
	        this.uwhereland = 0;
	        this.bestposition = 800;
	        this.counter = 0;
	        this.p1CanJump = true;
	        this.p2CanJump = false;
	        this.p1TouchCounter = 0;
	        this.p2TouchCounter = 0;
	        this.topScore = 10;
	        this.p2Col = 1;
	        this.slimeColText = ["Big Red Slime ", "The Green Monster ", "Golden Boy ", "The Great White Slime ", "The Grass Tree? "];
	        this.frenzyCol = 0;
	        this.scoringRunForSuper = 300;
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.SERVE_ALT = 0;
	        this.currentstate = 0;
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.nScore = 0;
	        this.nPointsScored = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.fEndGame = false;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.slimeColours = [shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black")];
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    handleEvent(event) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((event.id)) {
	                case 401:
	                case 403:
	                    if (!this.fEndGame) {
	                        switch ((event.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                break;
	                            case 65:
	                            case 74:
	                            case 97:
	                            case 106:
	                            case 1006:
	                                this.p1XV = this.scoringRun <= -300 ? -16 : -8;
	                                break;
	                            case 68:
	                            case 76:
	                            case 100:
	                            case 108:
	                            case 1007:
	                                this.p1XV = this.scoringRun <= -300 ? 16 : 8;
	                                break;
	                            case 73:
	                            case 87:
	                            case 105:
	                            case 119:
	                            case 1004:
	                                if (this.p1Y === 0 && this.p1CanJump) {
	                                    this.p1YV = this.scoringRun <= -300 ? 45 : 31;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((event.key)) {
	                        case 65:
	                        case 74:
	                        case 97:
	                        case 106:
	                        case 1006:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 76:
	                        case 100:
	                        case 108:
	                        case 1007:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.nScore = 5;
	                        this.nPointsScored = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 200;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.promptMsg = "";
	                        this.repaint();
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 1-Player, by Chris Coyne: www.chriscoyne.com");
	            }
	            return false;
	        });
	    }
	    DrawSlimers() {
	        var k1 = (this.nWidth / 10 | 0);
	        var j2 = (this.nHeight / 10 | 0);
	        var i3 = (this.nWidth / 50 | 0);
	        var j3 = (this.nHeight / 25 | 0);
	        var k3 = (this.ballX * this.nWidth / 1000 | 0);
	        var l3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var i = (this.p1OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        var l = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        i = (this.p2OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        this.MoveBall();
	        i = (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.scoringRun <= -300 ? this.slimeColours[this.frenzyCol = (this.frenzyCol + 1) % this.slimeColours.length] : this.slimeColours[this.p1Col]);
	        if (!this.p1CanJump) {
	            this.screen.setColor(shims_1.Color.fromString("gray"));
	        }
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        var l4 = this.p1X + 38;
	        var i5 = this.p1Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        var i4 = i - k3;
	        var j4 = l - l3;
	        var k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        var flag = Math.random() < 0.01;
	        if (flag) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        i = (this.p2X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.scoringRun >= 300 ? this.slimeColours[this.frenzyCol = (this.frenzyCol + 1) % this.slimeColours.length] : this.slimeColours[this.p2Col]);
	        if (!this.p2CanJump) {
	            this.screen.setColor(shims_1.Color.fromString("gray"));
	        }
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        l4 = this.p2X - 18;
	        i5 = this.p2Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        i4 = i - k3;
	        j4 = l - l3;
	        k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        flag = Math.random() < 0.01;
	        if (flag) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(flag ? shims_1.Color.fromString("gray") : shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        var i2;
	        var l2;
	        var k;
	        var j1;
	        var k5;
	        if (this.p1TouchCounter > 3) {
	            i2 = (this.nWidth / 20 | 0);
	            l2 = (this.nHeight / 20 | 0);
	            k = (this.p2X * this.nWidth / 1000 | 0) - i2;
	            j1 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        else if (this.nScore > 8) {
	            i2 = (this.p1X * this.nWidth / 1000 | 0);
	            l2 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            k = (this.nWidth / 20 | 0);
	            j1 = (this.nHeight / 20 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);
	                ++k5;
	            } while ((k5 < 3));
	            return;
	        }
	        if (this.nScore < 2) {
	            i2 = (this.nWidth / 20 | 0);
	            l2 = (this.nHeight / 20 | 0);
	            k = (this.p2X * this.nWidth / 1000 | 0) - i2;
	            j1 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	    }
	    paint(g) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        g.setColor(shims_1.Color.fromString("gray"));
	        g.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        g.setColor(shims_1.Color.fromString("white"));
	        g.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	        g.setColor(shims_1.Color.fromString("black"));
	        g.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0) + 2, 4, (this.nHeight / 10 | 0) - 14);
	        this.drawScores();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var fontmetrics = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillRect(260, 220, 240, 25);
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString("Slime Volleyball 2004", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Slime Volleyball 2004") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            g.setColor(shims_1.Color.fromString("white"));
	            fontmetrics = g.getFontMetrics();
	            g.drawString("AI by Chris Coyne v 1.1", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("AI by Chris Coyne") / 2 | 0), (this.nHeight / 2 | 0) + fontmetrics.getHeight() * 2);
	            g.drawString("newest version always at www.chriscoyne.com", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("newest version always at www.chriscoyne.com") / 2 | 0), (this.nHeight / 2 | 0) + 20 + fontmetrics.getHeight() * 2);
	            g.drawString("based on 2-Player by Quin Pendragon", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("based on 2-Player by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + 40 + fontmetrics.getHeight() * 2);
	        }
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    ReplayFrame(i, j, k, l, i1, flag) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (flag) {
	                this.ballX = this.ballOldX = -50000000;
	                this.ballY = this.ballOldY = 100000;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var _ex = i !== 0 ? i - 1 : 199;
	                this.p1OldX = this.replayData[_ex][0];
	                this.p1OldY = this.replayData[_ex][1];
	                this.p2OldX = this.replayData[_ex][2];
	                this.p2OldY = this.replayData[_ex][3];
	                this.ballOldX = this.replayData[_ex][4];
	                this.ballOldY = this.replayData[_ex][5];
	            }
	            this.p1X = this.replayData[i][0];
	            this.p1Y = this.replayData[i][1];
	            this.p2X = this.replayData[i][2];
	            this.p2Y = this.replayData[i][3];
	            this.ballX = this.replayData[i][4];
	            this.ballY = this.replayData[i][5];
	            this.p1Col = this.replayData[i][6];
	            this.p2Col = this.replayData[i][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((i / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", j, k);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(j, k - i1, l, i1 * 2);
	            }
	            this.DrawSlimers();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var8) {
	            }
	            ;
	        });
	    }
	    MakeTime(l) {
	        var l1 = Math.round(l / 10) % 100;
	        var l2 = Math.round(l / 1000) % 60;
	        var l3 = Math.round(l / 60000) % 60;
	        var l4 = Math.round(l / 3600000);
	        var s = "";
	        if (l4 < 10) {
	            s = s + "0";
	        }
	        s = s + l4;
	        s = s + ":";
	        if (l3 < 10) {
	            s = s + "0";
	        }
	        s = s + l3;
	        s = s + ":";
	        if (l2 < 10) {
	            s = s + "0";
	        }
	        s = s + l2;
	        s = s + ":";
	        if (l1 < 10) {
	            s = s + "0";
	        }
	        s = s + l1;
	        return s;
	    }
	    MoveSlimers() {
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 445) {
	            this.p1X = 445;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.scoringRun <= -300 ? 4 : 2;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 555) {
	            this.p2X = 555;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.scoringRun >= 300 ? 4 : 2;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    CanHitWithJump() {
	        if (this.p2Y !== 0) {
	            return false;
	        }
	        else {
	            var bY = this.ballY;
	            var bVY = this.ballVY;
	            var bX = this.ballX;
	            var bVX = this.ballVX;
	            var pY = 0;
	            var pVY = 31;
	            var pX = this.p2X;
	            var pVX = this.p2XV;
	            while ((bY > 0 && pY >= 0 && (pVY > 0 || pX < 640 && pVY > -20 + ((pX - 550) / 5 | 0)))) {
	                --bVY;
	                bY += bVY;
	                bX += bVX;
	                pVY -= 2;
	                pY += pVY;
	                if (pX > this.whereland) {
	                    pX -= 8;
	                }
	                else if (pX < this.whereland) {
	                    pX += 8;
	                }
	                if (pX < 555) {
	                    pX = 555;
	                }
	                if (Math.abs(bX - pX) < 30 && Math.abs(bY - pY) < 35 && bY > pY) {
	                    if (bVX < 0 && pX < 900 && bX > pX - 10) {
	                        return false;
	                    }
	                    return true;
	                }
	            }
	            ;
	            return false;
	        }
	    }
	    TimeTillLand(Y, VY) {
	        var t;
	        for (t = -1; Y > 120; ++t) {
	            --VY;
	            Y += VY;
	        }
	        return t;
	    }
	    Player2_Level1_AI() {
	        var g = this.screen;
	        ++this.timesincelastjump;
	        ++this.timesincelastdirectionchange;
	        if (this.counter % 50 === 0) {
	            this.randomoffset = 0;
	        }
	        if (this.counter % 3 === 0) {
	            var timetillland = this.TimeTillLand(this.ballY, this.ballVY);
	            this.whereland = ((this.ballX + this.ballVX * timetillland) | 0);
	            this.uwhereland = this.whereland;
	            if (this.whereland < 0) {
	                this.whereland = Math.abs(this.whereland);
	            }
	            else if (this.whereland > 1100) {
	                this.whereland = 1980 - this.whereland;
	            }
	            else if (this.whereland > 990 && this.ballX > this.p2X) {
	                this.whereland = 1980 - this.whereland;
	            }
	            if (Math.abs(this.ballVX) > 3) {
	                this.bestposition = this.whereland + 10;
	            }
	            else {
	                this.bestposition = this.whereland + 4;
	            }
	            if (this.whereland < 600) {
	                this.bestposition += 7;
	            }
	            else if (this.whereland < 700) {
	                this.bestposition += 4;
	            }
	            else if (this.whereland < 800) {
	                this.bestposition += 2;
	            }
	            this.bestposition += this.randomoffset;
	            if (this.whereland < 250) {
	                this.bestposition = this.whereland + 550 - ((200.0 * Math.random()) | 0) + ((200.0 * Math.random()) | 0);
	            }
	            else if (this.whereland < 500) {
	                this.bestposition = 650 + ((100.0 * Math.random()) | 0) - ((100.0 * Math.random()) | 0);
	            }
	        }
	        if (this.counter % 500 === 0) {
	            this.SERVE = ((1000.0 * Math.random()) | 0) % this.NUM_DIFFERENT_SERVES;
	            this.SERVE_ALT = ((1000.0 * Math.random()) | 0);
	        }
	        if (this.SERVE === 0 && this.whereland === 800) {
	            if (this.counter > 200) {
	                this.counter = 0;
	            }
	            if (this.counter < 150) {
	                this.bestposition = 800;
	            }
	            this.SERVE_STATE = 0;
	        }
	        if ((this.SERVE === 1 || this.SERVE === 2) && this.SERVE_STATE === 0 && this.whereland === 800) {
	            this.SERVE_STATE = 1;
	            this.bestposition = 800;
	        }
	        else if ((this.SERVE === 1 || this.SERVE === 2) && this.SERVE_STATE > 0) {
	            this.bestposition = 800;
	            if (this.SERVE_STATE === 1 && this.ballVY > 10 && this.ballY > 300 && this.whereland === 800) {
	                this.SERVE_STATE = 2;
	            }
	            else if (this.SERVE_STATE === 2 && this.whereland === 800) {
	                this.bestposition = 772 + 56 * (this.SERVE - 1);
	            }
	            else if (this.SERVE_STATE === 2) {
	                this.bestposition = 772 + 56 * (this.SERVE - 1);
	            }
	            if (this.whereland < 500) {
	                this.SERVE_STATE = 0;
	            }
	        }
	        if ((this.SERVE === 4 || this.SERVE === 5 || this.SERVE === 3) && this.SERVE_STATE === 0 && this.whereland === 800) {
	            this.SERVE_STATE = 1;
	            this.bestposition = 800;
	            if (this.p2Y === 0) {
	                this.SERVE_STATE = 3;
	                this.p2YV = 31;
	            }
	        }
	        else if ((this.SERVE === 4 || this.SERVE === 5 || this.SERVE === 3) && this.SERVE_STATE > 0) {
	            this.bestposition = 800;
	            if (this.SERVE_STATE === 1 && this.ballVY > 1 && this.ballY > 200 && this.whereland === 800) {
	                this.SERVE_STATE = 2;
	            }
	            else if (this.SERVE_STATE === 2 && this.whereland === 800) {
	                if (this.p2Y === 0 && this.ballY < 290) {
	                    this.p2YV = 31;
	                    this.SERVE_STATE = 3;
	                }
	                this.bestposition = 805 + this.SERVE_ALT % 6 * 6;
	            }
	            else if (this.ballX < 700) {
	                this.SERVE_STATE = 0;
	            }
	            else if (this.SERVE_STATE === 3) {
	                this.bestposition = 805 + this.SERVE_ALT % 6 * 6;
	                if (this.p2X > this.bestposition + 4) {
	                    this.p2XV = -8;
	                }
	                else if (this.p2X < this.bestposition - 4) {
	                    this.p2XV = 8;
	                }
	                else {
	                    this.p2XV = 0;
	                }
	                if (this.ballVY < 0 && this.ballY < 550 && this.p2Y === 0) {
	                    this.p2YV = 31;
	                }
	            }
	        }
	        if (this.whereland === this.uwhereland && this.whereland !== 800 && this.SERVE_STATE === 0) {
	            if (this.whereland > 480 && this.CanHitWithJump()) {
	                this.p2YV = 31;
	                this.p2XV = 0;
	                this.timesincelastjump = 0;
	            }
	        }
	        else if (this.whereland - this.p2X > 50 && this.whereland !== 800 && this.SERVE_STATE === 0 && this.whereland > 480 && this.CanHitWithJump()) {
	            this.p2YV = 31;
	            this.p2XV = 0;
	            this.timesincelastjump = 0;
	        }
	        if (this.p2X + 3 < this.bestposition && this.timesincelastdirectionchange > 10 && this.p2Y === 0) {
	            if (this.p2XV !== 8) {
	                this.timesincelastdirectionchange = 0;
	            }
	            this.p2XV = 8;
	        }
	        else if (this.whereland > 970 && this.timesincelastdirectionchange > 10 && this.p2Y === 0) {
	            if (this.p2XV !== 8) {
	                this.timesincelastdirectionchange = 0;
	            }
	            this.p2XV = 8;
	        }
	        else if (this.p2X - 3 > this.bestposition && this.timesincelastdirectionchange > 10 && this.p2Y === 0) {
	            if (this.p2XV !== -8) {
	                this.timesincelastdirectionchange = 0;
	            }
	            this.p2XV = -8;
	        }
	        else if (Math.abs(this.p2X - this.bestposition) < 5 && this.p2Y === 0) {
	            this.p2XV = 0;
	        }
	        if (this.p2Y > 0 && this.SERVE_STATE === 0 && Math.abs(this.ballVX) > 3) {
	            if (this.p2X < this.whereland - 5) {
	                if (this.p2XV !== 8) {
	                    this.timesincelastdirectionchange = 0;
	                }
	                this.p2XV = 8;
	            }
	            else if (this.p2X > this.whereland + 5) {
	                if (this.p2XV !== -8) {
	                    this.timesincelastdirectionchange = 0;
	                }
	                this.p2XV = -8;
	            }
	            else if (this.p2X < this.whereland + 4 && this.p2X > this.whereland - 4) {
	                if (this.p2XV !== 0) {
	                    this.timesincelastdirectionchange = 0;
	                }
	                this.p2XV = 0;
	            }
	        }
	        else if (this.p2Y > 0 && this.SERVE_STATE === 0) {
	            if (this.p2X < this.whereland + 2 && this.timesincelastdirectionchange > 3) {
	                if (this.p2XV !== 8) {
	                    this.timesincelastdirectionchange = 0;
	                }
	                this.p2XV = 8;
	            }
	            else if (this.p2X > this.whereland + 11 && this.timesincelastdirectionchange > 3) {
	                if (this.p2XV !== -8) {
	                    this.timesincelastdirectionchange = 0;
	                }
	                this.p2XV = -8;
	            }
	            else if (this.p2X >= this.whereland + 2 && this.p2X <= this.whereland + 10) {
	                if (this.p2XV !== 0) {
	                    this.timesincelastdirectionchange = 0;
	                }
	                this.p2XV = 0;
	            }
	        }
	        if (this.p2Y > 0 && this.whereland > 490 && this.timesincelastdirectionchange > 0 && Math.abs(this.ballX - this.bestposition) < 20) {
	            if (this.p2XV !== 0) {
	                this.timesincelastdirectionchange = 0;
	            }
	            this.p2XV = 0;
	        }
	        ++this.counter;
	    }
	    Player2_Level2_AI() {
	    }
	    MoveBall() {
	        var k = (30 * this.nHeight / 1000 | 0);
	        var i = (this.ballOldX * this.nWidth / 1000 | 0);
	        var j = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (this.ballX >= 500) {
	            this.p1CanJump = true;
	            this.p1TouchCounter = 0;
	        }
	        else if (this.ballX <= 500) {
	            this.p2CanJump = true;
	            this.p2TouchCounter = 0;
	        }
	        if (!this.fEndGame) {
	            var l1 = (this.ballX - this.p1X) * 2;
	            var i2 = this.ballY - this.p1Y;
	            var j2 = l1 * l1 + i2 * i2;
	            var k2 = this.ballVX - this.p1XV;
	            var l2 = this.ballVY - this.p1YV;
	            var i1;
	            var k1;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p1X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p1Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    this.ballVX += this.p1XV - (2 * l1 * k1 / i1 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p1YV - (2 * i2 * k1 / i1 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	                ++this.p1TouchCounter;
	            }
	            l1 = (this.ballX - this.p2X) * 2;
	            i2 = this.ballY - this.p2Y;
	            j2 = l1 * l1 + i2 * i2;
	            k2 = this.ballVX - this.p2XV;
	            l2 = this.ballVY - this.p2YV;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p2X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p2Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    this.ballVX += this.p2XV - (2 * l1 * k1 / i1 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p2YV - (2 * i2 * k1 / i1 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	                ++this.p2TouchCounter;
	            }
	            if (this.ballX < 15) {
	                if (!this.fP2Touched) {
	                    this.p1CanJump = false;
	                }
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                if (!this.fP1Touched) {
	                    this.p2CanJump = false;
	                }
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 480 && this.ballX < 520 && this.ballY < 140) {
	                if (this.ballVY < 0 && this.ballY > 130) {
	                    this.ballVY *= -1;
	                    this.ballY = 130;
	                }
	                else if (this.ballX < 500) {
	                    this.ballX = 480;
	                    this.ballVX = this.ballVX >= 0 ? -this.ballVX : this.ballVX;
	                }
	                else {
	                    this.ballX = 520;
	                    this.ballVX = this.ballVX <= 0 ? -this.ballVX : this.ballVX;
	                }
	            }
	        }
	        i = (this.ballX * this.nWidth / 1000 | 0);
	        j = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	    }
	    DrawStatus() {
	        var g = this.screen;
	        var i = (this.nHeight / 20 | 0);
	        g.setColor(shims_1.Color.fromString("blue"));
	        var fontmetrics = this.screen.getFontMetrics();
	        var j = (this.nWidth / 2 | 0) + ((this.nScore - 5) * this.nWidth / 24 | 0);
	        var s = "Points Scored: " + this.nPointsScored + "   Elapsed: " + this.MakeTime(this.gameTime);
	        var k = fontmetrics.stringWidth(s);
	        g.fillRect(j - (k / 2 | 0) - 5, 0, k + 10, i + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(s, j - (k / 2 | 0), fontmetrics.getAscent() + 20);
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(s, i) {
	        if (((typeof s === 'string') || s === null) && ((typeof i === 'number') || i === null)) {
	            return (() => {
	                var fontmetrics = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fontmetrics.getHeight() * (i + 1) + 10);
	            })();
	        }
	        else if (s === undefined && i === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    drawScores() {
	        var g = this.screen;
	        var k = (this.nHeight / 20 | 0);
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect(0, 0, this.nWidth, k + 22);
	        var i1;
	        var j;
	        for (i1 = 0; i1 < this.nScore; ++i1) {
	            j = ((i1 + 1) * this.nWidth / 24 | 0);
	            g.setColor(this.slimeColours[this.p1Col]);
	            g.fillOval(j, 20, k, k);
	            g.setColor(shims_1.Color.fromString("white"));
	            g.drawOval(j, 20, k, k);
	        }
	        for (i1 = 0; i1 < 10 - this.nScore; ++i1) {
	            j = this.nWidth - ((i1 + 1) * this.nWidth / 24 | 0) - k;
	            g.setColor(this.slimeColours[this.p2Col]);
	            g.fillOval(j, 20, k, k);
	            g.setColor(shims_1.Color.fromString("white"));
	            g.drawOval(j, 20, k, k);
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.replayPos = this.replayStart = 0;
	            this.p1Col = 0;
	            this.p2Col = 1;
	            this.scoringRun = 0;
	            this.fP1Touched = this.fP2Touched = false;
	            this.nPointsScored = 0;
	            this.startTime = shims_1.System.currentTimeMillis();
	            while ((this.nScore !== 0 && this.nScore !== 10 && this.gameThread != null)) {
	                this.gameTime = shims_1.System.currentTimeMillis() - this.startTime;
	                this.SaveReplayData();
	                this.p1OldX = this.p1X;
	                this.p1OldY = this.p1Y;
	                this.p2OldX = this.p2X;
	                this.p2OldY = this.p2Y;
	                this.ballOldX = this.ballX;
	                this.ballOldY = this.ballY;
	                if (this.Level === 1) {
	                    this.Player2_Level1_AI();
	                }
	                else if (this.Level === 2) {
	                    this.Player2_Level2_AI();
	                }
	                this.MoveSlimers();
	                this.DrawSlimers();
	                this.DrawStatus();
	                if (this.ballY < 35) {
	                    this.p1TouchCounter = 0;
	                    this.p2TouchCounter = 0;
	                    this.p1CanJump = true;
	                    this.p2CanJump = true;
	                    this.counter = 0;
	                    var _ex = shims_1.System.currentTimeMillis();
	                    ++this.nPointsScored;
	                    this.nScore += this.ballX <= 500 ? -1 : 1;
	                    var g = this.screen;
	                    if (this.nScore === 10) {
	                        var flag = this.screen.getFontMetrics();
	                        this.screen.setColor(shims_1.Color.fromString("black"));
	                        this.screen.fillRect(160, 200, 440, 85);
	                        this.screen.setColor(shims_1.Color.fromString("white"));
	                        this.screen.drawString("YOU WON!", (this.nWidth / 2 | 0) - (flag.stringWidth("YOU WON!") / 2 | 0), (this.nHeight / 2 | 0) - flag.getHeight());
	                        g.setColor(shims_1.Color.fromString("white"));
	                        flag = g.getFontMetrics();
	                        g.drawString("The game took " + this.MakeTime(this.gameTime), (this.nWidth / 2 | 0) - (flag.stringWidth("The Game took 5:35:45") / 2 | 0), (this.nHeight / 2 | 0) + flag.getHeight() * 2);
	                        g.drawString("It was a " + this.nPointsScored + " point game!", (this.nWidth / 2 | 0) - (flag.stringWidth("It was a 34 points game") / 2 | 0), (this.nHeight / 2 | 0) + 20 + flag.getHeight() * 2);
	                        g.drawString("To prove your victory, send this victory code:" + (73 + 3 * this.nPointsScored) + "x" + (Math.round(this.gameTime / 2) - 1234) + " to ccoyne@post.harvard.edu", (this.nWidth / 2 | 0) - (flag.stringWidth("Please send to Chris Coyne with victory code sadf asdfdsaf to ccoyne@post.harvard.edu") / 2 | 0), (this.nHeight / 2 | 0) + 40 + flag.getHeight() * 2);
	                        try {
	                            yield shims_1.Thread.sleep(15000);
	                            this.getAppletContext().showDocument(new shims_1.URL("mailto:ccoyne@post.harvard.edu?subject=Slime 2004 1.1 Victory &body=Chris, please add my " + this.nPointsScored + " point game to the high score list; my victory code is " + (73 + 3 * this.nPointsScored) + "x" + (Math.round(this.gameTime / 2) - 1234) + "%0d%0dMy name is ____, I am ___ years old, and I live in ______"));
	                        }
	                        catch (var11) {
	                            this.showStatus("Failed to connect to Email");
	                        }
	                        ;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(250000);
	                            }
	                            catch (var10) {
	                            }
	                            ;
	                        }
	                    }
	                    if (this.ballX <= 500 && this.scoringRun >= 0) {
	                        ++this.scoringRun;
	                    }
	                    else if (this.ballX > 500 && this.scoringRun <= 0) {
	                        --this.scoringRun;
	                    }
	                    else if (this.ballX <= 500 && this.scoringRun <= 0) {
	                        this.scoringRun = 1;
	                    }
	                    else if (this.ballX > 500 && this.scoringRun >= 0) {
	                        this.scoringRun = -1;
	                    }
	                    this.promptMsg = this.ballX <= 500 ? this.slimeColText[this.p2Col] : this.slimeColText[this.p1Col];
	                    if (!this.fP1Touched && !this.fP2Touched) {
	                        this.promptMsg = "What can I say?";
	                    }
	                    else if ((this.scoringRun < 0 ? -this.scoringRun : this.scoringRun) === 300) {
	                        this.promptMsg = this.promptMsg + "is on fire!";
	                    }
	                    else if ((this.ballX <= 500 || !this.fP1Touched || this.fP2Touched) && (this.ballX > 500 || this.fP1Touched || !this.fP2Touched)) {
	                        if (this.ballX > 500 && !this.fP1Touched && this.fP2Touched || this.ballX <= 500 && this.fP1Touched && !this.fP2Touched) {
	                            this.promptMsg = this.promptMsg + "dies laughing! :P";
	                        }
	                        else {
	                            switch ((this.nScore)) {
	                                case 0:
	                                case 10:
	                                    if (this.nPointsScored === 5) {
	                                        this.promptMsg = this.promptMsg + "Wins with a QUICK FIVE!!!";
	                                    }
	                                    else if (this.scoringRun === 8) {
	                                        this.promptMsg = this.promptMsg + "Wins with a BIG NINE!!!";
	                                    }
	                                    else {
	                                        this.promptMsg = this.promptMsg + "Wins!!!";
	                                    }
	                                    break;
	                                case 1:
	                                case 2:
	                                case 3:
	                                case 7:
	                                case 8:
	                                case 9:
	                                default:
	                                    this.promptMsg = this.promptMsg + "Scores!";
	                                    break;
	                                case 4:
	                                    this.promptMsg = this.promptMsg + (this.ballX >= 500 ? "Scores!" : "takes the lead!!");
	                                    break;
	                                case 5:
	                                    this.promptMsg = this.promptMsg + "Equalizes!";
	                                    break;
	                                case 6:
	                                    this.promptMsg = this.promptMsg + (this.ballX <= 500 ? "Scores!" : "takes the lead!!");
	                            }
	                        }
	                    }
	                    else {
	                        this.promptMsg = this.promptMsg + "aces the serve!";
	                    }
	                    this.fCanChangeCol = false;
	                    var var12 = this.nScore !== 0 && this.nScore !== 10;
	                    var i = this.ballX;
	                    this.drawPrompt();
	                    if (var12) {
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var9) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                    }
	                    else if (this.gameThread != null) {
	                        try {
	                            yield shims_1.Thread.sleep(2500);
	                        }
	                        catch (var8) {
	                        }
	                        ;
	                    }
	                    this.promptMsg = "";
	                    this.drawPrompt();
	                    this.fCanChangeCol = true;
	                    if (var12) {
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = i >= 500 ? 200 : 800;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.fP1Touched = this.fP2Touched = false;
	                        this.repaint();
	                    }
	                    this.startTime += shims_1.System.currentTimeMillis() - _ex;
	                    this.counter = 0;
	                }
	                if (this.gameThread != null) {
	                    try {
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var7) {
	                    }
	                    ;
	                }
	            }
	            ;
	            this.fEndGame = true;
	            this.SaveReplayData();
	            yield this.DoReplay();
	            this.fInPlay = false;
	            this.promptMsg = "Click the mouse to play...";
	            this.repaint();
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.nScore = 5;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.promptMsg = "Click the mouse to play...";
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var fontmetrics = this.screen.getFontMetrics();
	            var i = fontmetrics.stringWidth("Replay...");
	            var j = fontmetrics.getHeight();
	            var k = (this.nWidth / 2 | 0) - (i / 2 | 0);
	            var l = (this.nHeight / 2 | 0) - j;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            for (var i1 = this.replayPos - 1; !this.mousePressed; yield this.ReplayFrame(i1, k, l, i, j, false)) {
	                ++i1;
	                if (i1 >= 200) {
	                    i1 = 0;
	                }
	                if (i1 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var8) {
	                    }
	                    ;
	                    i1 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	            }
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    DoFatality() {
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Slime2P;


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class Slime2P extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.topScore = 10;
	        this.p1Col = 0;
	        this.p2Col = 1;
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.nScore = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.fInPlay = false;
	        this.mousePressed = false;
	        this.fEndGame = false;
	        this.currTime = 0;
	        this.elapsTime = 0;
	        this.minute = 0;
	        this.sec = 0;
	        this.msec = 0;
	        this.slimeColours = [shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("blue")];
	        this.currTime = 0;
	        this.elapsTime = 0;
	        this.minute = 0;
	        this.sec = 0;
	        this.msec = 0;
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.nScore = 5;
	        this.fInPlay = this.fEndGame = false;
	        this.promptMsg = "Click the mouse to play...";
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    paint(dc) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        dc.setColor(shims_1.Color.fromString("blue"));
	        dc.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        dc.setColor(shims_1.Color.fromString("gray"));
	        dc.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        dc.setColor(shims_1.Color.fromString("white"));
	        dc.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	        this.drawScores();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var fm = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString("Slime Volleyball!", (this.nWidth / 2 | 0) - (fm.stringWidth("Slime Volleyball!") / 2 | 0), (this.nHeight / 2 | 0) - fm.getHeight());
	            dc.setColor(shims_1.Color.fromString("white"));
	            fm = dc.getFontMetrics();
	            dc.drawString("Written by ZAIN0", (this.nWidth / 2 | 0) - (fm.stringWidth("Written by ZAIN0") / 2 | 0), (this.nHeight / 2 | 0) + fm.getHeight() * 2);
	        }
	    }
	    drawScores() {
	        var g = this.screen;
	        var nDiam = (this.nHeight / 20 | 0);
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect(0, 0, this.nWidth, nDiam + 22);
	        var nX;
	        for (var i = 0; i < this.nScore; ++i) {
	            nX = ((i + 1) * this.nWidth / 20 | 0);
	            g.setColor(this.slimeColours[this.p1Col]);
	            g.fillOval(nX, 20, nDiam, nDiam);
	            g.setColor(shims_1.Color.fromString("white"));
	            g.drawOval(nX, 20, nDiam, nDiam);
	        }
	        for (var i1 = 0; i1 < 10 - this.nScore; ++i1) {
	            nX = this.nWidth - ((i1 + 1) * this.nWidth / 20 | 0) - nDiam;
	            g.setColor(this.slimeColours[this.p2Col]);
	            g.fillOval(nX, 20, nDiam, nDiam);
	            g.setColor(shims_1.Color.fromString("white"));
	            g.drawOval(nX, 20, nDiam, nDiam);
	        }
	    }
	    drawPrompt() {
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        var fm = this.screen.getFontMetrics();
	        this.screen.setColor(shims_1.Color.fromString("lightGray"));
	        this.screen.drawString(this.promptMsg, ((this.nWidth - fm.stringWidth(this.promptMsg)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fm.getHeight() + 10);
	    }
	    handleEvent(e) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((e.id)) {
	                case 401:
	                    if (!this.fEndGame) {
	                        switch ((e.key)) {
	                            case 65:
	                            case 97:
	                                this.p1XV = -8;
	                                break;
	                            case 68:
	                            case 100:
	                                this.p1XV = 8;
	                                break;
	                            case 73:
	                            case 105:
	                                this.p2YV = 31;
	                                break;
	                            case 74:
	                            case 106:
	                                this.p2XV = -8;
	                                break;
	                            case 75:
	                            case 107:
	                                this.p2Col = this.p2Col === 5 ? 0 : this.p2Col + 1;
	                                if (this.p2Col === this.p1Col) {
	                                    if (this.p2Col === 5) {
	                                        this.p2Col = 0;
	                                    }
	                                    else {
	                                        ++this.p2Col;
	                                    }
	                                }
	                                this.drawScores();
	                                break;
	                            case 76:
	                            case 108:
	                                this.p2XV = 8;
	                                break;
	                            case 83:
	                            case 115:
	                                this.p1Col = this.p1Col === 5 ? 0 : this.p1Col + 1;
	                                if (this.p1Col === this.p2Col) {
	                                    if (this.p1Col === 5) {
	                                        this.p1Col = 0;
	                                    }
	                                    else {
	                                        ++this.p1Col;
	                                    }
	                                }
	                                this.drawScores();
	                                break;
	                            case 87:
	                            case 119:
	                                this.p1YV = 31;
	                        }
	                    }
	                    break;
	                case 402:
	                    switch ((e.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                            if (this.p2XV < 0) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                            if (this.p2XV > 0) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.nScore = 5;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 200;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.promptMsg = "";
	                        this.repaint();
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 2-Player, by Zaino");
	            }
	            return false;
	        });
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.currTime = shims_1.System.currentTimeMillis();
	            while ((this.nScore !== 0 && this.nScore !== 10 && this.gameThread != null)) {
	                this.p1OldX = this.p1X;
	                this.p1OldY = this.p1Y;
	                this.p2OldX = this.p2X;
	                this.p2OldY = this.p2Y;
	                this.ballOldX = this.ballX;
	                this.ballOldY = this.ballY;
	                this.MoveSlimers();
	                this.DrawSlimers();
	                this.drawTime();
	                this.drawScores();
	                if (this.ballY < 35) {
	                    this.nScore += this.ballX > 500 ? 1 : -1;
	                    this.promptMsg = this.ballX > 500 ? "Red " : "Green ";
	                    if ((this.promptMsg === "Red ")) {
	                        switch ((this.p1Col)) {
	                            case 0:
	                                this.promptMsg = "Big Red Slime ";
	                                break;
	                            case 1:
	                                this.promptMsg = "Magic Green Slime ";
	                                break;
	                            case 2:
	                                this.promptMsg = "Golden Boy ";
	                                break;
	                            case 3:
	                                this.promptMsg = "The Great White Slime ";
	                                break;
	                            case 4:
	                                this.promptMsg = "Blackie ";
	                                break;
	                            case 5:
	                                this.promptMsg = "Invisible Blue Slime ";
	                        }
	                    }
	                    else {
	                        switch ((this.p2Col)) {
	                            case 0:
	                                this.promptMsg = "Big Red Slime ";
	                                break;
	                            case 1:
	                                this.promptMsg = "Magic Green Slime ";
	                                break;
	                            case 2:
	                                this.promptMsg = "Golden Boy ";
	                                break;
	                            case 3:
	                                this.promptMsg = "The Great White Slime ";
	                                break;
	                            case 4:
	                                this.promptMsg = "Blackie ";
	                                break;
	                            case 5:
	                                this.promptMsg = "Invisible Blue Slime ";
	                        }
	                    }
	                    switch ((this.nScore)) {
	                        case 0:
	                        case 10:
	                            this.promptMsg = this.promptMsg + "Wins!!!";
	                            break;
	                        case 4:
	                            this.promptMsg = this.promptMsg + (this.ballX < 500 ? "takes the lead!!" : "Scores!");
	                            break;
	                        case 5:
	                            this.promptMsg = this.promptMsg + "Equalizes!";
	                            break;
	                        case 6:
	                            this.promptMsg = this.promptMsg + (this.ballX > 500 ? "takes the lead!!" : "Scores!");
	                            break;
	                        default:
	                            this.promptMsg = this.promptMsg + "Scores!";
	                    }
	                    this.drawPrompt();
	                    if (this.gameThread != null) {
	                        try {
	                            yield shims_1.Thread.sleep(2000);
	                        }
	                        catch (var2) {
	                        }
	                        ;
	                    }
	                    this.promptMsg = "";
	                    this.drawPrompt();
	                    if (this.nScore !== 0 && this.nScore !== 10) {
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = this.ballX < 500 ? 800 : 200;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.repaint();
	                    }
	                }
	                if (this.gameThread != null) {
	                    try {
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var1) {
	                    }
	                    ;
	                }
	            }
	            ;
	            this.fEndGame = true;
	            yield this.DoFatality();
	            this.fInPlay = false;
	            this.promptMsg = "Click the mouse to play...";
	            this.repaint();
	        });
	    }
	    MoveSlimers() {
	        this.p1X += this.p1XV;
	        if (this.p1X > 950) {
	            this.p1X = 950;
	        }
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 445 && this.p1X < 555 && this.p1Y < 110) {
	            if (this.p1XV > 0) {
	                this.p1XV = 0;
	                this.p1X = 445;
	            }
	            else {
	                this.p1XV = 0;
	                this.p1X = 555;
	            }
	        }
	        else if (this.p1X > 445 && this.p1X < 555 && this.p1Y > 110 && this.p1Y < 120) {
	            this.p1YV = this.p1YV < 0 ? 0 : this.p1YV;
	            this.p1Y = 120;
	        }
	        if (this.p1Y > 1000) {
	            this.p1Y = 1000;
	            this.p1YV = -this.p1YV;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= 3;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	            else if (this.p1X > 450 && this.p1X < 550 && this.p1Y > 110 && this.p1Y < 130 && this.p1YV < 0) {
	                this.p1YV = -this.p1YV;
	                this.p1Y = 130;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2X > 445 && this.p2X < 555 && this.p2Y < 110) {
	            if (this.p2XV > 0) {
	                this.p2XV = 0;
	                this.p2X = 445;
	            }
	            else {
	                this.p2XV = 0;
	                this.p2X = 555;
	            }
	        }
	        else if (this.p2X > 445 && this.p2X < 555 && this.p2Y > 110 && this.p2Y < 120) {
	            this.p2YV = this.p2YV < 0 ? 0 : this.p2YV;
	            this.p2Y = 120;
	        }
	        if (this.p2Y > 1000) {
	            this.p2Y = 1000;
	            this.p2YV = -this.p2YV;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= 3;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	            else if (this.p2X > 450 && this.p2X < 550 && this.p2Y > 110 && this.p2Y < 130 && this.p2YV < 0) {
	                this.p2YV = -this.p2YV;
	                this.p2Y = 130;
	            }
	        }
	    }
	    DrawSlimers() {
	        var nW = (this.nWidth / 10 | 0);
	        var nH = (this.nHeight / 10 | 0);
	        var nEW = (this.nWidth / 50 | 0);
	        var nEH = (this.nHeight / 25 | 0);
	        var bX = (this.ballX * this.nWidth / 1000 | 0);
	        var bY = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var nX = (this.p1OldX * this.nWidth / 1000 | 0) - (nW / 2 | 0);
	        var nY = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(nX, nY, nW, nH);
	        nX = (this.p2OldX * this.nWidth / 1000 | 0) - (nW / 2 | 0);
	        nY = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(nX, nY, nW, nH);
	        this.MoveBall();
	        nX = (this.p1X * this.nWidth / 1000 | 0) - (nW / 2 | 0);
	        nY = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.slimeColours[this.p1Col]);
	        this.screen.fillArc(nX, nY, nW, 2 * nH, 0, 180);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        var flyingV;
	        if (this.p1YV >= 0) {
	            this.screen.fillArc(nX, nY, (5 * nW / 8 | 0), (nH * this.p1YV / 31 | 0), 0, -150);
	        }
	        else {
	            flyingV = Math.abs(this.p1YV) > 31 ? 31 : Math.abs(this.p1YV);
	            this.screen.fillArc(nX, nY, (5 * nW / 8 | 0), (nH * flyingV / 31 | 0), 0, 150);
	        }
	        var ex = this.p1X + 38;
	        var ey = this.p1Y - 60;
	        nX = (ex * this.nWidth / 1000 | 0);
	        nY = (7 * this.nHeight / 10 | 0) - (ey * this.nHeight / 1000 | 0);
	        var dx = nX - bX;
	        var dy = nY - bY;
	        var rad = (Math.sqrt((dx * dx + dy * dy)) | 0);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillOval(nX - nEW, nY - nEH, nEW, nEH);
	        if (rad > 0) {
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillOval(nX - (4 * dx / rad | 0) - (3 * nEW / 4 | 0), nY - (4 * dy / rad | 0) - (3 * nEH / 4 | 0), (nEW / 2 | 0), (nEH / 2 | 0));
	        }
	        nX = (this.p2X * this.nWidth / 1000 | 0) - (nW / 2 | 0);
	        nY = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.slimeColours[this.p2Col]);
	        this.screen.fillArc(nX, nY, nW, 2 * nH, 0, 180);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        if (this.p2YV >= 0) {
	            this.screen.fillArc(nX + (3 * nW / 8 | 0), nY, (5 * nW / 8 | 0), (nH * this.p2YV / 31 | 0), -30, -150);
	        }
	        else {
	            flyingV = Math.abs(this.p2YV) > 31 ? 31 : Math.abs(this.p2YV);
	            this.screen.fillArc(nX + (3 * nW / 8 | 0), nY, (5 * nW / 8 | 0), (nH * flyingV / 31 | 0), 30, 150);
	        }
	        ex = this.p2X - 18;
	        ey = this.p2Y - 60;
	        nX = (ex * this.nWidth / 1000 | 0);
	        nY = (7 * this.nHeight / 10 | 0) - (ey * this.nHeight / 1000 | 0);
	        dx = nX - bX;
	        dy = nY - bY;
	        rad = (Math.sqrt((dx * dx + dy * dy)) | 0);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillOval(nX - nEW, nY - nEH, nEW, nEH);
	        if (rad > 0) {
	            this.screen.setColor(shims_1.Color.fromString("black"));
	            this.screen.fillOval(nX - (4 * dx / rad | 0) - (3 * nEW / 4 | 0), nY - (4 * dy / rad | 0) - (3 * nEH / 4 | 0), (nEW / 2 | 0), (nEH / 2 | 0));
	        }
	        var i;
	        if (this.nScore > 8) {
	            nX = (this.p1X * this.nWidth / 1000 | 0);
	            nY = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            nW = (this.nWidth / 20 | 0);
	            nH = (this.nHeight / 20 | 0);
	            for (i = 0; i < 3; ++i) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(nX, nY + i, nW, nH, -30, -150);
	            }
	        }
	        else if (this.nScore < 2) {
	            nW = (this.nWidth / 20 | 0);
	            nH = (this.nHeight / 20 | 0);
	            nX = (this.p2X * this.nWidth / 1000 | 0) - nW;
	            nY = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            for (i = 0; i < 3; ++i) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(nX, nY + i, nW, nH, -10, -150);
	            }
	        }
	    }
	    MoveBall() {
	        var nW = (30 * this.nHeight / 1000 | 0);
	        var nX = (this.ballOldX * this.nWidth / 1000 | 0);
	        var nY = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(nX - nW, nY - nW, nW * 2, nW * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var dx = (this.ballX - this.p1X) * 2;
	            var dy = this.ballY - this.p1Y;
	            var radius_sq = dx * dx + dy * dy;
	            var dVX = this.ballVX - this.p1XV;
	            var dVY = this.ballVY - this.p1YV;
	            var rad;
	            var dot;
	            if (dy > 0 && radius_sq < 15625 && radius_sq > 25) {
	                rad = (Math.sqrt(radius_sq) | 0);
	                dot = ((dx * dVX + dy * dVY) / rad | 0);
	                this.ballX = this.p1X + (dx * 63 / rad | 0);
	                this.ballY = this.p1Y + (dy * 125 / rad | 0);
	                if (dot <= 0) {
	                    this.ballVX += this.p1XV - (2 * dx * dot / rad | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p1YV - (2 * dy * dot / rad | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	            }
	            dx = (this.ballX - this.p2X) * 2;
	            dy = this.ballY - this.p2Y;
	            radius_sq = dx * dx + dy * dy;
	            dVX = this.ballVX - this.p2XV;
	            dVY = this.ballVY - this.p2YV;
	            if (dy > 0 && radius_sq < 15625 && radius_sq > 25) {
	                rad = (Math.sqrt(radius_sq) | 0);
	                dot = ((dx * dVX + dy * dVY) / rad | 0);
	                this.ballX = this.p2X + (dx * 63 / rad | 0);
	                this.ballY = this.p2Y + (dy * 125 / rad | 0);
	                if (dot <= 0) {
	                    this.ballVX += this.p2XV - (2 * dx * dot / rad | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p2YV - (2 * dy * dot / rad | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballY > 985) {
	                this.ballY = 985;
	                this.ballVY = -this.ballVY;
	            }
	            if (this.ballX > 480 && this.ballX < 520 && this.ballY < 140) {
	                if (this.ballVY < 0 && this.ballY > 130) {
	                    this.ballVY *= -1;
	                    this.ballY = 130;
	                }
	                else if (this.ballX < 500) {
	                    this.ballX = 480;
	                    this.ballVX = this.ballVX < 0 ? this.ballVX : -this.ballVX;
	                }
	                else {
	                    this.ballX = 520;
	                    this.ballVX = this.ballVX > 0 ? this.ballVX : -this.ballVX;
	                }
	            }
	        }
	        nX = (this.ballX * this.nWidth / 1000 | 0);
	        nY = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("yellow"));
	        this.screen.fillOval(nX - nW, nY - nW, nW * 2, nW * 2);
	    }
	    drawTime() {
	        var fm = this.screen.getFontMetrics();
	        this.msec = this.minute = this.sec = 0;
	        this.elapsTime = shims_1.System.currentTimeMillis() - this.currTime;
	        this.sec = Math.round(this.elapsTime / 1000);
	        this.msec = this.elapsTime % 1000;
	        this.minute = Math.round(this.sec / 60);
	        this.sec %= 60;
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), fm.stringWidth(this.minute + ":" + this.sec + ":" + this.msec), (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("black"));
	        this.screen.drawString(this.minute + ":" + this.sec + ":" + this.msec, 0, (9 * this.nHeight / 10 | 0));
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    DoFatality() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.repaint();
	            this.p1XV = this.p2XV = 0;
	            this.ballY = 2000;
	            this.ballOldX = this.ballX;
	            this.ballOldY = this.ballY;
	            this.p1YV = this.p2YV = -1;
	            this.p1OldX = this.p1X;
	            this.p2OldX = this.p2X;
	            while ((this.p1YV !== 0 || this.p2YV !== 0)) {
	                this.ballVY = 1;
	                this.p1OldY = this.p1Y;
	                this.p2OldY = this.p2Y;
	                this.MoveSlimers();
	                this.DrawSlimers();
	                if (this.gameThread != null) {
	                    try {
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var2) {
	                    }
	                    ;
	                }
	            }
	            ;
	            for (var i = 0; i < 5; ++i) {
	                if (this.nScore === 0) {
	                    this.p2YV = 31;
	                }
	                else {
	                    this.p1YV = 31;
	                }
	                while ((this.p1YV !== 0 || this.p2YV !== 0)) {
	                    this.ballVY = 1;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldY = this.p2Y;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    if (this.gameThread != null) {
	                        try {
	                            yield shims_1.Thread.sleep(20);
	                        }
	                        catch (var3) {
	                        }
	                        ;
	                    }
	                }
	                ;
	            }
	        });
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Slime2P;


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class Slime2P2 extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.topScore = 10;
	        this.slimeColText = ["Team Slimonds ", "Team Green Magic ", "The Golden Boyz ", "Gaw\'s Troop ", "The Masters "];
	        this.frenzyCol = 0;
	        this.scoringRunForSuper = 12;
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.nScore = 0;
	        this.nPointsScored = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p3X = 0;
	        this.p4X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p3Y = 0;
	        this.p4Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p3Col = 0;
	        this.p4Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p3OldX = 0;
	        this.p4OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p3OldY = 0;
	        this.p4OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p3XV = 0;
	        this.p4XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.p3YV = 0;
	        this.p4YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.p3Blink = 0;
	        this.p4Blink = 0;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.fP3Touched = false;
	        this.fP4Touched = false;
	        this.fEndGame = false;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.p2Col = this.p3Col = 1;
	        this.p1Col = this.p4Col = 0;
	        this.slimeColours = [shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black")];
	    }
	    DoFatality() {
	    }
	    DrawSlimers() {
	        var var1 = (this.nWidth / 10 | 0);
	        var var2 = (this.nHeight / 10 | 0);
	        var var3 = (this.nWidth / 50 | 0);
	        var var4 = (this.nHeight / 25 | 0);
	        var var5 = (this.ballX * this.nWidth / 1000 | 0);
	        var var6 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var var7 = (this.p1OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var var8 = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7, var8, var1, var2);
	        var7 = (this.p4OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p4OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7, var8, var1, var2);
	        var7 = (this.p2OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7, var8, var1, var2);
	        var7 = (this.p3OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p3OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7, var8, var1, var2);
	        this.MoveBall();
	        var7 = (this.p1X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.scoringRun <= -12 ? this.slimeColours[this.frenzyCol = (this.frenzyCol + 1) % this.slimeColours.length] : this.slimeColours[this.p1Col]);
	        this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	        var var9 = this.p1X + 38;
	        var var10 = this.p1Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var var11 = var7 - var5;
	        var var12 = var8 - var6;
	        var var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var var14 = Math.random() < 0.01;
	        if (var14) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var7 = (this.p4X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p4Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.scoringRun <= -12 ? this.slimeColours[this.frenzyCol = (this.frenzyCol + 1) % this.slimeColours.length] : this.slimeColours[this.p1Col]);
	        this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	        var9 = this.p4X + 38;
	        var10 = this.p4Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var11 = var7 - var5;
	        var12 = var8 - var6;
	        var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var14 = Math.random() < 0.01;
	        if (var14) {
	            this.p4Blink = 5;
	        }
	        if (this.p4Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	            }
	        }
	        else {
	            --this.p4Blink;
	        }
	        var7 = (this.p2X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.scoringRun >= 12 ? this.slimeColours[this.frenzyCol = (this.frenzyCol + 1) % this.slimeColours.length] : this.slimeColours[this.p2Col]);
	        this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	        var9 = this.p2X - 18;
	        var10 = this.p2Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var11 = var7 - var5;
	        var12 = var8 - var6;
	        var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var14 = Math.random() < 0.01;
	        if (var14) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(var14 ? shims_1.Color.fromString("gray") : shims_1.Color.fromString("white"));
	            this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        var7 = (this.p3X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p3Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.scoringRun >= 12 ? this.slimeColours[this.frenzyCol = (this.frenzyCol + 1) % this.slimeColours.length] : this.slimeColours[this.p2Col]);
	        this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	        var9 = this.p3X - 18;
	        var10 = this.p3Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var11 = var7 - var5;
	        var12 = var8 - var6;
	        var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var14 = Math.random() < 0.01;
	        if (var14) {
	            this.p3Blink = 5;
	        }
	        if (this.p3Blink === 0) {
	            this.screen.setColor(var14 ? shims_1.Color.fromString("gray") : shims_1.Color.fromString("white"));
	            this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	            }
	        }
	        else {
	            --this.p3Blink;
	        }
	        var var15;
	        var var16;
	        var var17;
	        var var18;
	        var var19;
	        if (this.nScore > 8) {
	            var15 = (this.p1X * this.nWidth / 1000 | 0);
	            var16 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            var17 = (this.nWidth / 20 | 0);
	            var18 = (this.nHeight / 20 | 0);
	            var19 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(var15, var16 + var19, var17, var18, -30, -150);
	                ++var19;
	            } while ((var19 < 3));
	            var15 = (this.p4X * this.nWidth / 1000 | 0);
	            var16 = (7 * this.nHeight / 10 | 0) - ((this.p4Y - 40) * this.nHeight / 1000 | 0);
	            var17 = (this.nWidth / 20 | 0);
	            var18 = (this.nHeight / 20 | 0);
	            var19 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(var15, var16 + var19, var17, var18, -30, -150);
	                ++var19;
	            } while ((var19 < 3));
	        }
	        else {
	            if (this.nScore < 2) {
	                var15 = (this.nWidth / 20 | 0);
	                var16 = (this.nHeight / 20 | 0);
	                var17 = (this.p2X * this.nWidth / 1000 | 0) - var15;
	                var18 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	                var19 = 0;
	                do {
	                    this.screen.setColor(shims_1.Color.fromString("black"));
	                    this.screen.drawArc(var17, var18 + var19, var15, var16, -10, -150);
	                    ++var19;
	                } while ((var19 < 3));
	                var15 = (this.nWidth / 20 | 0);
	                var16 = (this.nHeight / 20 | 0);
	                var17 = (this.p3X * this.nWidth / 1000 | 0) - var15;
	                var18 = (7 * this.nHeight / 10 | 0) - ((this.p3Y - 40) * this.nHeight / 1000 | 0);
	                var19 = 0;
	                do {
	                    this.screen.setColor(shims_1.Color.fromString("black"));
	                    this.screen.drawArc(var17, var18 + var19, var15, var16, -10, -150);
	                    ++var19;
	                } while ((var19 < 3));
	            }
	        }
	    }
	    DrawStatus() {
	        var var1 = this.screen;
	        var var2 = (this.nHeight / 20 | 0);
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var var3 = this.screen.getFontMetrics();
	        var var4 = (this.nWidth / 2 | 0) + ((this.nScore - 5) * this.nWidth / 24 | 0);
	        var var5 = "Points: " + this.nPointsScored + "   Elapsed: " + this.MakeTime(this.gameTime);
	        var var6 = var3.stringWidth(var5);
	        var1.fillRect(var4 - (var6 / 2 | 0) - 5, 0, var6 + 10, var2 + 22);
	        var1.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(var5, var4 - (var6 / 2 | 0), var3.getAscent() + 20);
	    }
	    MakeTime(var1) {
	        var var3 = Math.round(var1 / 10) % 100;
	        var var5 = Math.round(var1 / 1000) % 60;
	        var var7 = Math.round(var1 / 60000) % 60;
	        var var9 = Math.round(var1 / 3600000);
	        var var11 = "";
	        if (var9 < 10) {
	            var11 = var11 + "0";
	        }
	        var11 = var11 + var9;
	        var11 = var11 + ":";
	        if (var7 < 10) {
	            var11 = var11 + "0";
	        }
	        var11 = var11 + var7;
	        var11 = var11 + ":";
	        if (var5 < 10) {
	            var11 = var11 + "0";
	        }
	        var11 = var11 + var5;
	        var11 = var11 + ":";
	        if (var3 < 10) {
	            var11 = var11 + "0";
	        }
	        var11 = var11 + var3;
	        return var11;
	    }
	    MoveBall() {
	        var var1 = (30 * this.nHeight / 1000 | 0);
	        var var2 = (this.ballOldX * this.nWidth / 1000 | 0);
	        var var3 = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	        this.ballY += --this.ballVY;
	        this.ballX = ((this.ballX + 1.5 * this.ballVX) | 0);
	        if (!this.fEndGame) {
	            var var4 = (this.ballX - this.p1X) * 2;
	            var var5 = this.ballY - this.p1Y;
	            var var6 = var4 * var4 + var5 * var5;
	            var var7 = this.ballVX - this.p1XV;
	            var var8 = this.ballVY - this.p1YV;
	            var var9;
	            var var10;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p1X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p1Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    this.ballVX += this.p1XV - (2 * var4 * var10 / var9 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p1YV - (2 * var5 * var10 / var9 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	                if (this.TouchSlime1 != null) {
	                    this.TouchSlime1.play();
	                }
	            }
	            var4 = (this.ballX - this.p4X) * 2;
	            var5 = this.ballY - this.p4Y;
	            var6 = var4 * var4 + var5 * var5;
	            var7 = this.ballVX - this.p4XV;
	            var8 = this.ballVY - this.p4YV;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p4X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p4Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    this.ballVX += this.p4XV - (2 * var4 * var10 / var9 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p4YV - (2 * var5 * var10 / var9 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP4Touched = true;
	                if (this.TouchSlime1 != null) {
	                    this.TouchSlime1.play();
	                }
	            }
	            var4 = (this.ballX - this.p2X) * 2;
	            var5 = this.ballY - this.p2Y;
	            var6 = var4 * var4 + var5 * var5;
	            var7 = this.ballVX - this.p2XV;
	            var8 = this.ballVY - this.p2YV;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p2X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p2Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    this.ballVX += this.p2XV - (2 * var4 * var10 / var9 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p2YV - (2 * var5 * var10 / var9 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	                if (this.TouchSlime2 != null) {
	                    this.TouchSlime2.play();
	                }
	            }
	            var4 = (this.ballX - this.p3X) * 2;
	            var5 = this.ballY - this.p3Y;
	            var6 = var4 * var4 + var5 * var5;
	            var7 = this.ballVX - this.p3XV;
	            var8 = this.ballVY - this.p3YV;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p3X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p3Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    this.ballVX += this.p3XV - (2 * var4 * var10 / var9 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p3YV - (2 * var5 * var10 / var9 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP3Touched = true;
	                if (this.TouchSlime2 != null) {
	                    this.TouchSlime2.play();
	                }
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 480 && this.ballX < 520 && this.ballY < 140) {
	                if (this.ballVY < 0 && this.ballY > 130) {
	                    this.ballVY *= -1;
	                    this.ballY = 130;
	                }
	                else if (this.ballX < 500) {
	                    this.ballX = 480;
	                    this.ballVX = this.ballVX >= 0 ? -this.ballVX : this.ballVX;
	                }
	                else {
	                    this.ballX = 520;
	                    this.ballVX = this.ballVX <= 0 ? -this.ballVX : this.ballVX;
	                }
	            }
	        }
	        var2 = (this.ballX * this.nWidth / 1000 | 0);
	        var3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("yellow"));
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	    }
	    MoveSlimers() {
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 445) {
	            this.p1X = 445;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.scoringRun <= -12 ? 4 : 2;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p4X += this.p4XV;
	        if (this.p4X < 50) {
	            this.p4X = 50;
	        }
	        if (this.p4X > 445) {
	            this.p4X = 445;
	        }
	        if (this.p4YV !== 0) {
	            this.p4Y += this.p4YV -= this.scoringRun <= -12 ? 4 : 2;
	            if (this.p4Y < 0) {
	                this.p4Y = 0;
	                this.p4YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 555) {
	            this.p2X = 555;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.scoringRun >= 12 ? 4 : 2;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	        this.p3X += this.p3XV;
	        if (this.p3X > 950) {
	            this.p3X = 950;
	        }
	        if (this.p3X < 555) {
	            this.p3X = 555;
	        }
	        if (this.p3YV !== 0) {
	            this.p3Y += this.p3YV -= this.scoringRun >= 12 ? 4 : 2;
	            if (this.p3Y < 0) {
	                this.p3Y = 0;
	                this.p3YV = 0;
	            }
	        }
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(var1, var2) {
	        if (((typeof var1 === 'string') || var1 === null) && ((typeof var2 === 'number') || var2 === null)) {
	            return (() => {
	                var var3 = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var3.getHeight() * (var2 + 1) + 10);
	            })();
	        }
	        else if (var1 === undefined && var2 === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    drawScores() {
	        var var1 = this.screen;
	        var var2 = (this.nHeight / 20 | 0);
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var1.fillRect(0, 0, this.nWidth, var2 + 22);
	        var var4;
	        for (var var3 = 0; var3 < this.nScore; ++var3) {
	            var4 = ((var3 + 1) * this.nWidth / 24 | 0);
	            var1.setColor(this.slimeColours[this.p1Col]);
	            var1.fillOval(var4, 20, var2, var2);
	            var1.setColor(shims_1.Color.fromString("white"));
	            var1.drawOval(var4, 20, var2, var2);
	        }
	        for (var4 = 0; var4 < 10 - this.nScore; ++var4) {
	            var var5 = this.nWidth - ((var4 + 1) * this.nWidth / 24 | 0) - var2;
	            var1.setColor(this.slimeColours[this.p2Col]);
	            var1.fillOval(var5, 20, var2, var2);
	            var1.setColor(shims_1.Color.fromString("white"));
	            var1.drawOval(var5, 20, var2, var2);
	        }
	    }
	    handleEvent(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((var1.id)) {
	                case 401:
	                case 403:
	                    if (!this.fEndGame) {
	                        switch ((var1.key)) {
	                            case 52:
	                                this.p3XV = this.scoringRun <= -12 ? -16 : -8;
	                                break;
	                            case 53:
	                            case 1005:
	                                if (this.fCanChangeCol) {
	                                    do {
	                                        this.p2Col = this.p3Col = this.p2Col !== 4 ? this.p2Col + 1 : 0;
	                                    } while ((this.p2Col === this.p1Col));
	                                    this.drawScores();
	                                    break;
	                                }
	                            case 32:
	                                this.mousePressed = true;
	                                break;
	                            case 54:
	                                this.p3XV = this.scoringRun <= -12 ? 16 : 8;
	                                break;
	                            case 56:
	                                if (this.p3Y === 0) {
	                                    this.p3YV = this.scoringRun <= -12 ? 45 : 31;
	                                }
	                                break;
	                            case 65:
	                            case 97:
	                                this.p1XV = this.scoringRun <= -12 ? -16 : -8;
	                                break;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.scoringRun <= -12 ? 16 : 8;
	                                break;
	                            case 73:
	                            case 105:
	                                if (this.p4Y === 0) {
	                                    this.p4YV = this.scoringRun >= 12 ? 45 : 31;
	                                }
	                                break;
	                            case 74:
	                            case 106:
	                                this.p4XV = this.scoringRun >= 12 ? -16 : -8;
	                                break;
	                            case 75:
	                            case 83:
	                            case 107:
	                            case 115:
	                                if (this.fCanChangeCol) {
	                                    do {
	                                        this.p1Col = this.p4Col = this.p1Col !== 4 ? this.p1Col + 1 : 0;
	                                    } while ((this.p1Col === this.p2Col));
	                                    this.drawScores();
	                                }
	                                break;
	                            case 76:
	                            case 108:
	                                this.p4XV = this.scoringRun >= 12 ? 16 : 8;
	                                break;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.scoringRun <= -12 ? 45 : 31;
	                                }
	                                break;
	                            case 1004:
	                                if (this.p2Y === 0) {
	                                    this.p2YV = this.scoringRun >= 12 ? 45 : 31;
	                                }
	                                break;
	                            case 1006:
	                                this.p2XV = this.scoringRun >= 12 ? -16 : -8;
	                                break;
	                            case 1007:
	                                this.p2XV = this.scoringRun >= 12 ? 16 : 8;
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((var1.key)) {
	                        case 52:
	                            if (this.p3XV < 0) {
	                                this.p3XV = 0;
	                            }
	                            return false;
	                        case 54:
	                            if (this.p3XV > 0) {
	                                this.p3XV = 0;
	                            }
	                            return false;
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                            if (this.p4XV < 0) {
	                                this.p4XV = 0;
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                            if (this.p4XV > 0) {
	                                this.p4XV = 0;
	                            }
	                            return false;
	                        case 1006:
	                            if (this.p2XV < 0) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 1007:
	                            if (this.p2XV > 0) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.nScore = 5;
	                        this.nPointsScored = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p3X = 600;
	                        this.p3Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p4X = 400;
	                        this.p4Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.p3XV = 0;
	                        this.p3YV = 0;
	                        this.p4XV = 0;
	                        this.p4YV = 0;
	                        this.ballX = 200;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.promptMsg = "";
	                        this.repaint();
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Modified by: Brad Neish, Eddie Rabenda, Chris Jochem, and Brian Pegram.");
	            }
	            return false;
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.nScore = 5;
	        this.TouchSlime1 = this.getAudioClip(this.getCodeBase(), "exclamation.au");
	        this.TouchSlime2 = this.getAudioClip(this.getCodeBase(), "doiinggg.au");
	        this.image = this.getImage(this.getCodeBase(), "slimevolleyball.jpg");
	        this.ScoreSound = this.getAudioClip(this.getCodeBase(), "down.au");
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.promptMsg = "Click the mouse to play...";
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    paint(var1) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var1.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        var1.setColor(shims_1.Color.fromString("gray"));
	        var1.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        var1.setColor(shims_1.Color.fromString("white"));
	        var1.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	        this.drawScores();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            this.image.getHeight(this);
	            var1.drawImage(this.image, 0, 0, this);
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.p1Col = 0;
	            this.p2Col = 1;
	            this.scoringRun = 0;
	            this.fP1Touched = this.fP2Touched = false;
	            this.nPointsScored = 0;
	            this.startTime = shims_1.System.currentTimeMillis();
	            while ((this.nScore !== 0 && this.nScore !== 10 && this.gameThread != null)) {
	                this.gameTime = shims_1.System.currentTimeMillis() - this.startTime;
	                this.p1OldX = this.p1X;
	                this.p1OldY = this.p1Y;
	                this.p2OldX = this.p2X;
	                this.p2OldY = this.p2Y;
	                this.p3OldX = this.p3X;
	                this.p3OldY = this.p3Y;
	                this.p4OldX = this.p4X;
	                this.p4OldY = this.p4Y;
	                this.ballOldX = this.ballX;
	                this.ballOldY = this.ballY;
	                this.MoveSlimers();
	                this.DrawSlimers();
	                this.DrawStatus();
	                if (this.ballY < 35) {
	                    if (this.ScoreSound != null) {
	                        this.ScoreSound.play();
	                    }
	                    var var1 = shims_1.System.currentTimeMillis();
	                    ++this.nPointsScored;
	                    this.nScore += this.ballX <= 500 ? -1 : 1;
	                    if (this.ballX <= 500 && this.scoringRun >= 0) {
	                        ++this.scoringRun;
	                    }
	                    else if (this.ballX > 500 && this.scoringRun <= 0) {
	                        --this.scoringRun;
	                    }
	                    else if (this.ballX <= 500 && this.scoringRun <= 0) {
	                        this.scoringRun = 1;
	                    }
	                    else if (this.ballX > 500 && this.scoringRun >= 0) {
	                        this.scoringRun = -1;
	                    }
	                    this.promptMsg = this.ballX <= 500 ? this.slimeColText[this.p2Col] : this.slimeColText[this.p1Col];
	                    if (!this.fP1Touched && !this.fP2Touched && !this.fP3Touched && !this.fP4Touched) {
	                        this.promptMsg = "What can I say?";
	                    }
	                    else if ((this.scoringRun < 0 ? -this.scoringRun : this.scoringRun) === 12) {
	                        this.promptMsg = this.promptMsg + "is on fire!";
	                    }
	                    else if ((this.ballX <= 500 || !this.fP1Touched && !this.fP4Touched || this.fP2Touched || this.fP3Touched) && (this.ballX > 500 || this.fP1Touched || this.fP4Touched || !this.fP2Touched && !this.fP3Touched)) {
	                        if (this.ballX > 500 && !this.fP1Touched && !this.fP4Touched && (this.fP2Touched || this.fP3Touched) || this.ballX <= 500 && (this.fP1Touched || this.fP4Touched) && !this.fP2Touched && !this.fP3Touched) {
	                            this.promptMsg = this.promptMsg + "dies laughing! :P";
	                        }
	                        else {
	                            switch ((this.nScore)) {
	                                case 0:
	                                case 10:
	                                    if (this.nPointsScored === 5) {
	                                        this.promptMsg = this.promptMsg + "Wins with a QUICK FIVE!!!";
	                                    }
	                                    else if (this.scoringRun === 8) {
	                                        this.promptMsg = this.promptMsg + "Wins with a BIG NINE!!!";
	                                    }
	                                    else {
	                                        this.promptMsg = this.promptMsg + "Wins!!!";
	                                    }
	                                    break;
	                                case 1:
	                                case 2:
	                                case 3:
	                                case 7:
	                                case 8:
	                                case 9:
	                                default:
	                                    this.promptMsg = this.promptMsg + "Scores!";
	                                    break;
	                                case 4:
	                                    this.promptMsg = this.promptMsg + (this.ballX >= 500 ? "Scores!" : "takes the lead!!");
	                                    break;
	                                case 5:
	                                    this.promptMsg = this.promptMsg + "Equalizes!";
	                                    break;
	                                case 6:
	                                    this.promptMsg = this.promptMsg + (this.ballX <= 500 ? "Scores!" : "takes the lead!!");
	                            }
	                        }
	                    }
	                    else {
	                        this.promptMsg = this.promptMsg + "aces the serve!";
	                    }
	                    this.fCanChangeCol = false;
	                    var var3 = this.nScore !== 0 && this.nScore !== 10;
	                    var var4 = this.ballX;
	                    this.drawPrompt();
	                    if (this.gameThread != null) {
	                        try {
	                            yield shims_1.Thread.sleep(2500);
	                        }
	                        catch (var6) {
	                        }
	                        ;
	                    }
	                    this.promptMsg = "";
	                    this.drawPrompt();
	                    this.fCanChangeCol = true;
	                    if (var3) {
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.p3X = 600;
	                        this.p3Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p4X = 400;
	                        this.p4Y = 0;
	                        this.ballX = var4 >= 500 ? 200 : 800;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.fP1Touched = this.fP2Touched = false;
	                        this.repaint();
	                    }
	                    this.startTime += shims_1.System.currentTimeMillis() - var1;
	                }
	                if (this.gameThread != null) {
	                    try {
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var5) {
	                    }
	                    ;
	                }
	            }
	            ;
	            this.fEndGame = true;
	            this.fInPlay = false;
	            this.promptMsg = "Click the mouse to play...";
	            this.repaint();
	        });
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Slime2P2;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class slime extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 600;
	        this.recommended_height = 350;
	        this.field_rn_slime_px_3 = new Array(3);
	        this.field_rn_slime_py_4 = new Array(3);
	        this.pvx = new Array(3);
	        this.pvy = new Array(3);
	        this.score = new Array(0);
	        this.jumpFlag = new Array(0);
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.XSIZE = 0;
	        this.YSIZE = 0;
	        this.SLIMESIZE = 0;
	        this.BALLSIZE = 0;
	        this.NETSIZEX = 0;
	        this.NETSIZEY = 0;
	        this.GROUNDSIZE = 0;
	        this.EYESIZE = 0;
	        this.BLACKEYESIZE = 0;
	        this.WINSCORE = 0;
	        this.field_rn_slime_G_2 = 0;
	        this.comLevel = 0;
	        this.paintFlag = 0;
	        this.comserv = 0;
	        this.field_rn_slime_bx_5 = 0;
	        this.field_rn_slime_by_6 = 0;
	        this.bvx = 0;
	        this.bvy = 0;
	        this.service = 0;
	        this.moveX = 0;
	        this.jump = 0;
	        this.comjump = 0;
	        this.mDown = 0;
	    }
	    init() {
	        this.XSIZE = 600;
	        this.YSIZE = 400;
	        this.SLIMESIZE = 35;
	        this.BALLSIZE = 10;
	        this.NETSIZEX = 6;
	        this.NETSIZEY = 50;
	        this.GROUNDSIZE = 50;
	        this.EYESIZE = 8;
	        this.BLACKEYESIZE = 4;
	        this.WINSCORE = 6;
	        this.field_rn_slime_G_2 = 0.05;
	        this.mDown = 0;
	        this.paintFlag = 0;
	        this.comserv = 0;
	        this.gra = this.getGraphics();
	    }
	    paint(var1) {
	        switch ((this.paintFlag)) {
	            case 1:
	                this.ShowTitle();
	                return;
	            case 2:
	                this.DrawAll();
	                this.DrawScore();
	                return;
	            default:
	        }
	    }
	    start() {
	        if (this.field_rn_slime_th_1 == null) {
	            this.field_rn_slime_th_1 = new shims_1.Thread(this);
	            this.field_rn_slime_th_1.start();
	        }
	    }
	    stop() {
	        if (this.field_rn_slime_th_1 != null) {
	            this.field_rn_slime_th_1.stop();
	            this.field_rn_slime_th_1 = null;
	        }
	    }
	    keyDown(var1, var2) {
	        if (var2 !== 1006 && var2 !== 52) {
	            if (var2 === 1007 || var2 === 54) {
	                this.moveX = 1;
	            }
	        }
	        else {
	            this.moveX = -1;
	        }
	        if (var2 === 32) {
	            this.jump = 1;
	        }
	        return true;
	    }
	    keyUp(var1, var2) {
	        if (var2 === 1006 || var2 === 1007 || var2 === 52 || var2 === 54) {
	            this.moveX = 0;
	        }
	        if (var2 === 32) {
	            this.jump = 0;
	        }
	        return true;
	    }
	    mouseUp(var1, var2, var3) {
	        this.mDown = 1;
	        return true;
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            yield this.Setup();
	        });
	    }
	    Setup() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var2 = false;
	            var var3;
	            do {
	                this.paintFlag = 1;
	                this.ShowTitle();
	                yield this.WaitClickMouse();
	                this.paintFlag = 0;
	                this.comLevel = this.SelectComLevel();
	                var var1 = yield this.Main();
	                var3 = yield this.ShowWinner(var1);
	            } while ((var3 === 0));
	        });
	    }
	    ShowTitle() {
	        this.DrawBG();
	        this.gra.setColor(shims_1.Color.fromString("white"));
	        this.gra.setFont(new shims_1.Font("TimesRoman", 1, 64));
	        this.gra.drawString("Slime Volley Ball", 20, 150);
	        this.gra.setFont(new shims_1.Font("TimesRoman", 1, 32));
	        this.gra.drawString("CLICK MOUSE", 350, 250);
	    }
	    WaitClickMouse() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.mDown = 0;
	            try {
	                do {
	                    yield shims_1.Thread.sleep(1);
	                } while ((this.mDown === 0));
	            }
	            catch (var1) {
	            }
	            ;
	            this.mDown = 0;
	        });
	    }
	    SelectComLevel() {
	        return 1;
	    }
	    ShowWinner(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.gra.setFont(new shims_1.Font("TimesRoman", 1, 50));
	            this.gra.setColor(shims_1.Color.fromString("white"));
	            var var2;
	            if (var1 === 1) {
	                var2 = 2;
	                this.gra.drawString("You Win!", 200, 100);
	            }
	            else {
	                var2 = 1;
	                this.gra.drawString("You lose.", 200, 100);
	            }
	            for (var var3 = 0; var3 < 3; ++var3) {
	                this.pvy[var1] = -80.0 * this.field_rn_slime_G_2;
	                this.field_rn_slime_py_4[var1] = (this.YSIZE - this.GROUNDSIZE);
	                do {
	                    this.gra.setColor(new shims_1.Color(100, 100, 255));
	                    this.gra.fillRect((this.field_rn_slime_px_3[var1] | 0) - this.SLIMESIZE, (this.field_rn_slime_py_4[var1] | 0) - this.SLIMESIZE, this.SLIMESIZE * 2, this.SLIMESIZE);
	                    this.field_rn_slime_py_4[var1] += this.pvy[var1];
	                    this.pvy[var1] += this.field_rn_slime_G_2 * 2.0;
	                    this.DrawSlime(var2);
	                    try {
	                        yield shims_1.Thread.sleep(5);
	                    }
	                    catch (var4) {
	                    }
	                    ;
	                } while ((this.pvy[var1] < 80.0 * this.field_rn_slime_G_2));
	            }
	            this.gra.setColor(new shims_1.Color(100, 100, 255));
	            this.gra.fillRect((this.field_rn_slime_px_3[var1] | 0) - this.SLIMESIZE, (this.field_rn_slime_py_4[var1] | 0) - this.SLIMESIZE, this.SLIMESIZE * 2, this.SLIMESIZE);
	            this.field_rn_slime_py_4[var1] = (this.YSIZE - this.GROUNDSIZE);
	            this.DrawSlime(var2);
	            return 1;
	        });
	    }
	    Main() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.score[1] = 0;
	            this.score[2] = 0;
	            this.service = 1;
	            this.DrawBG();
	            this.DrawScore();
	            var var1;
	            do {
	                if (this.service === 2) {
	                    this.comserv = ((Math.random() * 4.0 + 1.0) | 0);
	                }
	                var1 = yield this.Game(this.service);
	                ++this.score[var1];
	                this.DrawScore();
	                if (var1 === 1) {
	                    this.DrawSlime(2);
	                }
	                else if (var1 === 2) {
	                    this.DrawSlime(1);
	                }
	                try {
	                    yield shims_1.Thread.sleep(2000);
	                }
	                catch (var2) {
	                }
	                ;
	                this.service = var1;
	            } while ((this.score[1] !== this.WINSCORE && this.score[2] !== this.WINSCORE));
	            return var1;
	        });
	    }
	    Game(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.field_rn_slime_px_3[1] = (this.SLIMESIZE + this.SLIMESIZE);
	            this.field_rn_slime_px_3[2] = (this.XSIZE - this.SLIMESIZE - this.SLIMESIZE);
	            this.field_rn_slime_py_4[1] = (this.YSIZE - this.GROUNDSIZE);
	            this.field_rn_slime_py_4[2] = (this.YSIZE - this.GROUNDSIZE);
	            this.pvx[1] = 0.0;
	            this.pvx[2] = 0.0;
	            this.pvy[1] = 0.0;
	            this.pvy[2] = 0.0;
	            this.jumpFlag[1] = 0;
	            this.jumpFlag[2] = 0;
	            this.field_rn_slime_bx_5 = this.field_rn_slime_px_3[var1];
	            this.field_rn_slime_by_6 = this.field_rn_slime_py_4[var1] - this.SLIMESIZE - this.SLIMESIZE;
	            this.bvx = 0.0;
	            this.bvy = -50.0 * this.field_rn_slime_G_2;
	            var var2 = 0;
	            this.DrawAll();
	            this.paintFlag = 2;
	            try {
	                yield shims_1.Thread.sleep(100);
	            }
	            catch (var4) {
	            }
	            ;
	            do {
	                try {
	                    yield shims_1.Thread.sleep(8);
	                    this.MoveBall();
	                    this.MoveSlime(1);
	                    this.MoveSlime(2);
	                    this.CheckHit();
	                    var2 = this.CheckPoint();
	                    this.DrawAll();
	                }
	                catch (var3) {
	                }
	                ;
	            } while ((var2 === 0));
	            this.paintFlag = 0;
	            return var2;
	        });
	    }
	    MoveBall() {
	        this.field_rn_slime_bx_5 += this.bvx;
	        this.field_rn_slime_by_6 += this.bvy;
	        this.bvy += this.field_rn_slime_G_2;
	        if (this.field_rn_slime_bx_5 < this.BALLSIZE) {
	            this.field_rn_slime_bx_5 = this.BALLSIZE;
	            this.bvx = -this.bvx;
	        }
	        else if (this.field_rn_slime_bx_5 > (this.XSIZE - this.BALLSIZE)) {
	            this.field_rn_slime_bx_5 = (this.XSIZE - this.BALLSIZE);
	            this.bvx = -this.bvx;
	        }
	        if (this.field_rn_slime_bx_5 > ((this.XSIZE / 2 | 0) - (this.NETSIZEX / 2 | 0) - this.BALLSIZE) && this.field_rn_slime_bx_5 < ((this.XSIZE / 2 | 0) + (this.NETSIZEX / 2 | 0) + this.BALLSIZE)) {
	            if (this.field_rn_slime_by_6 > (this.YSIZE - this.GROUNDSIZE - this.NETSIZEY)) {
	                if (this.bvx < 0.0) {
	                    this.field_rn_slime_bx_5 = ((this.XSIZE / 2 | 0) + (this.NETSIZEX / 2 | 0) + this.BALLSIZE + 1);
	                    this.bvx = -this.bvx;
	                    return;
	                }
	                if (this.bvx > 0.0) {
	                    this.field_rn_slime_bx_5 = ((this.XSIZE / 2 | 0) - (this.NETSIZEX / 2 | 0) - this.BALLSIZE - 1);
	                    this.bvx = -this.bvx;
	                    return;
	                }
	            }
	            else if (this.field_rn_slime_by_6 <= (this.YSIZE - this.GROUNDSIZE - this.NETSIZEY) && this.field_rn_slime_by_6 > (this.YSIZE - this.GROUNDSIZE - this.NETSIZEY - this.BALLSIZE)) {
	                this.field_rn_slime_by_6 = (this.YSIZE - this.GROUNDSIZE - this.NETSIZEY - this.BALLSIZE);
	                this.bvy = -Math.abs(this.bvy);
	            }
	        }
	    }
	    CheckHit() {
	        for (var var3 = 1; var3 <= 2; ++var3) {
	            if (this.field_rn_slime_by_6 <= this.field_rn_slime_py_4[var3]) {
	                var var1 = (this.field_rn_slime_px_3[var3] - this.field_rn_slime_bx_5) * (this.field_rn_slime_px_3[var3] - this.field_rn_slime_bx_5) + (this.field_rn_slime_py_4[var3] - this.field_rn_slime_by_6) * (this.field_rn_slime_py_4[var3] - this.field_rn_slime_by_6);
	                var1 = Math.sqrt(var1);
	                if (var1 <= (this.SLIMESIZE + this.BALLSIZE)) {
	                    this.HitBall(var3);
	                }
	            }
	            else if (Math.abs(this.field_rn_slime_py_4[var3] - this.field_rn_slime_by_6) < this.BALLSIZE && Math.abs(this.field_rn_slime_px_3[var3] - this.field_rn_slime_bx_5) < (this.SLIMESIZE + this.BALLSIZE)) {
	                this.HitBall2();
	            }
	        }
	    }
	    HitBall(var1) {
	        if (this.comserv !== 0) {
	            this.comserv = 0;
	        }
	        var var6 = Math.sqrt(this.bvx * this.bvx + this.bvy * this.bvy);
	        var var2 = (this.field_rn_slime_bx_5 - this.field_rn_slime_px_3[var1]) / (this.SLIMESIZE + this.BALLSIZE);
	        var var4 = (this.field_rn_slime_by_6 - this.field_rn_slime_py_4[var1]) / (this.SLIMESIZE + this.BALLSIZE);
	        this.bvx += var2 * (var6 + 80.0 * this.field_rn_slime_G_2);
	        if (this.bvx < -100.0 * this.field_rn_slime_G_2) {
	            this.bvx = -100.0 * this.field_rn_slime_G_2;
	        }
	        else if (this.bvx > 100.0 * this.field_rn_slime_G_2) {
	            this.bvx = 100.0 * this.field_rn_slime_G_2;
	        }
	        if (this.jumpFlag[var1] === 0) {
	            this.bvy = var4 * 80.0 * this.field_rn_slime_G_2;
	        }
	        else {
	            this.bvy = var4 * 10.0 * this.field_rn_slime_G_2;
	        }
	        this.field_rn_slime_bx_5 += this.bvx * 2.0;
	        this.field_rn_slime_by_6 += this.bvy * 2.0;
	    }
	    HitBall2() {
	        this.bvy = Math.abs(this.bvy);
	    }
	    CheckPoint() {
	        var var1 = 0;
	        if (this.field_rn_slime_by_6 > (this.YSIZE - this.GROUNDSIZE - this.BALLSIZE)) {
	            if (this.field_rn_slime_bx_5 < ((this.XSIZE / 2 | 0) - (this.NETSIZEX / 2 | 0))) {
	                var1 = 2;
	            }
	            else {
	                var1 = 1;
	            }
	        }
	        return var1;
	    }
	    MoveSlime(var1) {
	        var var2 = 0;
	        var var3 = 0;
	        if (this.jumpFlag[var1] === 0) {
	            if (var1 === 1) {
	                var2 = this.GetKey();
	                var3 = this.GetJump();
	            }
	            else if (var1 === 2) {
	                var2 = this.MoveCom2();
	                var3 = this.ComJump();
	            }
	            this.pvx[var1] = var2 * 1.5;
	            this.jumpFlag[var1] = var3;
	            if (var3 === 1) {
	                this.pvy[var1] = -80.0 * this.field_rn_slime_G_2;
	            }
	        }
	        this.field_rn_slime_px_3[var1] += this.pvx[var1];
	        if (var1 === 1) {
	            if (this.field_rn_slime_px_3[var1] < this.SLIMESIZE) {
	                this.field_rn_slime_px_3[var1] = this.SLIMESIZE;
	            }
	            else if (this.field_rn_slime_px_3[var1] > ((this.XSIZE / 2 | 0) - (this.NETSIZEX / 2 | 0) - this.SLIMESIZE)) {
	                this.field_rn_slime_px_3[var1] = ((this.XSIZE / 2 | 0) - (this.NETSIZEX / 2 | 0) - this.SLIMESIZE);
	            }
	        }
	        else if (var1 === 2) {
	            if (this.field_rn_slime_px_3[var1] < ((this.XSIZE / 2 | 0) + (this.NETSIZEX / 2 | 0) + this.SLIMESIZE)) {
	                this.field_rn_slime_px_3[var1] = ((this.XSIZE / 2 | 0) + (this.NETSIZEX / 2 | 0) + this.SLIMESIZE);
	            }
	            else if (this.field_rn_slime_px_3[var1] > (this.XSIZE - this.SLIMESIZE)) {
	                this.field_rn_slime_px_3[var1] = (this.XSIZE - this.SLIMESIZE);
	            }
	        }
	        if (this.jumpFlag[var1] === 1) {
	            this.field_rn_slime_py_4[var1] += this.pvy[var1];
	            this.pvy[var1] += this.field_rn_slime_G_2 * 2.0;
	            if (this.field_rn_slime_py_4[var1] >= (this.YSIZE - this.GROUNDSIZE)) {
	                this.field_rn_slime_py_4[var1] = (this.YSIZE - this.GROUNDSIZE);
	                this.jumpFlag[var1] = 0;
	            }
	        }
	    }
	    GetKey() {
	        return this.moveX;
	    }
	    GetJump() {
	        return this.jump;
	    }
	    MoveCom() {
	        var var1 = 0;
	        this.comjump = 0;
	        if (this.field_rn_slime_bx_5 < ((this.XSIZE / 2 | 0))) {
	            if (this.field_rn_slime_px_3[2] < ((this.XSIZE / 2 | 0) + (this.XSIZE / 5 | 0))) {
	                var1 = 1;
	            }
	            else if (this.field_rn_slime_px_3[2] > ((this.XSIZE / 2 | 0) + (this.XSIZE / 5 | 0))) {
	                var1 = -1;
	            }
	        }
	        if (this.field_rn_slime_bx_5 > ((this.XSIZE / 2 | 0) - this.SLIMESIZE * 3)) {
	            var var4 = this.YSIZE - this.GROUNDSIZE - this.field_rn_slime_by_6 - this.SLIMESIZE / 1.5;
	            var var6 = (Math.sqrt(this.bvy * this.bvy + 2.0 * this.field_rn_slime_G_2 * var4) - this.bvy) / this.field_rn_slime_G_2;
	            var var2 = this.field_rn_slime_bx_5 + this.bvx * var6;
	            if (var2 > this.XSIZE) {
	                var2 = 2.0 * this.XSIZE - var2;
	            }
	            if (var2 < ((this.XSIZE / 2 | 0) + (this.XSIZE / 4 | 0))) {
	                if (Math.abs(this.bvx) < 30.0 * this.field_rn_slime_G_2 && this.bvy > (8.0 + (this.field_rn_slime_py_4[2] - this.field_rn_slime_by_6) * 2.0 * this.field_rn_slime_G_2) * this.field_rn_slime_G_2 && Math.abs(this.field_rn_slime_by_6 - this.field_rn_slime_py_4[2]) > this.SLIMESIZE * 2.5) {
	                    this.comjump = 1;
	                    if (this.bvx > 20.0 * this.field_rn_slime_G_2 && this.field_rn_slime_px_3[2] < this.field_rn_slime_bx_5 - this.BALLSIZE) {
	                        var1 = 1;
	                    }
	                    else if (this.bvx < -20.0 * this.field_rn_slime_G_2 && this.field_rn_slime_px_3[2] > this.field_rn_slime_bx_5 + this.BALLSIZE) {
	                        var1 = -1;
	                    }
	                    else {
	                        var1 = 0;
	                    }
	                    if (var2 < ((this.XSIZE / 2 | 0)) && this.jumpFlag[1] === 0) {
	                        this.comjump = 0;
	                    }
	                }
	                else if (Math.abs(this.bvx) < 20.0 * this.field_rn_slime_G_2 && Math.abs(this.field_rn_slime_by_6 - this.field_rn_slime_py_4[2]) > this.SLIMESIZE * 2.5) {
	                    if (this.field_rn_slime_px_3[2] - this.BALLSIZE < this.field_rn_slime_bx_5) {
	                        var1 = 1;
	                    }
	                    else if (this.field_rn_slime_px_3[2] - this.BALLSIZE > this.field_rn_slime_bx_5) {
	                        var1 = -1;
	                    }
	                }
	                else if (this.field_rn_slime_px_3[2] - ((this.BALLSIZE / 3 | 0)) < var2) {
	                    var1 = 1;
	                }
	                else if (this.field_rn_slime_px_3[2] - ((this.BALLSIZE / 3 | 0)) > var2) {
	                    var1 = -1;
	                }
	                else {
	                    var1 = 0;
	                }
	            }
	            else if (this.field_rn_slime_px_3[2] - ((this.BALLSIZE / 2 | 0)) < var2) {
	                var1 = 1;
	            }
	            else if (this.field_rn_slime_px_3[2] - ((this.BALLSIZE / 2 | 0)) > var2) {
	                var1 = -1;
	            }
	            else {
	                var1 = 0;
	            }
	        }
	        return var1;
	    }
	    ComJump() {
	        if (this.comjump === 1) {
	            this.comjump = 0;
	            return 1;
	        }
	        else {
	            return 0;
	        }
	    }
	    DrawAll() {
	        this.DrawBG();
	        this.DrawSlime(0);
	        this.DrawBall();
	    }
	    DrawBG() {
	        var var1 = new shims_1.Color(100, 100, 255);
	        this.gra.setColor(var1);
	        this.gra.fillRect(0, 50, this.XSIZE, this.YSIZE - this.GROUNDSIZE - 50);
	        var1 = new shims_1.Color(180, 140, 160);
	        this.gra.setColor(var1);
	        this.gra.fillRect(0, this.YSIZE - this.GROUNDSIZE, this.XSIZE, this.GROUNDSIZE);
	        this.gra.setColor(shims_1.Color.fromString("white"));
	        this.gra.fillRect((this.XSIZE / 2 | 0) - (this.NETSIZEX / 2 | 0), this.YSIZE - this.GROUNDSIZE - this.NETSIZEY, this.NETSIZEX, this.NETSIZEY);
	    }
	    DrawSlime(var1) {
	        for (var var10 = 1; var10 <= 2; ++var10) {
	            var var2 = (this.field_rn_slime_px_3[var10] | 0);
	            var var3 = (this.field_rn_slime_py_4[var10] | 0);
	            if (var10 === 1) {
	                this.gra.setColor(shims_1.Color.fromString("red"));
	            }
	            else if (var10 === 2) {
	                this.gra.setColor(shims_1.Color.fromString("blue"));
	            }
	            this.gra.fillArc(var2 - this.SLIMESIZE, var3 - this.SLIMESIZE, this.SLIMESIZE * 2, this.SLIMESIZE * 2, 0, 180);
	            if (var10 === 1) {
	                var2 += (this.SLIMESIZE / 2 | 0);
	            }
	            else if (var10 === 2) {
	                var2 -= (this.SLIMESIZE / 2 | 0);
	            }
	            var3 -= (this.SLIMESIZE * 3 / 5 | 0);
	            this.gra.setColor(shims_1.Color.fromString("white"));
	            this.gra.fillArc(var2 - this.EYESIZE, var3 - this.EYESIZE, this.EYESIZE * 2, this.EYESIZE * 2, 0, 360);
	            this.gra.setColor(shims_1.Color.fromString("black"));
	            if (var1 !== var10) {
	                var var4 = this.field_rn_slime_bx_5 - var2;
	                var var6 = this.field_rn_slime_by_6 - var3;
	                var var8 = Math.sqrt(var4 * var4 + var6 * var6);
	                var2 += ((var4 * (this.BLACKEYESIZE + 1) / var8) | 0);
	                var3 += ((var6 * (this.BLACKEYESIZE + 1) / var8) | 0);
	                this.gra.fillArc(var2 - this.BLACKEYESIZE, var3 - this.BLACKEYESIZE, this.BLACKEYESIZE * 2, this.BLACKEYESIZE * 2, 0, 360);
	            }
	            else {
	                this.gra.drawLine(var2 - this.EYESIZE + 2, var3 - this.EYESIZE + 2, var2 + this.EYESIZE - 2, var3 + this.EYESIZE - 2);
	                this.gra.drawLine(var2 - this.EYESIZE + 2, var3 + this.EYESIZE - 2, var2 + this.EYESIZE - 2, var3 - this.EYESIZE + 2);
	            }
	        }
	    }
	    DrawBall() {
	        this.gra.setColor(shims_1.Color.fromString("yellow"));
	        this.gra.fillArc((this.field_rn_slime_bx_5 | 0) - this.BALLSIZE, (this.field_rn_slime_by_6 | 0) - this.BALLSIZE, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);
	    }
	    DrawScore() {
	        this.gra.setColor(new shims_1.Color(100, 100, 255));
	        this.gra.fillRect(0, 0, this.XSIZE, 50);
	        this.gra.setColor(shims_1.Color.fromString("white"));
	        this.gra.setFont(new shims_1.Font("TimesRoman", 1, 28));
	        this.gra.drawString("RED ", 30, 46);
	        this.gra.drawString("BLUE", 30 + (this.XSIZE / 2 | 0), 46);
	        this.gra.setColor(shims_1.Color.fromString("yellow"));
	        for (var var1 = 1; var1 <= this.WINSCORE; ++var1) {
	            if (this.score[1] < var1) {
	                this.gra.drawArc(80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);
	            }
	            else {
	                this.gra.fillArc(80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);
	            }
	            if (this.score[2] < var1) {
	                this.gra.drawArc((this.XSIZE / 2 | 0) + 80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);
	            }
	            else {
	                this.gra.fillArc((this.XSIZE / 2 | 0) + 80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);
	            }
	        }
	    }
	    MoveCom2() {
	        var var3 = 0;
	        var var4 = false;
	        var var23 = this.YSIZE - this.GROUNDSIZE - this.field_rn_slime_by_6 - this.SLIMESIZE;
	        var var25 = (Math.sqrt(this.bvy * this.bvy + 2.0 * this.field_rn_slime_G_2 * var23) - this.bvy) / this.field_rn_slime_G_2;
	        var var21 = this.field_rn_slime_bx_5 + this.bvx * var25;
	        if (var21 > this.XSIZE) {
	            var21 = 2.0 * this.XSIZE - var21;
	        }
	        if (var21 < 0.0) {
	            var21 = -var21;
	        }
	        var var5 = this.field_rn_slime_px_3[1];
	        var var7 = this.field_rn_slime_px_3[2];
	        var var13 = this.field_rn_slime_py_4[1];
	        var var15 = this.field_rn_slime_py_4[2];
	        var var1 = this.jumpFlag[1];
	        var var2 = this.jumpFlag[2];
	        var var29 = this.bvx;
	        var var31 = this.bvy + this.field_rn_slime_G_2 * var25;
	        var var33 = Math.sqrt(var29 * var29 * var31 * var31);
	        if (var7 < ((this.XSIZE / 2 | 0) + (this.XSIZE / 5 | 0))) {
	            var3 = 1;
	        }
	        else if (var7 > ((this.XSIZE / 2 | 0) + (this.XSIZE / 5 | 0))) {
	            var3 = -1;
	        }
	        var var9 = (this.SLIMESIZE + this.BALLSIZE) * this.bvx / (var33 + 80.0 * this.field_rn_slime_G_2);
	        if (var21 > ((this.XSIZE / 2 | 0) - this.SLIMESIZE * 2)) {
	            if (var21 > ((this.XSIZE / 2 | 0) + (this.XSIZE / 4 | 0))) {
	                if (var21 + var9 + ((this.BALLSIZE / 2 | 0)) > var7) {
	                    var3 = 1;
	                }
	                else if (var21 + var9 + ((this.BALLSIZE / 2 | 0)) < var7) {
	                    var3 = -1;
	                }
	                else {
	                    var3 = 0;
	                }
	            }
	            else if (Math.abs(this.bvx) < 30.0 * this.field_rn_slime_G_2) {
	                if (var5 < ((this.XSIZE / 3 | 0)) && Math.abs(this.field_rn_slime_by_6 - var15) > this.SLIMESIZE * 2.5) {
	                    if (this.field_rn_slime_bx_5 + this.BALLSIZE + this.bvx * 10.0 > var7) {
	                        var3 = 1;
	                    }
	                    else if (this.field_rn_slime_bx_5 + this.BALLSIZE + this.bvx * 10.0 < var7) {
	                        var3 = -1;
	                    }
	                    else {
	                        var3 = 0;
	                    }
	                }
	                else if (var21 + var9 + (this.BALLSIZE * 2) > var7) {
	                    var3 = 1;
	                }
	                else if (var21 + var9 + (this.BALLSIZE * 2) < var7) {
	                    var3 = -1;
	                }
	                else {
	                    var3 = 0;
	                }
	            }
	            else if (var21 + var9 + ((this.BALLSIZE / 6 | 0)) > var7) {
	                var3 = 1;
	            }
	            else if (var21 + var9 + ((this.BALLSIZE / 6 | 0)) < var7) {
	                var3 = -1;
	            }
	            else {
	                var3 = 0;
	            }
	            if (this.field_rn_slime_bx_5 < ((this.XSIZE / 2 | 0)) && Math.abs(var5 - this.field_rn_slime_bx_5) < this.SLIMESIZE && var1 !== 0 && var7 < ((this.XSIZE / 2 | 0) + (this.XSIZE / 4 | 0)) && this.field_rn_slime_bx_5 > ((this.XSIZE / 3 | 0))) {
	                var3 = -1;
	                var4 = true;
	            }
	            if (Math.abs(this.bvx) < 25.0 * this.field_rn_slime_G_2 && this.bvy > (8.0 + (var15 - this.field_rn_slime_by_6) * 2.0 * this.field_rn_slime_G_2) * this.field_rn_slime_G_2 && Math.abs(this.field_rn_slime_by_6 - var15) > this.SLIMESIZE * 2.5 && var7 < ((this.XSIZE / 2 | 0) + (this.XSIZE / 4 | 0)) && this.bvx * 20.0 + this.field_rn_slime_bx_5 < var7 + this.BALLSIZE && this.bvx * 20.0 + this.field_rn_slime_bx_5 > var7 - this.SLIMESIZE) {
	                if (var5 < this.XSIZE / 2.7) {
	                    var4 = true;
	                    var3 = 0;
	                }
	                else if (var1 === 1) {
	                    var4 = true;
	                    var3 = 0;
	                }
	            }
	        }
	        var9 = var7 - this.SLIMESIZE * 1.5 - this.field_rn_slime_bx_5;
	        if (var9 > 0.0 && var7 < ((this.XSIZE / 2 | 0) + (this.XSIZE / 4 | 0))) {
	            var25 = var9 / this.bvx;
	            var var17 = this.field_rn_slime_by_6 + var25 * this.bvy + this.field_rn_slime_G_2 * var25 * var25 / 2.0;
	            if (var17 > var15 - this.NETSIZEY - this.SLIMESIZE * 1.5 && var17 < var15 - this.NETSIZEY) {
	                if (var25 > 20.0 && var25 < 30.0) {
	                    var var11 = var9 - 60.0;
	                    if (var11 > 0.0 && var7 < ((this.XSIZE / 2 | 0) + this.XSIZE + 4) + 60.0) {
	                        var var27 = var11 / this.bvx;
	                        var var19 = this.field_rn_slime_by_6 + var27 * this.bvy + this.field_rn_slime_G_2 * var27 * var27 / 2.0;
	                        if (var19 > var15 - this.NETSIZEY - this.SLIMESIZE * 1.5 && var19 < var15 - this.NETSIZEY && var27 > 13.0 && var27 < 15.0) {
	                            var3 = -1;
	                            var4 = true;
	                        }
	                    }
	                    else {
	                        var3 = -1;
	                    }
	                }
	                else if (var25 > 7.0 && var25 < 10.0) {
	                    var3 = 0;
	                    var4 = true;
	                }
	            }
	        }
	        if (this.comserv !== 0) {
	            switch ((this.comserv)) {
	                case 1:
	                    if (var21 + (this.BALLSIZE * 2) < var7) {
	                        var3 = -1;
	                    }
	                    else if (var21 + (this.BALLSIZE * 2) > var7) {
	                        var3 = 1;
	                    }
	                    else {
	                        var3 = 0;
	                    }
	                    break;
	                case 2:
	                    if (var21 + this.BALLSIZE * 2.5 < var7) {
	                        var3 = -1;
	                    }
	                    else if (var21 + this.BALLSIZE * 2.5 > var7) {
	                        var3 = 1;
	                    }
	                    else {
	                        var3 = 0;
	                    }
	                case 3:
	                default:
	                    break;
	                case 4:
	                    if (var21 - this.BALLSIZE < var7) {
	                        var3 = -1;
	                    }
	                    else if (var21 - this.BALLSIZE > var7) {
	                        var3 = 1;
	                    }
	                    else {
	                        var3 = 0;
	                    }
	            }
	        }
	        if (var4 && this.comserv === 0) {
	            this.comjump = 1;
	        }
	        return var3;
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = slime;


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class Slime2P extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.topScore = 10;
	        this.p2Col = 1;
	        this.slimeColText = ["Super Blue Slime ", "Power Green Slime "];
	        this.frenzyCol = 0;
	        this.scoringRunForSuper = 2;
	        this.pow_HOPBALL = 1;
	        this.pow_KILLBALL = 2;
	        this.pow_INVERTBALL = 3;
	        this.pow_ATTRACTBALL = 4;
	        this.pow_REPELBALL = 5;
	        this.pow_HOPBALL_ENERGY = 10;
	        this.pow_KILLBALL_ENERGY = 35;
	        this.pow_INVERTBALL_ENERGY = 15;
	        this.pow_ATTRACTBALL_ENERGY = 5;
	        this.pow_REPELBALL_ENERGY = 5;
	        this.p1Pow = 1;
	        this.p2Pow = 1;
	        this.p1PowReq = 10;
	        this.p2PowReq = 10;
	        this.bgColor = new shims_1.Color(0, 0, 50);
	        this.p1Energy = 100.0;
	        this.p2Energy = 100.0;
	        this.p1PowString = "undefined";
	        this.p2PowString = "undefined";
	        this.fBouncyRoof = true;
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.nScore = 0;
	        this.nPointsScored = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.fEndGame = false;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.slimeColours = [shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black")];
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    handleEvent(event) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((event.id)) {
	                case 401:
	                case 403:
	                    if (!this.fEndGame) {
	                        switch ((event.key)) {
	                            case 9:
	                            case 81:
	                            case 113:
	                                this.slimerSpecial(1);
	                                break;
	                            case 10:
	                            case 72:
	                            case 104:
	                                this.slimerSpecial(2);
	                                break;
	                            case 65:
	                            case 97:
	                                this.p1XV = this.scoringRun <= -2 ? -16 : -8;
	                                break;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.scoringRun <= -2 ? 16 : 8;
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (this.p2Y === 0) {
	                                    this.p2YV = this.scoringRun >= 2 ? 45 : 31;
	                                }
	                                break;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                this.p2XV = this.scoringRun >= 2 ? -16 : -8;
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                if (this.fCanChangeCol) {
	                                    this.p2Pow = this.p2Pow !== 5 ? this.p2Pow + 1 : 1;
	                                    switch ((this.p2Pow)) {
	                                        case 1:
	                                            this.p2PowReq = 10;
	                                            break;
	                                        case 2:
	                                            this.p2PowReq = 35;
	                                            break;
	                                        case 3:
	                                            this.p2PowReq = 15;
	                                            break;
	                                        case 4:
	                                            this.p2PowReq = 5;
	                                            break;
	                                        case 5:
	                                            this.p2PowReq = 5;
	                                    }
	                                    this.drawScores();
	                                    this.drawEnergyBars();
	                                    break;
	                                }
	                            case 32:
	                                this.mousePressed = true;
	                                break;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                this.p2XV = this.scoringRun >= 2 ? 16 : 8;
	                                break;
	                            case 83:
	                            case 115:
	                                this.p1Pow = this.p1Pow !== 5 ? this.p1Pow + 1 : 1;
	                                switch ((this.p1Pow)) {
	                                    case 1:
	                                        this.p1PowReq = 10;
	                                        break;
	                                    case 2:
	                                        this.p1PowReq = 35;
	                                        break;
	                                    case 3:
	                                        this.p1PowReq = 15;
	                                        break;
	                                    case 4:
	                                        this.p1PowReq = 5;
	                                        break;
	                                    case 5:
	                                        this.p1PowReq = 5;
	                                }
	                                this.drawScores();
	                                this.drawEnergyBars();
	                                break;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.scoringRun <= -2 ? 45 : 31;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((event.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.nScore = 5;
	                        this.nPointsScored = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 200;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.promptMsg = "";
	                        this.repaint();
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 2-Player, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
	            }
	            return false;
	        });
	    }
	    DrawSlimers() {
	        var k1 = (this.nWidth / 10 | 0);
	        var j2 = (this.nHeight / 10 | 0);
	        var i3 = (this.nWidth / 50 | 0);
	        var j3 = (this.nHeight / 25 | 0);
	        var k3 = (this.ballX * this.nWidth / 1000 | 0);
	        var l3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var i = (this.p1OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        var l = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.bgColor);
	        this.screen.fillRect(i, l, k1, j2);
	        i = (this.p2OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.bgColor);
	        this.screen.fillRect(i, l, k1, j2);
	        this.MoveBall();
	        i = (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.scoringRun <= -2 ? this.slimeColours[this.frenzyCol = (this.frenzyCol + 1) % this.slimeColours.length] : shims_1.Color.fromString("blue"));
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        var l4 = this.p1X + 38;
	        var i5 = this.p1Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        var i4 = i - k3;
	        var j4 = l - l3;
	        var k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        var flag = Math.random() < 0.01;
	        if (flag) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        i = (this.p2X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.scoringRun >= 2 ? this.slimeColours[this.frenzyCol = (this.frenzyCol + 1) % this.slimeColours.length] : shims_1.Color.fromString("green"));
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        l4 = this.p2X - 18;
	        i5 = this.p2Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        i4 = i - k3;
	        j4 = l - l3;
	        k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        flag = Math.random() < 0.01;
	        if (flag) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(flag ? shims_1.Color.fromString("gray") : shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        var i2;
	        var l2;
	        var k;
	        var j1;
	        var k5;
	        if (this.nScore > 8) {
	            i2 = (this.p1X * this.nWidth / 1000 | 0);
	            l2 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            k = (this.nWidth / 20 | 0);
	            j1 = (this.nHeight / 20 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        else {
	            if (this.nScore < 2) {
	                i2 = (this.nWidth / 20 | 0);
	                l2 = (this.nHeight / 20 | 0);
	                k = (this.p2X * this.nWidth / 1000 | 0) - i2;
	                j1 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	                k5 = 0;
	                do {
	                    this.screen.setColor(shims_1.Color.fromString("black"));
	                    this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
	                    ++k5;
	                } while ((k5 < 3));
	            }
	        }
	    }
	    paint(g) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        g.setColor(this.bgColor);
	        g.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        g.setColor(shims_1.Color.fromString("darkGray"));
	        g.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        g.setColor(shims_1.Color.fromString("white"));
	        g.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	        this.drawScores();
	        this.drawPrompt();
	        this.drawEnergyBars();
	        if (!this.fInPlay) {
	            var fm = this.screen.getFontMetrics();
	            g.setFont(new shims_1.Font("Arial", 1, 150));
	            fm = g.getFontMetrics();
	            g.setColor(new shims_1.Color(20, 20, 40));
	            g.drawString("2", (this.nWidth / 2 | 0) - (fm.stringWidth("2") / 2 | 0), (this.nHeight / 2 | 0) + 20);
	            g.setFont(new shims_1.Font("Courier", 0, 18));
	            fm = g.getFontMetrics();
	            g.setColor(new shims_1.Color(255, 255, 255));
	            g.drawString("Slime Volleyball", (this.nWidth / 2 | 0) - (fm.stringWidth("Slime Volleyball") / 2 | 0), (this.nHeight / 2 | 0));
	            g.setFont(new shims_1.Font("Courier", 3, 12));
	            fm = g.getFontMetrics();
	            g.setColor(new shims_1.Color(255, 255, 100));
	            g.drawString("POWER SLIME - beta", (this.nWidth / 2 | 0) - (fm.stringWidth("POWER SLIME - beta") / 2 | 0), (this.nHeight / 2 | 0) + 15);
	            g.setFont(new shims_1.Font("Arial", 0, 11));
	            fm = g.getFontMetrics();
	            g.setColor(new shims_1.Color(255, 255, 255));
	            fm = g.getFontMetrics();
	            g.drawString("Written by Quin Pendragon", (this.nWidth / 2 | 0) - (fm.stringWidth("Written by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + fm.getHeight() * 2 + 20);
	            g.drawString("Mod by Tim Lightfoot", (this.nWidth / 2 | 0) - (fm.stringWidth("Mod by Tim Lightfoot") / 2 | 0), (this.nHeight / 2 | 0) + fm.getHeight() * 2 + 35);
	        }
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    ReplayFrame(i, j, k, l, i1, flag) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (flag) {
	                this.ballX = this.ballOldX = -50000000;
	                this.ballY = this.ballOldY = 100000;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var _ex = i !== 0 ? i - 1 : 199;
	                this.p1OldX = this.replayData[_ex][0];
	                this.p1OldY = this.replayData[_ex][1];
	                this.p2OldX = this.replayData[_ex][2];
	                this.p2OldY = this.replayData[_ex][3];
	                this.ballOldX = this.replayData[_ex][4];
	                this.ballOldY = this.replayData[_ex][5];
	            }
	            this.p1X = this.replayData[i][0];
	            this.p1Y = this.replayData[i][1];
	            this.p2X = this.replayData[i][2];
	            this.p2Y = this.replayData[i][3];
	            this.ballX = this.replayData[i][4];
	            this.ballY = this.replayData[i][5];
	            this.p1Col = this.replayData[i][6];
	            this.p2Col = this.replayData[i][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((i / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", j, k);
	            }
	            else {
	                this.screen.setColor(this.bgColor);
	                this.screen.fillRect(j, k - i1, l, i1 * 2);
	            }
	            this.DrawSlimers();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var8) {
	            }
	            ;
	        });
	    }
	    MakeTime(l) {
	        var l1 = Math.round(l / 10) % 100;
	        var l2 = Math.round(l / 1000) % 60;
	        var l3 = Math.round(l / 60000) % 60;
	        var l4 = Math.round(l / 3600000);
	        var s = "";
	        if (l4 < 10) {
	            s = new String(/* valueOf */ new String(s).toString()).toString().concat("0");
	        }
	        s = new String(/* valueOf */ new String(s).toString()).toString().concat(/* valueOf */ new String(/* valueOf */ new String(l4).toString()).toString());
	        s = new String(/* valueOf */ new String(s).toString()).toString().concat(":");
	        if (l3 < 10) {
	            s = new String(/* valueOf */ new String(s).toString()).toString().concat("0");
	        }
	        s = new String(/* valueOf */ new String(s).toString()).toString().concat(/* valueOf */ new String(/* valueOf */ new String(l3).toString()).toString());
	        s = new String(/* valueOf */ new String(s).toString()).toString().concat(":");
	        if (l2 < 10) {
	            s = new String(/* valueOf */ new String(s).toString()).toString().concat("0");
	        }
	        s = new String(/* valueOf */ new String(s).toString()).toString().concat(/* valueOf */ new String(/* valueOf */ new String(l2).toString()).toString());
	        s = new String(/* valueOf */ new String(s).toString()).toString().concat(":");
	        if (l1 < 10) {
	            s = new String(/* valueOf */ new String(s).toString()).toString().concat("0");
	        }
	        s = new String(/* valueOf */ new String(s).toString()).toString().concat(/* valueOf */ new String(/* valueOf */ new String(l1).toString()).toString());
	        return s;
	    }
	    MoveSlimers() {
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 445) {
	            this.p1X = 445;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.scoringRun <= -2 ? 4 : 2;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 555) {
	            this.p2X = 555;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.scoringRun >= 2 ? 4 : 2;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    MoveBall() {
	        var k = (30 * this.nHeight / 1000 | 0);
	        var i = (this.ballOldX * this.nWidth / 1000 | 0);
	        var j = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.bgColor);
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (this.fBouncyRoof) {
	        }
	        if (!this.fEndGame) {
	            var l1 = (this.ballX - this.p1X) * 2;
	            var i2 = this.ballY - this.p1Y;
	            var j2 = l1 * l1 + i2 * i2;
	            var k2 = this.ballVX - this.p1XV;
	            var l2 = this.ballVY - this.p1YV;
	            var i1;
	            var k1;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p1X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p1Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    this.ballVX += this.p1XV - (2 * l1 * k1 / i1 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p1YV - (2 * i2 * k1 / i1 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	            }
	            l1 = (this.ballX - this.p2X) * 2;
	            i2 = this.ballY - this.p2Y;
	            j2 = l1 * l1 + i2 * i2;
	            k2 = this.ballVX - this.p2XV;
	            l2 = this.ballVY - this.p2YV;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p2X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p2Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    this.ballVX += this.p2XV - (2 * l1 * k1 / i1 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p2YV - (2 * i2 * k1 / i1 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 480 && this.ballX < 520 && this.ballY < 140) {
	                if (this.ballVY < 0 && this.ballY > 130) {
	                    this.ballVY *= -1;
	                    this.ballY = 130;
	                }
	                else if (this.ballX < 500) {
	                    this.ballX = 480;
	                    this.ballVX = this.ballVX >= 0 ? -this.ballVX : this.ballVX;
	                }
	                else {
	                    this.ballX = 520;
	                    this.ballVX = this.ballVX <= 0 ? -this.ballVX : this.ballVX;
	                }
	            }
	        }
	        i = (this.ballX * this.nWidth / 1000 | 0);
	        j = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("yellow"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	    }
	    DrawStatus() {
	        var g = this.screen;
	        var i = (this.nHeight / 20 | 0);
	        g.setColor(this.bgColor);
	        var fontmetrics = this.screen.getFontMetrics();
	        var j = (this.nWidth / 2 | 0) + ((this.nScore - 5) * this.nWidth / 24 | 0);
	        var s = new String(/* valueOf */ new String((new shims_1.StringBuffer("Points: ")).append(this.nPointsScored).append("   Elapsed: ").append(this.MakeTime(this.gameTime))).toString()).toString();
	        var k = fontmetrics.stringWidth(s);
	        g.fillRect(j - (k / 2 | 0) - 5, 0, k + 10, i + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(s, j - (k / 2 | 0), fontmetrics.getAscent() + 20);
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(s, i) {
	        if (((typeof s === 'string') || s === null) && ((typeof i === 'number') || i === null)) {
	            return (() => {
	                var fontmetrics = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fontmetrics.getHeight() * (i + 1) + 10);
	            })();
	        }
	        else if (s === undefined && i === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    drawScores() {
	        var g = this.screen;
	        var k = (this.nHeight / 20 | 0);
	        var i1;
	        var j;
	        for (i1 = 0; i1 < this.nScore; ++i1) {
	            j = ((i1 + 1) * this.nWidth / 24 | 0);
	            g.setColor(shims_1.Color.fromString("blue"));
	            g.fillOval(j, 20, k, k);
	            g.setColor(shims_1.Color.fromString("white"));
	            g.drawOval(j, 20, k, k);
	        }
	        g.setColor(this.bgColor);
	        g.drawString("Special Ability: ".concat(/* valueOf */ new String(/* valueOf */ new String(this.p1PowString).toString()).toString()), 20, 60);
	        switch ((this.p1Pow)) {
	            case 1:
	                this.p1PowString = "Super Hop";
	                break;
	            case 2:
	                this.p1PowString = "Stun Ball";
	                break;
	            case 3:
	                this.p1PowString = "Invert Ball";
	                break;
	            case 4:
	                this.p1PowString = "Telekenetic Attract";
	                break;
	            case 5:
	                this.p1PowString = "Telekenetic Repel";
	        }
	        g.setColor(shims_1.Color.fromString("white"));
	        g.drawString("Special Ability: ".concat(/* valueOf */ new String(/* valueOf */ new String(this.p1PowString).toString()).toString()), 20, 60);
	        for (i1 = 0; i1 < 10 - this.nScore; ++i1) {
	            j = this.nWidth - ((i1 + 1) * this.nWidth / 24 | 0) - k;
	            g.setColor(shims_1.Color.fromString("green"));
	            g.fillOval(j, 20, k, k);
	            g.setColor(shims_1.Color.fromString("white"));
	            g.drawOval(j, 20, k, k);
	        }
	        g.setColor(this.bgColor);
	        g.drawString("Special Ability: ".concat(/* valueOf */ new String(/* valueOf */ new String(this.p2PowString).toString()).toString()), this.nWidth - 200, 60);
	        switch ((this.p2Pow)) {
	            case 1:
	                this.p2PowString = "Super Hop";
	                break;
	            case 2:
	                this.p2PowString = "Stun Ball";
	                break;
	            case 3:
	                this.p2PowString = "Invert Ball";
	                break;
	            case 4:
	                this.p2PowString = "Telekenetic Attract";
	                break;
	            case 5:
	                this.p2PowString = "Telekenetic Repel";
	        }
	        g.setColor(shims_1.Color.fromString("white"));
	        g.drawString("Special Ability: ".concat(/* valueOf */ new String(/* valueOf */ new String(this.p2PowString).toString()).toString()), this.nWidth - 200, 60);
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.replayPos = this.replayStart = 0;
	            this.p1Col = 0;
	            this.p2Col = 1;
	            this.scoringRun = 0;
	            this.fP1Touched = this.fP2Touched = false;
	            this.nPointsScored = 0;
	            this.startTime = shims_1.System.currentTimeMillis();
	            while ((this.nScore !== 0 && this.nScore !== 10 && this.gameThread != null)) {
	                this.gameTime = shims_1.System.currentTimeMillis() - this.startTime;
	                this.SaveReplayData();
	                this.p1OldX = this.p1X;
	                this.p1OldY = this.p1Y;
	                this.p2OldX = this.p2X;
	                this.p2OldY = this.p2Y;
	                this.ballOldX = this.ballX;
	                this.ballOldY = this.ballY;
	                this.MoveSlimers();
	                this.DrawSlimers();
	                this.DrawStatus();
	                this.recoverSlimerEnergy();
	                this.drawEnergyBars();
	                this.drawScores();
	                if (this.ballY < 35) {
	                    var l = shims_1.System.currentTimeMillis();
	                    ++this.nPointsScored;
	                    this.nScore += this.ballX <= 500 ? -1 : 1;
	                    if (this.ballX <= 500 && this.scoringRun >= 0) {
	                        ++this.scoringRun;
	                    }
	                    else if (this.ballX > 500 && this.scoringRun <= 0) {
	                        --this.scoringRun;
	                    }
	                    else if (this.ballX <= 500 && this.scoringRun <= 0) {
	                        this.scoringRun = 1;
	                    }
	                    else if (this.ballX > 500 && this.scoringRun >= 0) {
	                        this.scoringRun = -1;
	                    }
	                    this.promptMsg = this.ballX <= 500 ? this.slimeColText[this.p2Col] : this.slimeColText[this.p1Col];
	                    if (!this.fP1Touched && !this.fP2Touched) {
	                        this.promptMsg = "It\'s official, you suck!";
	                    }
	                    else if ((this.scoringRun < 0 ? -this.scoringRun : this.scoringRun) === 2) {
	                        this.promptMsg = new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat("is on fire!");
	                    }
	                    else if (this.ballX > 500 && this.fP1Touched && !this.fP2Touched || this.ballX <= 500 && !this.fP1Touched && this.fP2Touched) {
	                        this.promptMsg = new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat("aces the serve!");
	                    }
	                    else if (this.ballX > 500 && !this.fP1Touched && this.fP2Touched || this.ballX <= 500 && this.fP1Touched && !this.fP2Touched) {
	                        this.promptMsg = new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat("watches you make a tool of yourself!");
	                    }
	                    else {
	                        switch ((this.nScore)) {
	                            case 0:
	                            case 10:
	                                if (this.nPointsScored === 5) {
	                                    this.promptMsg = new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat("Wins with a QUICK FIVE!!!");
	                                }
	                                else if (this.scoringRun === 8) {
	                                    this.promptMsg = new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat("Wins with a BIG NINE!!!");
	                                }
	                                else {
	                                    this.promptMsg = new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat("Wins!!!");
	                                }
	                                break;
	                            case 1:
	                            case 2:
	                            case 3:
	                            case 7:
	                            case 8:
	                            case 9:
	                            default:
	                                this.promptMsg = new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat("Scores!");
	                                break;
	                            case 4:
	                                this.promptMsg = new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat(/* valueOf */ new String(/* valueOf */ new String(this.ballX >= 500 ? "Scores!" : "takes the lead!!").toString()).toString());
	                                break;
	                            case 5:
	                                this.promptMsg = new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat("Equalizes!");
	                                break;
	                            case 6:
	                                this.promptMsg = new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat(/* valueOf */ new String(/* valueOf */ new String(this.ballX <= 500 ? "Scores!" : "takes the lead!!").toString()).toString());
	                        }
	                    }
	                    this.fCanChangeCol = false;
	                    var flag = this.nScore !== 0 && this.nScore !== 10;
	                    var i = this.ballX;
	                    this.drawPrompt();
	                    if (flag) {
	                        this.drawPrompt("Click mouse or Hit space for replay...", 1);
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var8) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                    }
	                    else if (this.gameThread != null) {
	                        try {
	                            yield shims_1.Thread.sleep(2500);
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                    }
	                    this.promptMsg = "";
	                    this.drawPrompt();
	                    this.fCanChangeCol = true;
	                    if (flag) {
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = i >= 500 ? 200 : 800;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.fP1Touched = this.fP2Touched = false;
	                        this.repaint();
	                    }
	                    this.startTime += shims_1.System.currentTimeMillis() - l;
	                }
	                if (this.gameThread != null) {
	                    try {
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var6) {
	                    }
	                    ;
	                }
	            }
	            ;
	            this.fEndGame = true;
	            this.SaveReplayData();
	            yield this.DoReplay();
	            this.fInPlay = false;
	            this.promptMsg = "Click the mouse to play...";
	            this.repaint();
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.nScore = 5;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.promptMsg = "Click the mouse to play...";
	        this.screen = this.getGraphics();
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var fontmetrics = this.screen.getFontMetrics();
	            var i = fontmetrics.stringWidth("Replay...");
	            var j = fontmetrics.getHeight();
	            var k = (this.nWidth / 2 | 0) - (i / 2 | 0);
	            var l = (this.nHeight / 2 | 0) - j;
	            this.promptMsg = "Click mouse or hit space to continue...";
	            this.mousePressed = false;
	            for (var i1 = this.replayPos - 1; !this.mousePressed; yield this.ReplayFrame(i1, k, l, i, j, false)) {
	                ++i1;
	                if (i1 >= 200) {
	                    i1 = 0;
	                }
	                if (i1 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var8) {
	                    }
	                    ;
	                    i1 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	            }
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    DoFatality() {
	    }
	    slimerSpecial(playerNum) {
	        if (this.fP1Touched && this.fP2Touched) {
	            var dx;
	            var dy;
	            switch ((playerNum)) {
	                case 1:
	                    if (this.scoringRun > -2) {
	                        this.p1Energy -= this.p1PowReq;
	                    }
	                    switch ((this.p1Pow)) {
	                        case 1:
	                            if (this.p1Energy > this.p1PowReq) {
	                                this.promptMsg = "Slimer 1 Hops the ball!";
	                                this.drawPrompt();
	                                this.ballVY += 20;
	                                this.drawEnergyBars();
	                            }
	                            return;
	                        case 2:
	                            if (this.p1Energy > this.p1PowReq) {
	                                this.promptMsg = "Slimer 1 stuns the ball!";
	                                this.drawPrompt();
	                                this.ballVX = 0;
	                                this.ballVY = 0;
	                                this.drawEnergyBars();
	                            }
	                            return;
	                        case 3:
	                            if (this.p1Energy > this.p1PowReq) {
	                                this.promptMsg = "Slimer 1 Inverts the ball!";
	                                this.drawPrompt();
	                                this.ballVX *= -1;
	                                this.ballVY *= -1;
	                                this.drawEnergyBars();
	                            }
	                            return;
	                        case 4:
	                            this.promptMsg = "Slimer 1 uses telekenetic attract!";
	                            this.drawPrompt();
	                            if (this.p1Energy > this.p1PowReq) {
	                                dx = (this.ballX - this.p1X);
	                                dy = (this.ballY - this.p1Y);
	                                if (Math.abs(dx) > Math.abs(dy)) {
	                                    dy /= dx;
	                                    dx /= Math.abs(dx);
	                                }
	                                else {
	                                    dx /= dy;
	                                    dy /= Math.abs(dy);
	                                }
	                                this.ballVX = ((this.ballVX - 8 * dx) | 0);
	                                this.ballVY = ((this.ballVY - 8 * dy) | 0);
	                                this.drawEnergyBars();
	                            }
	                            return;
	                        case 5:
	                            if (this.p1Energy > this.p1PowReq) {
	                                this.promptMsg = "Slimer 1 uses telekenetic repel!";
	                                this.drawPrompt();
	                                dx = (this.ballX - this.p1X);
	                                dy = (this.ballY - this.p1Y);
	                                if (Math.abs(dx) > Math.abs(dy)) {
	                                    dy /= dx;
	                                    dx /= Math.abs(dx);
	                                }
	                                else {
	                                    dx /= dy;
	                                    dy /= Math.abs(dy);
	                                }
	                                this.ballVX = ((this.ballVX + 10 * dx) | 0);
	                                this.ballVY = ((this.ballVY + 10 * dy) | 0);
	                                this.drawEnergyBars();
	                            }
	                            return;
	                        default:
	                            return;
	                    }
	                case 2:
	                    if (this.scoringRun < 2) {
	                        this.p2Energy -= this.p2PowReq;
	                    }
	                    switch ((this.p2Pow)) {
	                        case 1:
	                            if (this.p2Energy > this.p2PowReq) {
	                                this.promptMsg = "Slimer 2 Hops the ball!";
	                                this.drawPrompt();
	                                this.ballVY += 20;
	                                this.drawEnergyBars();
	                            }
	                            break;
	                        case 2:
	                            if (this.p2Energy > this.p2PowReq) {
	                                this.promptMsg = "Slimer 2 stuns the ball!";
	                                this.drawPrompt();
	                                this.ballVX = 0;
	                                this.ballVY = 0;
	                                this.drawEnergyBars();
	                            }
	                            break;
	                        case 3:
	                            if (this.p2Energy > this.p2PowReq) {
	                                this.promptMsg = "Slimer 2 Inverts the ball!";
	                                this.drawPrompt();
	                                this.ballVX *= -1;
	                                this.ballVY *= -1;
	                                this.drawEnergyBars();
	                            }
	                            break;
	                        case 4:
	                            this.promptMsg = "Slimer 2 uses telekenetic attract!";
	                            this.drawPrompt();
	                            if (this.p2Energy > this.p2PowReq) {
	                                dx = (this.ballX - this.p2X);
	                                dy = (this.ballY - this.p2Y);
	                                if (Math.abs(dx) > Math.abs(dy)) {
	                                    dy /= dx;
	                                    dx /= Math.abs(dx);
	                                }
	                                else {
	                                    dx /= dy;
	                                    dy /= Math.abs(dy);
	                                }
	                                this.ballVX = ((this.ballVX - 8 * dx) | 0);
	                                this.ballVY = ((this.ballVY - 8 * dy) | 0);
	                                this.drawEnergyBars();
	                            }
	                            break;
	                        case 5:
	                            if (this.p2Energy > this.p2PowReq) {
	                                this.promptMsg = "Slimer 2 uses telekenetic repel!";
	                                this.drawPrompt();
	                                dx = (this.ballX - this.p2X);
	                                dy = (this.ballY - this.p2Y);
	                                if (Math.abs(dx) > Math.abs(dy)) {
	                                    dy /= dx;
	                                    dx /= Math.abs(dx);
	                                }
	                                else {
	                                    dx /= dy;
	                                    dy /= Math.abs(dy);
	                                }
	                                this.ballVX = ((this.ballVX + 10 * dx) | 0);
	                                this.ballVY = ((this.ballVY + 10 * dy) | 0);
	                                this.drawEnergyBars();
	                            }
	                    }
	            }
	        }
	        else {
	            this.promptMsg = "Sorry, No more cheap points!";
	            this.drawPrompt();
	        }
	    }
	    recoverSlimerEnergy() {
	        if (this.p1Energy < 100) {
	            this.p1Energy = (this.p1Energy + 0.22);
	        }
	        if (this.p2Energy < 100) {
	            this.p2Energy = (this.p2Energy + 0.22);
	        }
	    }
	    drawEnergyBars() {
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 30, this.nWidth, 15);
	        this.screen.setColor(shims_1.Color.fromString("black"));
	        this.screen.drawRect(10, (4 * this.nHeight / 5 | 0) + 30, (this.nWidth / 2 | 0) - 20, 15);
	        this.screen.drawRect(10 + (this.nWidth / 2 | 0), (4 * this.nHeight / 5 | 0) + 30, (this.nWidth / 2 | 0) - 20, 15);
	        this.screen.setColor(new shims_1.Color(50, 50, 255));
	        this.screen.fillRect(11, (4 * this.nHeight / 5 | 0) + 31, (((((this.nWidth / 2 | 0) - 22) * this.p1Energy) | 0) / 100 | 0), 14);
	        this.screen.setColor(new shims_1.Color(30, 30, 30));
	        this.screen.drawRect(10, (4 * this.nHeight / 5 | 0) + 30, (((this.nWidth / 2 | 0) - 20) * this.p1PowReq / 100 | 0), 15);
	        this.screen.setColor(new shims_1.Color(50, 255, 50));
	        this.screen.fillRect(11 + (this.nWidth / 2 | 0), (4 * this.nHeight / 5 | 0) + 31, (((((this.nWidth / 2 | 0) - 22) * this.p2Energy) | 0) / 100 | 0), 14);
	        this.screen.setColor(new shims_1.Color(30, 30, 30));
	        this.screen.drawRect(10 + (this.nWidth / 2 | 0), (4 * this.nHeight / 5 | 0) + 30, (((this.nWidth / 2 | 0) - 20) * this.p2PowReq / 100 | 0), 15);
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Slime2P;


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class Slime2P extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.topScore = 10;
	        this.p2Col = 1;
	        this.slimeColText = ["Big Red Slime ", "Magic Green Slime ", "Golden Boy ", "The Great White Slime ", "The Grass Tree? "];
	        this.scoringRunForSuper = 3;
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.nScore = 0;
	        this.nPointsScored = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.fEndGame = false;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.slimeColours = [shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black")];
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    handleEvent(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((var1.id)) {
	                case 401:
	                case 403:
	                    if (!this.fEndGame) {
	                        switch ((var1.key)) {
	                            case 65:
	                            case 97:
	                                this.p1XV = this.scoringRun <= -3 ? -16 : -8;
	                                break;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.scoringRun <= -3 ? 16 : 8;
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (this.p2Y === 0) {
	                                    this.p2YV = this.scoringRun >= 3 ? 45 : 31;
	                                }
	                                break;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                this.p2XV = this.scoringRun >= 3 ? -16 : -8;
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                if (this.fCanChangeCol) {
	                                    do {
	                                        this.p2Col = this.p2Col !== 4 ? this.p2Col + 1 : 0;
	                                    } while ((this.p2Col === this.p1Col));
	                                    this.drawScores();
	                                    break;
	                                }
	                            case 32:
	                                this.mousePressed = true;
	                                break;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                this.p2XV = this.scoringRun >= 3 ? 16 : 8;
	                                break;
	                            case 83:
	                            case 115:
	                                if (this.fCanChangeCol) {
	                                    do {
	                                        this.p1Col = this.p1Col !== 4 ? this.p1Col + 1 : 0;
	                                    } while ((this.p1Col === this.p2Col));
	                                    this.drawScores();
	                                }
	                                break;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.scoringRun <= -3 ? 45 : 31;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((var1.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.nScore = 5;
	                        this.nPointsScored = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 200;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.promptMsg = "";
	                        this.repaint();
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 2-Player, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
	            }
	            return false;
	        });
	    }
	    DrawSlimers() {
	        var var1 = (this.nWidth / 10 | 0);
	        var var2 = (this.nHeight / 10 | 0);
	        var var3 = (this.nWidth / 50 | 0);
	        var var4 = (this.nHeight / 25 | 0);
	        var var5 = (this.ballX * this.nWidth / 1000 | 0);
	        var var6 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var var7 = (this.p1OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var var8 = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7, var8, var1, var2);
	        var7 = (this.p2OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(var7, var8, var1, var2);
	        this.MoveBall();
	        var7 = (this.p1X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.scoringRun <= -3 ? this.slimeColours[this.frenzyCol = (this.frenzyCol + 1) % this.slimeColours.length] : this.slimeColours[this.p1Col]);
	        this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	        var var9 = this.p1X + 38;
	        var var10 = this.p1Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var var11 = var7 - var5;
	        var var12 = var8 - var6;
	        var var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var var14 = Math.random() < 0.01;
	        if (var14) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var7 = (this.p2X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(this.scoringRun >= 3 ? this.slimeColours[this.frenzyCol = (this.frenzyCol + 1) % this.slimeColours.length] : this.slimeColours[this.p2Col]);
	        this.screen.fillArc(var7, var8, var1, 2 * var2, 0, 180);
	        var9 = this.p2X - 18;
	        var10 = this.p2Y - 60;
	        var7 = (var9 * this.nWidth / 1000 | 0);
	        var8 = (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);
	        var11 = var7 - var5;
	        var12 = var8 - var6;
	        var13 = (Math.sqrt((var11 * var11 + var12 * var12)) | 0);
	        var14 = Math.random() < 0.01;
	        if (var14) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(var14 ? shims_1.Color.fromString("gray") : shims_1.Color.fromString("white"));
	            this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
	            if (var13 > 0 && !var14) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        var var15;
	        var var16;
	        var var17;
	        var var18;
	        var var19;
	        if (this.nScore > 8) {
	            var15 = (this.p1X * this.nWidth / 1000 | 0);
	            var16 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            var17 = (this.nWidth / 20 | 0);
	            var18 = (this.nHeight / 20 | 0);
	            var19 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(var15, var16 + var19, var17, var18, -30, -150);
	                ++var19;
	            } while ((var19 < 3));
	        }
	        else {
	            if (this.nScore < 2) {
	                var15 = (this.nWidth / 20 | 0);
	                var16 = (this.nHeight / 20 | 0);
	                var17 = (this.p2X * this.nWidth / 1000 | 0) - var15;
	                var18 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	                var19 = 0;
	                do {
	                    this.screen.setColor(shims_1.Color.fromString("black"));
	                    this.screen.drawArc(var17, var18 + var19, var15, var16, -10, -150);
	                    ++var19;
	                } while ((var19 < 3));
	            }
	        }
	    }
	    paint(var1) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var1.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        var1.setColor(shims_1.Color.fromString("gray"));
	        var1.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        var1.setColor(shims_1.Color.fromString("white"));
	        var1.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	        this.drawScores();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var var2 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString("Slime Volleyball!", (this.nWidth / 2 | 0) - (var2.stringWidth("Slime Volleyball!") / 2 | 0), (this.nHeight / 2 | 0) - var2.getHeight());
	            var1.setColor(shims_1.Color.fromString("white"));
	            var2 = var1.getFontMetrics();
	            var1.drawString("Written by Quin Pendragon", (this.nWidth / 2 | 0) - (var2.stringWidth("Written by Quin Pendragon") / 2 | 0), (this.nHeight / 2 | 0) + var2.getHeight() * 2);
	        }
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    ReplayFrame(var1, var2, var3, var4, var5, var6) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (var6) {
	                this.ballX = this.ballOldX = -50000000;
	                this.ballY = this.ballOldY = 100000;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var var7 = var1 !== 0 ? var1 - 1 : 199;
	                this.p1OldX = this.replayData[var7][0];
	                this.p1OldY = this.replayData[var7][1];
	                this.p2OldX = this.replayData[var7][2];
	                this.p2OldY = this.replayData[var7][3];
	                this.ballOldX = this.replayData[var7][4];
	                this.ballOldY = this.replayData[var7][5];
	            }
	            this.p1X = this.replayData[var1][0];
	            this.p1Y = this.replayData[var1][1];
	            this.p2X = this.replayData[var1][2];
	            this.p2Y = this.replayData[var1][3];
	            this.ballX = this.replayData[var1][4];
	            this.ballY = this.replayData[var1][5];
	            this.p1Col = this.replayData[var1][6];
	            this.p2Col = this.replayData[var1][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((var1 / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", var2, var3);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(var2, var3 - var5, var4, var5 * 2);
	            }
	            this.DrawSlimers();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var8) {
	            }
	            ;
	        });
	    }
	    MakeTime(var1) {
	        var var3 = Math.round(var1 / 10) % 100;
	        var var5 = Math.round(var1 / 1000) % 60;
	        var var7 = Math.round(var1 / 60000) % 60;
	        var var9 = Math.round(var1 / 3600000);
	        var var11 = "";
	        if (var9 < 10) {
	            var11 = var11 + "0";
	        }
	        var11 = var11 + var9;
	        var11 = var11 + ":";
	        if (var7 < 10) {
	            var11 = var11 + "0";
	        }
	        var11 = var11 + var7;
	        var11 = var11 + ":";
	        if (var5 < 10) {
	            var11 = var11 + "0";
	        }
	        var11 = var11 + var5;
	        var11 = var11 + ":";
	        if (var3 < 10) {
	            var11 = var11 + "0";
	        }
	        var11 = var11 + var3;
	        return var11;
	    }
	    MoveSlimers() {
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 445) {
	            this.p1X = 445;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.scoringRun <= -3 ? 4 : 2;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 555) {
	            this.p2X = 555;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.scoringRun >= 3 ? 4 : 2;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    MoveBall() {
	        var var1 = (30 * this.nHeight / 1000 | 0);
	        var var2 = (this.ballOldX * this.nWidth / 1000 | 0);
	        var var3 = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var var4 = (this.ballX - this.p1X) * 2;
	            var var5 = this.ballY - this.p1Y;
	            var var6 = var4 * var4 + var5 * var5;
	            var var7 = this.ballVX - this.p1XV;
	            var var8 = this.ballVY - this.p1YV;
	            var var9;
	            var var10;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p1X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p1Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    this.ballVX += this.p1XV - (2 * var4 * var10 / var9 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p1YV - (2 * var5 * var10 / var9 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	            }
	            var4 = (this.ballX - this.p2X) * 2;
	            var5 = this.ballY - this.p2Y;
	            var6 = var4 * var4 + var5 * var5;
	            var7 = this.ballVX - this.p2XV;
	            var8 = this.ballVY - this.p2YV;
	            if (var5 > 0 && var6 < 15625 && var6 > 25) {
	                var9 = (Math.sqrt(var6) | 0);
	                var10 = ((var4 * var7 + var5 * var8) / var9 | 0);
	                this.ballX = this.p2X + (var4 * 63 / var9 | 0);
	                this.ballY = this.p2Y + (var5 * 125 / var9 | 0);
	                if (var10 <= 0) {
	                    this.ballVX += this.p2XV - (2 * var4 * var10 / var9 | 0);
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    this.ballVY += this.p2YV - (2 * var5 * var10 / var9 | 0);
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 480 && this.ballX < 520 && this.ballY < 140) {
	                if (this.ballVY < 0 && this.ballY > 130) {
	                    this.ballVY *= -1;
	                    this.ballY = 130;
	                }
	                else if (this.ballX < 500) {
	                    this.ballX = 480;
	                    this.ballVX = this.ballVX >= 0 ? -this.ballVX : this.ballVX;
	                }
	                else {
	                    this.ballX = 520;
	                    this.ballVX = this.ballVX <= 0 ? -this.ballVX : this.ballVX;
	                }
	            }
	        }
	        var2 = (this.ballX * this.nWidth / 1000 | 0);
	        var3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("yellow"));
	        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
	    }
	    DrawStatus() {
	        var var1 = this.screen;
	        var var2 = (this.nHeight / 20 | 0);
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var var3 = this.screen.getFontMetrics();
	        var var4 = (this.nWidth / 2 | 0) + ((this.nScore - 5) * this.nWidth / 24 | 0);
	        var var5 = "Points: " + this.nPointsScored + "   Elapsed: " + this.MakeTime(this.gameTime);
	        var var6 = var3.stringWidth(var5);
	        var1.fillRect(var4 - (var6 / 2 | 0) - 5, 0, var6 + 10, var2 + 22);
	        var1.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(var5, var4 - (var6 / 2 | 0), var3.getAscent() + 20);
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(var1, var2) {
	        if (((typeof var1 === 'string') || var1 === null) && ((typeof var2 === 'number') || var2 === null)) {
	            return (() => {
	                var var3 = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var3.getHeight() * (var2 + 1) + 10);
	            })();
	        }
	        else if (var1 === undefined && var2 === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    drawScores() {
	        var var1 = this.screen;
	        var var2 = (this.nHeight / 20 | 0);
	        var1.setColor(shims_1.Color.fromString("blue"));
	        var1.fillRect(0, 0, this.nWidth, var2 + 22);
	        var var4;
	        for (var var3 = 0; var3 < this.nScore; ++var3) {
	            var4 = ((var3 + 1) * this.nWidth / 24 | 0);
	            var1.setColor(this.slimeColours[this.p1Col]);
	            var1.fillOval(var4, 20, var2, var2);
	            var1.setColor(shims_1.Color.fromString("white"));
	            var1.drawOval(var4, 20, var2, var2);
	        }
	        for (var4 = 0; var4 < 10 - this.nScore; ++var4) {
	            var var5 = this.nWidth - ((var4 + 1) * this.nWidth / 24 | 0) - var2;
	            var1.setColor(this.slimeColours[this.p2Col]);
	            var1.fillOval(var5, 20, var2, var2);
	            var1.setColor(shims_1.Color.fromString("white"));
	            var1.drawOval(var5, 20, var2, var2);
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.replayPos = this.replayStart = 0;
	            this.p1Col = 0;
	            this.p2Col = 1;
	            this.scoringRun = 0;
	            this.fP1Touched = this.fP2Touched = false;
	            this.nPointsScored = 0;
	            this.startTime = shims_1.System.currentTimeMillis();
	            while ((this.nScore !== 0 && this.nScore !== 10 && this.gameThread != null)) {
	                this.gameTime = shims_1.System.currentTimeMillis() - this.startTime;
	                this.SaveReplayData();
	                this.p1OldX = this.p1X;
	                this.p1OldY = this.p1Y;
	                this.p2OldX = this.p2X;
	                this.p2OldY = this.p2Y;
	                this.ballOldX = this.ballX;
	                this.ballOldY = this.ballY;
	                this.MoveSlimers();
	                this.DrawSlimers();
	                this.DrawStatus();
	                if (this.ballY < 35) {
	                    var var1 = shims_1.System.currentTimeMillis();
	                    ++this.nPointsScored;
	                    this.nScore += this.ballX <= 500 ? -1 : 1;
	                    if (this.ballX <= 500 && this.scoringRun >= 0) {
	                        ++this.scoringRun;
	                    }
	                    else if (this.ballX > 500 && this.scoringRun <= 0) {
	                        --this.scoringRun;
	                    }
	                    else if (this.ballX <= 500 && this.scoringRun <= 0) {
	                        this.scoringRun = 1;
	                    }
	                    else if (this.ballX > 500 && this.scoringRun >= 0) {
	                        this.scoringRun = -1;
	                    }
	                    this.promptMsg = this.ballX <= 500 ? this.slimeColText[this.p2Col] : this.slimeColText[this.p1Col];
	                    if (!this.fP1Touched && !this.fP2Touched) {
	                        this.promptMsg = "What can I say?";
	                    }
	                    else if ((this.scoringRun < 0 ? -this.scoringRun : this.scoringRun) === 3) {
	                        this.promptMsg = this.promptMsg + "is on fire!";
	                    }
	                    else if ((this.ballX <= 500 || !this.fP1Touched || this.fP2Touched) && (this.ballX > 500 || this.fP1Touched || !this.fP2Touched)) {
	                        if (this.ballX > 500 && !this.fP1Touched && this.fP2Touched || this.ballX <= 500 && this.fP1Touched && !this.fP2Touched) {
	                            this.promptMsg = this.promptMsg + "dies laughing! :P";
	                        }
	                        else {
	                            switch ((this.nScore)) {
	                                case 0:
	                                case 10:
	                                    if (this.nPointsScored === 5) {
	                                        this.promptMsg = this.promptMsg + "Wins with a QUICK FIVE!!!";
	                                    }
	                                    else if (this.scoringRun === 8) {
	                                        this.promptMsg = this.promptMsg + "Wins with a BIG NINE!!!";
	                                    }
	                                    else {
	                                        this.promptMsg = this.promptMsg + "Wins!!!";
	                                    }
	                                    break;
	                                case 4:
	                                    this.promptMsg = this.promptMsg + (this.ballX >= 500 ? "Scores!" : "takes the lead!!");
	                                    break;
	                                case 5:
	                                    this.promptMsg = this.promptMsg + "Equalizes!";
	                                    break;
	                                case 6:
	                                    this.promptMsg = this.promptMsg + (this.ballX <= 500 ? "Scores!" : "takes the lead!!");
	                                    break;
	                                default:
	                                    this.promptMsg = this.promptMsg + "Scores!";
	                            }
	                        }
	                    }
	                    else {
	                        this.promptMsg = this.promptMsg + "aces the serve!";
	                    }
	                    this.fCanChangeCol = false;
	                    var var3 = this.nScore !== 0 && this.nScore !== 10;
	                    var var4 = this.ballX;
	                    this.drawPrompt();
	                    if (var3) {
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var7) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                    }
	                    else if (this.gameThread != null) {
	                        try {
	                            yield shims_1.Thread.sleep(2500);
	                        }
	                        catch (var6) {
	                        }
	                        ;
	                    }
	                    this.promptMsg = "";
	                    this.drawPrompt();
	                    this.fCanChangeCol = true;
	                    if (var3) {
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = var4 >= 500 ? 200 : 800;
	                        this.ballY = 400;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.fP1Touched = this.fP2Touched = false;
	                        this.repaint();
	                    }
	                    this.startTime += shims_1.System.currentTimeMillis() - var1;
	                }
	                if (this.gameThread != null) {
	                    try {
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var5) {
	                    }
	                    ;
	                }
	            }
	            ;
	            this.fEndGame = true;
	            this.SaveReplayData();
	            yield this.DoReplay();
	            this.fInPlay = false;
	            this.promptMsg = "Click the mouse to play...";
	            this.repaint();
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.nScore = 5;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.promptMsg = "Click the mouse to play...";
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var1 = this.screen.getFontMetrics();
	            var var2 = var1.stringWidth("Replay...");
	            var var3 = var1.getHeight();
	            var var4 = (this.nWidth / 2 | 0) - (var2 / 2 | 0);
	            var var5 = (this.nHeight / 2 | 0) - var3;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            for (var var6 = this.replayPos - 1; !this.mousePressed; yield this.ReplayFrame(var6, var4, var5, var2, var3, false)) {
	                ++var6;
	                if (var6 >= 200) {
	                    var6 = 0;
	                }
	                if (var6 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var7) {
	                    }
	                    ;
	                    var6 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	            }
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    DoFatality() {
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Slime2P;


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class WaterPoloSlime extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 700;
	        this.recommended_height = 350;
	        this.splashStage = 1;
	        this.oldSplashX = 0;
	        this.oldSplashY = 0;
	        this.oldSplashXV = 0;
	        this.part1X = 110;
	        this.part1Y = 110;
	        this.part1Xold = 0;
	        this.part1Yold = 0;
	        this.part2Xold = 0;
	        this.part2Yold = 0;
	        this.part3Xold = 0;
	        this.part3Yold = 0;
	        this.part4Xold = 0;
	        this.part4Yold = 0;
	        this.part5Xold = 0;
	        this.part5Yold = 0;
	        this.part6Xold = 0;
	        this.part6Yold = 0;
	        this.part2X = 110;
	        this.part2Y = 110;
	        this.part3X = 110;
	        this.part3Y = 110;
	        this.part4X = 0;
	        this.part4Y = 0;
	        this.part5X = 0;
	        this.part5Y = 0;
	        this.part6X = 0;
	        this.part6Y = 0;
	        this.part7X = 0;
	        this.part7Y = 0;
	        this.part8X = 0;
	        this.part8Y = 0;
	        this.splash1 = 0;
	        this.splash2 = 0;
	        this.splash3 = 0;
	        this.p1XVar = 0;
	        this.p1YVar = 0;
	        this.p2XVar = 0;
	        this.p2YVar = 0;
	        this.ballXVar = 0;
	        this.ballYVar = 0;
	        this.NUM_PARTICLES_HIT = 30;
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.p1X = 0;
	        this.p2X = 0;
	        this.p1Y = 0;
	        this.p2Y = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.NUM_PARTICLES_HIT2 = 0;
	        this.NUM_PARTICLES_HIT3 = 0;
	        this.p1OldX = 0;
	        this.p2OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p2XV = 0;
	        this.p1YV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.replayPos = 0;
	        this.replayStart = 0;
	        this.mousePressed = false;
	        this.fCanChangeCol = false;
	        this.fInPlay = false;
	        this.p1Blink = 0;
	        this.p2Blink = 0;
	        this.fP1Sticky = false;
	        this.fP2Sticky = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.p1TouchingGoal = 0;
	        this.p2TouchingGoal = 0;
	        this.fEndGame = false;
	        this.fPlayOn = false;
	        this.nScoreX = 0;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.scoringRun = 0;
	        this.frenzyCol = 0;
	        this.playOnTicks = 0;
	        this.SMILE_DIFF = 0;
	        this.DAMPING = 0;
	        this.MAX_TICKS_TOUCHING_GOAL = 0;
	        this.JUMPVEL = 0;
	        this.SLIMEVEL = 0;
	        this.GRAVITY = 0;
	        this.gameLength = 0;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.fSuperSlime = false;
	        this.doubleBuffered = false;
	        this.particle_x_HIT = new Array(this.NUM_PARTICLES_HIT);
	        this.particle_y_HIT = new Array(this.NUM_PARTICLES_HIT);
	        this.particle_yv_HIT = new Array(this.NUM_PARTICLES_HIT);
	        this.particle_xv_HIT = new Array(this.NUM_PARTICLES_HIT);
	        this.NUM_PARTICLES_HIT2 = 30;
	        this.particle_x_HIT2 = new Array(this.NUM_PARTICLES_HIT2);
	        this.particle_y_HIT2 = new Array(this.NUM_PARTICLES_HIT2);
	        this.particle_yv_HIT2 = new Array(this.NUM_PARTICLES_HIT2);
	        this.particle_xv_HIT2 = new Array(this.NUM_PARTICLES_HIT2);
	        this.NUM_PARTICLES_HIT3 = 30;
	        this.particle_x_HIT3 = new Array(this.NUM_PARTICLES_HIT3);
	        this.particle_y_HIT3 = new Array(this.NUM_PARTICLES_HIT3);
	        this.particle_yv_HIT3 = new Array(this.NUM_PARTICLES_HIT3);
	        this.particle_xv_HIT3 = new Array(this.NUM_PARTICLES_HIT3);
	        this.slimeColText = ["Argentina", "Belgium", "Australia", "Iceland", "Cameroon", "P.R. of China", "Costa Rica", "Croatia", "Denmark", "Eucador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "Seth Efrica", "South Corea", "Sveden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany", "Night Elves"];
	        this.darkRed = new shims_1.Color(128, 0, 0);
	        this.darkGreen = new shims_1.Color(0, 128, 0);
	        this.darkBlue = new shims_1.Color(0, 0, 128);
	        this.Lightblue = new shims_1.Color(0, 0, 0);
	        this.slimaryCols = [shims_1.Color.fromString("cyan"), shims_1.Color.fromString("red"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), this.darkGreen, shims_1.Color.fromString("white"), this.darkRed, this.darkRed, new shims_1.Color(119, 41, 28), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(128, 128, 255), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), new shims_1.Color(119, 41, 28), shims_1.Color.fromString("green"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), new shims_1.Color(185, 30, 2), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(252, 239, 82), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), new shims_1.Color(16, 180, 180), new shims_1.Color(241, 245, 71), new shims_1.Color(230, 230, 230), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue")];
	        this.secondaryCols = [shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), shims_1.Color.fromString("yellow"), new shims_1.Color(128, 128, 255), shims_1.Color.fromString("red"), shims_1.Color.fromString("red"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), this.darkBlue, shims_1.Color.fromString("green"), shims_1.Color.fromString("blue"), this.darkBlue, shims_1.Color.fromString("white"), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("white"), shims_1.Color.fromString("red"), this.darkGreen, shims_1.Color.fromString("white"), new shims_1.Color(128, 255, 128), new shims_1.Color(255, 128, 0), this.darkGreen, this.darkBlue, new shims_1.Color(13, 131, 10), shims_1.Color.fromString("white"), shims_1.Color.fromString("blue"), shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), shims_1.Color.fromString("black"), new shims_1.Color(7, 177, 33), shims_1.Color.fromString("red"), shims_1.Color.fromString("black"), shims_1.Color.fromString("blue")];
	        this.frenzyCol = 0;
	        this.SMILE_DIFF = 2;
	        this.DAMPING = 7;
	        this.MAX_TICKS_TOUCHING_GOAL = 60;
	        this.worldCup = false;
	        this.worldCupRound = 0;
	        this.pointsX = new Array(0);
	        this.pointsY = new Array(0);
	        this.p2Col = 1;
	        this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	            return undefined;
	        }
	        else {
	            var array = [];
	            for (var i = 0; i < dims[0]; i++) {
	                array.push(allocate(dims.slice(1)));
	            }
	            return array;
	        } }; return allocate(dims); })([200, 8]);
	    }
	    initStuff() {
	        this.p1XVar = 0;
	        this.p1YVar = 0;
	        this.p2XVar = 0;
	        this.p2YVar = 0;
	        this.ballXVar = 0;
	        this.ballYVar = 0;
	        this.splash1 = 0;
	        this.splash2 = 0;
	        this.splash3 = 0;
	        this.fEndGame = true;
	        this.p1X = 200;
	        this.p1Y = 0;
	        this.p2X = 800;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.p1Score = 0;
	        this.p2Score = 0;
	        this.ballOldX = this.ballX = 500;
	        this.ballOldY = this.ballY = 200;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.replayStart = this.replayPos = 0;
	        this.fP1Touched = this.fP2Touched = false;
	        this.playOnTicks = 10;
	        this.fPlayOn = false;
	        this.fExtraTime = false;
	        this.fGoldenGoal = false;
	        this.JUMPVEL = !this.fSuperSlime ? 31 : 65;
	        this.SLIMEVEL = !this.fSuperSlime ? 8 : 16;
	        this.GRAVITY = !this.fSuperSlime ? 2 : 8;
	    }
	    drawButtons() {
	        var buttons = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "World Cup"];
	        var fm = this.screen.getFontMetrics();
	        var darkBlue = new shims_1.Color(0, 0, 128);
	        for (var i = 0; i < 5; ++i) {
	            this.screen.setColor(darkBlue);
	            this.screen.fillRect(((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.drawString(buttons[i], ((2 * i + 1) * this.nWidth / 10 | 0) - (fm.stringWidth(buttons[i]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (fm.getHeight() / 2 | 0));
	        }
	        this.flip();
	    }
	    testButton(x, y) {
	        for (var i = 0; i < 5; ++i) {
	            if (x > ((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) && x < ((2 * i + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) && y > (this.nHeight * 2 / 10 | 0) && y < (this.nHeight * 3 / 10 | 0)) {
	                if (i === 4) {
	                    this.gameLength = 120000;
	                    this.worldCup = true;
	                }
	                else {
	                    this.gameLength = (1 << i) * 60000;
	                    this.worldCup = false;
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    handleEvent(event) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((event.id)) {
	                case 401:
	                case 403:
	                    if (this.fCanChangeCol) {
	                        switch ((event.key)) {
	                            case 54:
	                                this.fSuperSlime = !this.fSuperSlime;
	                                this.repaint();
	                                break;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                do {
	                                    this.p2Col = this.p2Col !== 0 ? this.p2Col - 1 : this.slimaryCols.length - 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                do {
	                                    this.p2Col = this.p2Col === this.slimaryCols.length - 1 ? 0 : this.p2Col + 1;
	                                } while ((this.p2Col === this.p1Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 83:
	                            case 115:
	                                do {
	                                    this.p1Col = this.p1Col === this.slimaryCols.length - 1 ? 0 : this.p1Col + 1;
	                                } while ((this.p1Col === this.p2Col));
	                                this.drawScores();
	                                this.repaint();
	                                break;
	                            case 87:
	                            case 119:
	                                while ((true)) {
	                                    this.p1Col = this.p1Col !== 0 ? this.p1Col - 1 : this.slimaryCols.length - 1;
	                                    if (this.p1Col !== this.p2Col) {
	                                        this.drawScores();
	                                        this.repaint();
	                                        break;
	                                    }
	                                }
	                                ;
	                        }
	                    }
	                    if (!this.fEndGame) {
	                        switch ((event.key)) {
	                            case 32:
	                                this.mousePressed = true;
	                                return false;
	                            case 65:
	                            case 97:
	                                this.p1XV = -this.SLIMEVEL;
	                                return false;
	                            case 66:
	                            case 98:
	                                this.toggleBuffering();
	                                return false;
	                            case 68:
	                            case 100:
	                                this.p1XV = this.SLIMEVEL;
	                                return false;
	                            case 73:
	                            case 105:
	                            case 1004:
	                                if (this.p2Y === 0 && !this.worldCup) {
	                                    this.p2YV = this.JUMPVEL;
	                                }
	                                return false;
	                            case 74:
	                            case 106:
	                            case 1006:
	                                if (!this.worldCup) {
	                                    this.p2XV = -this.SLIMEVEL;
	                                }
	                                return false;
	                            case 75:
	                            case 107:
	                            case 1005:
	                                if (!this.worldCup) {
	                                    this.fP2Sticky = true;
	                                }
	                                return false;
	                            case 76:
	                            case 108:
	                            case 1007:
	                                if (!this.worldCup) {
	                                    this.p2XV = this.SLIMEVEL;
	                                }
	                                return false;
	                            case 83:
	                            case 115:
	                                this.fP1Sticky = true;
	                                return false;
	                            case 87:
	                            case 119:
	                                if (this.p1Y === 0) {
	                                    this.p1YV = this.JUMPVEL;
	                                }
	                        }
	                    }
	                    break;
	                case 402:
	                case 404:
	                    switch ((event.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.p1XV = 0;
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                        case 1006:
	                            if (this.p2XV < 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                        case 1005:
	                            this.fP2Sticky = false;
	                            return false;
	                        case 76:
	                        case 108:
	                        case 1007:
	                            if (this.p2XV > 0 && !this.worldCup) {
	                                this.p2XV = 0;
	                            }
	                            return false;
	                        case 83:
	                        case 115:
	                            this.fP1Sticky = false;
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    this.mousePressed = true;
	                    if (!this.fInPlay && this.testButton(event.x, event.y)) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p1XV = 0;
	                        this.p1YV = 0;
	                        this.p2XV = 0;
	                        this.p2YV = 0;
	                        this.ballX = 500;
	                        this.ballY = 200;
	                        this.ballOldX = 500;
	                        this.ballOldY = 200;
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1Score = 0;
	                        this.p2Score = 0;
	                        this.promptMsg = "";
	                        this.paint(this.getGraphics());
	                        try {
	                            yield shims_1.Thread.sleep(100);
	                        }
	                        catch (var4) {
	                        }
	                        ;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
	                    this.requestFocus();
	            }
	            return false;
	        });
	    }
	    DrawSlimers() {
	        this.splash1 = 0;
	        this.splash2 = 0;
	        this.splash3 = 0;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, 0, this.nWidth, this.nHeight);
	        this.screen.setColor(new shims_1.Color(10, 0, 210));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) - 20, (this.nWidth / 1 | 0), 20);
	        var k1 = (this.nWidth / 10 | 0);
	        var j2 = (this.nHeight / 10 | 0);
	        var i3 = (this.nWidth / 50 | 0);
	        var j3 = (this.nHeight / 25 | 0);
	        var k3 = (this.ballX * this.nWidth / 1000 | 0);
	        var l3 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var i = (this.p1OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        var l = (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);
	        this.p1XVar = i;
	        this.p1YVar = l;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        i = (this.p2OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);
	        this.p2XVar = i;
	        this.p2YVar = l;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(i, l, k1, j2);
	        if (!this.fEndGame) {
	            this.MoveBall();
	        }
	        i = (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p1Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 2 / 5 | 0);
	        this.pointsX[3] = i + (k1 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        var l4 = this.p1X + 38;
	        var i5 = this.p1Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        var i4 = i - k3;
	        var j4 = l - l3;
	        var k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        var flag = Math.random() < 0.01;
	        if (flag) {
	            this.p1Blink = 5;
	        }
	        if (this.p1Blink === 0) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p1Blink;
	        }
	        var i2;
	        var l2;
	        var k;
	        var j1;
	        var k5;
	        if (this.p1Score > this.p2Score + 2) {
	            i2 = (this.p1X * this.nWidth / 1000 | 0);
	            l2 = (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);
	            k = (this.nWidth / 20 | 0);
	            j1 = (this.nHeight / 20 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        i = (this.p2X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p2Col] : this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
	        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.pointsX[0] = this.pointsX[2] = i + (k1 / 2 | 0);
	        this.pointsX[1] = i + (k1 * 3 / 5 | 0);
	        this.pointsX[3] = i + (k1 * 7 / 8 | 0);
	        this.pointsY[0] = l;
	        this.pointsY[1] = this.pointsY[3] = l + (j2 / 2 | 0);
	        this.pointsY[2] = l + j2;
	        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
	        l4 = this.p2X - 18;
	        i5 = this.p2Y - 60;
	        i = (l4 * this.nWidth / 1000 | 0);
	        l = (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);
	        i4 = i - k3;
	        j4 = l - l3;
	        k4 = (Math.sqrt((i4 * i4 + j4 * j4)) | 0);
	        flag = Math.random() < 0.01;
	        if (flag) {
	            this.p2Blink = 5;
	        }
	        if (this.p2Blink === 0) {
	            this.screen.setColor(!flag ? shims_1.Color.fromString("white") : shims_1.Color.fromString("gray"));
	            this.screen.fillOval(i - i3, l - j3, i3, j3);
	            if (k4 > 0 && !flag) {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));
	            }
	        }
	        else {
	            --this.p2Blink;
	        }
	        if (this.p2Score > this.p1Score + 2) {
	            i2 = (this.nWidth / 20 | 0);
	            l2 = (this.nHeight / 20 | 0);
	            k = (this.p2X * this.nWidth / 1000 | 0) - i2;
	            j1 = (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);
	            k5 = 0;
	            do {
	                this.screen.setColor(shims_1.Color.fromString("black"));
	                this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
	                ++k5;
	            } while ((k5 < 3));
	        }
	        if (this.ballY < 90 && this.ballVY > 0) {
	            this.splash1 = 1;
	        }
	        if (this.p1Y < 90 && this.p1YV > 0) {
	            this.splash2 = 1;
	        }
	        if (this.p2Y < 90 && this.p2YV > 0) {
	            this.splash3 = 1;
	        }
	        this.updateParticlesHit();
	        this.drawParticlesHit();
	        this.updateParticlesHit2();
	        this.drawParticlesHit2();
	        this.updateParticlesHit3();
	        this.drawParticlesHit3();
	        this.drawScores();
	    }
	    paint(g) {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 6 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawLine(0, (4 * this.nHeight / 5 | 0) - 20, this.nWidth, (this.nHeight / 6 | 0) + 170);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.drawScores();
	        if (!this.fInPlay) {
	            this.DrawSlimers();
	            this.drawButtons();
	        }
	        this.DrawGoals();
	        this.drawPrompt();
	        if (!this.fInPlay) {
	            var fontmetrics = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            if (this.fSuperSlime) {
	                this.screen.drawString("Super Water Polo Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Super Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            else {
	                this.screen.drawString("Water Polo Slime!", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Soccer Slime!") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());
	            }
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            fontmetrics = this.screen.getFontMetrics();
	            this.screen.drawString("Written by Quin Pendragon + Anonymous Tipster", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth("Written by Quin Pendragon + Anonymous Tipster") / 2 | 0), (this.nHeight / 2 | 0) + fontmetrics.getHeight() * 2);
	        }
	        this.flip();
	    }
	    destroy() {
	        this.gameThread.stop();
	        this.gameThread = null;
	    }
	    ReplayFrame(i, j, k, l, i1, flag) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (flag) {
	                this.ballX = -1000;
	                this.ballOldX = 500;
	                this.ballY = -1000;
	                this.ballOldY = 500;
	                this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
	            }
	            else {
	                var j1 = i === 0 ? 199 : i - 1;
	                this.p1OldX = this.replayData[j1][0];
	                this.p1OldY = this.replayData[j1][1];
	                this.p2OldX = this.replayData[j1][2];
	                this.p2OldY = this.replayData[j1][3];
	                if (i === 0) {
	                    this.ballOldX = 500;
	                    this.ballOldY = 200;
	                }
	                else {
	                    this.ballOldX = this.replayData[j1][4];
	                    this.ballOldY = this.replayData[j1][5];
	                }
	            }
	            this.p1X = this.replayData[i][0];
	            this.p1Y = this.replayData[i][1];
	            this.p2X = this.replayData[i][2];
	            this.p2Y = this.replayData[i][3];
	            this.ballX = this.replayData[i][4];
	            this.ballY = this.replayData[i][5];
	            this.p1Col = this.replayData[i][6];
	            this.p2Col = this.replayData[i][7];
	            this.ballVX = 0;
	            this.ballVY = 1;
	            if ((i / 10 | 0) % 2 > 0) {
	                this.screen.setColor(shims_1.Color.fromString("red"));
	                this.screen.drawString("Replay...", j, k);
	            }
	            else {
	                this.screen.setColor(shims_1.Color.fromString("blue"));
	                this.screen.fillRect(j, k - i1, l, i1 * 2);
	            }
	            this.DrawSlimers();
	            this.DrawGoals();
	            try {
	                yield shims_1.Thread.sleep(20);
	            }
	            catch (var9) {
	            }
	            ;
	        });
	    }
	    MakeTime(l) {
	        var l1 = Math.round(l / 10) % 100;
	        var l2 = Math.round(l / 1000) % 60;
	        var l3 = Math.round(l / 60000) % 60;
	        var s = "";
	        if (l3 < 10) {
	            s = s + "0";
	        }
	        s = s + l3;
	        s = s + ":";
	        if (l2 < 10) {
	            s = s + "0";
	        }
	        s = s + l2;
	        s = s + ":";
	        if (l1 < 10) {
	            s = s + "0";
	        }
	        s = s + l1;
	        return s;
	    }
	    MoveSlimers() {
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 0:
	                    this.controlP2v0();
	                    break;
	                case 1:
	                    this.controlP2v1();
	                    break;
	                case 2:
	                    this.controlP2v2();
	                    break;
	                case 3:
	                    this.controlP2v3();
	            }
	        }
	        this.p1X += this.p1XV;
	        if (this.p1X < 50) {
	            this.p1X = 50;
	        }
	        if (this.p1X > 950) {
	            this.p1X = 950;
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= this.GRAVITY;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 950) {
	            this.p2X = 950;
	        }
	        if (this.p2X < 50) {
	            this.p2X = 50;
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= this.GRAVITY;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    MoveBall() {
	        var k = (30 * this.nHeight / 1000 | 0);
	        var i = (this.ballOldX * this.nWidth / 1000 | 0);
	        var j = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	        this.ballY += --this.ballVY;
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var l1 = (this.ballX - this.p1X) * 2;
	            var i2 = this.ballY - this.p1Y;
	            var j2 = l1 * l1 + i2 * i2;
	            var k2 = this.ballVX - this.p1XV;
	            var l2 = this.ballVY - this.p1YV;
	            var i1;
	            var k1;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p1X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p1Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP1Sticky) {
	                        this.ballVY += this.p1YV - (2 * i2 * k1 / i1 | 0);
	                        this.ballVX += ((this.p1XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP1Touched = true;
	            }
	            l1 = (this.ballX - this.p2X) * 2;
	            i2 = this.ballY - this.p2Y;
	            j2 = l1 * l1 + i2 * i2;
	            k2 = this.ballVX - this.p2XV;
	            l2 = this.ballVY - this.p2YV;
	            if (i2 > 0 && j2 < 15625 && j2 > 25) {
	                i1 = (Math.sqrt(j2) | 0);
	                k1 = ((l1 * k2 + i2 * l2) / i1 | 0);
	                this.ballX = this.p2X + (l1 * 63 / i1 | 0);
	                this.ballY = this.p2Y + (i2 * 125 / i1 | 0);
	                if (k1 <= 0) {
	                    if (!this.fP2Sticky) {
	                        this.ballVX += ((this.p2XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);
	                        this.ballVY += this.p2YV - (2 * i2 * k1 / i1 | 0);
	                    }
	                    else {
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                    }
	                    if (this.ballVX < -15) {
	                        this.ballVX = -15;
	                    }
	                    if (this.ballVX > 15) {
	                        this.ballVX = 15;
	                    }
	                    if (this.ballVY < -22) {
	                        this.ballVY = -22;
	                    }
	                    if (this.ballVY > 22) {
	                        this.ballVY = 22;
	                    }
	                }
	                this.fP2Touched = true;
	            }
	            if (this.ballX < 15) {
	                this.ballX = 15;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX > 985) {
	                this.ballX = 985;
	                this.ballVX = -this.ballVX;
	            }
	            if (this.ballX <= 50 || this.ballX >= 950) {
	                if (this.ballY > 200 && this.ballOldY < 200 || this.ballY < 200 && this.ballOldY >= 200) {
	                    this.ballY = 200;
	                    this.ballVY *= -1;
	                }
	                if (this.ballY > 180 && this.ballY < 220) {
	                    if (this.ballX > 40 && this.ballX < 50 && this.ballVX < 0) {
	                        this.ballX = 50;
	                        this.ballVX *= -1;
	                    }
	                    if (this.ballX < 960 && this.ballX > 950 && this.ballVX > 0) {
	                        this.ballX = 950;
	                        this.ballVX *= -1;
	                    }
	                }
	            }
	            if (this.ballY < 84) {
	                this.ballY = 84;
	                this.ballVY = (-this.ballVY * 3 / 10 | 0);
	                this.ballVX = (this.ballVX * 3 / 10 | 0);
	            }
	        }
	        i = (this.ballX * this.nWidth / 1000 | 0);
	        j = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        this.ballXVar = i;
	        this.ballYVar = j;
	        this.screen.setColor(shims_1.Color.fromString("yellow"));
	        this.screen.fillOval(i - k, j - k, k * 2, k * 2);
	    }
	    DrawGoals() {
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.fillRect((this.nWidth / 20 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(this.nWidth - (this.nWidth / 20 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        this.screen.fillRect((this.nWidth * 9 / 10 | 0), (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) - 21, (this.nWidth / 1 | 0), 22);
	        this.screen.setColor(new shims_1.Color(10, 0, 210));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) - 20, (this.nWidth / 1 | 0), 20);
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        var p1TickX;
	        for (p1TickX = 0; p1TickX < (this.nWidth / 20 | 0); p1TickX += 5) {
	            this.screen.drawLine(p1TickX, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), p1TickX, (4 * this.nHeight / 5 | 0));
	            this.screen.drawLine(this.nWidth - p1TickX, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), this.nWidth - p1TickX, (4 * this.nHeight / 5 | 0));
	        }
	        for (p1TickX = (4 * this.nHeight / 5 | 0) - (this.nHeight / 5 | 0); p1TickX < (4 * this.nHeight / 5 | 0); p1TickX += 5) {
	            this.screen.drawLine(0, p1TickX, (this.nWidth / 20 | 0), p1TickX);
	            this.screen.drawLine(this.nWidth, p1TickX, this.nWidth - (this.nWidth / 20 | 0), p1TickX);
	        }
	        p1TickX = ((60 - this.p1TouchingGoal) * this.nWidth / 120 | 0);
	        this.screen.setColor(this.secondaryCols[this.p1Col]);
	        this.screen.fillRect(0, this.nHeight - 5, p1TickX, 5);
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect(p1TickX, this.nHeight - 5, (this.nWidth / 2 | 0) - p1TickX, 5);
	        var p2TickX = this.nWidth - ((60 - this.p2TouchingGoal) * this.nWidth / 120 | 0);
	        this.screen.setColor(this.secondaryCols[this.p2Col]);
	        this.screen.fillRect(p2TickX, this.nHeight - 5, this.nWidth, 5);
	        this.screen.setColor(shims_1.Color.fromString("gray"));
	        this.screen.fillRect((this.nWidth / 2 | 0), this.nHeight - 5, p2TickX - (this.nWidth / 2 | 0), 5);
	    }
	    DrawStatus() {
	        var g = this.screen;
	        var fontmetrics = this.screen.getFontMetrics();
	        var s = null;
	        var time = this.MakeTime(this.gameTime);
	        var i = (this.nHeight / 20 | 0);
	        var k = 0;
	        var kt = fontmetrics.stringWidth(time);
	        if (this.worldCup) {
	            switch ((this.worldCupRound)) {
	                case 1:
	                    s = "Quarter Finals";
	                    break;
	                case 2:
	                    s = "Semi-Finals";
	                    break;
	                case 3:
	                    s = "Final";
	                    break;
	                default:
	                    s = "Qualifying";
	            }
	            if (this.fGoldenGoal) {
	                s = s + " [Golden Goal]";
	            }
	            else if (this.fExtraTime) {
	                s = s + " [Extra Time]";
	            }
	            k = fontmetrics.stringWidth(s);
	        }
	        var mw = k <= kt ? kt : k;
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect((this.nWidth / 2 | 0) - (mw / 2 | 0) - 5, 0, mw + 10, i + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(time, (this.nWidth / 2 | 0) - (kt / 2 | 0), fontmetrics.getAscent() + 20);
	        if (s != null) {
	            this.screen.drawString(s, (this.nWidth / 2 | 0) - (k / 2 | 0), fontmetrics.getAscent() + 20 - fontmetrics.getHeight());
	        }
	    }
	    drawPrompt$() {
	        this.screen.setColor(shims_1.Color.fromString("blue"));
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.drawPrompt(this.promptMsg, 0);
	    }
	    drawPrompt(s, i) {
	        if (((typeof s === 'string') || s === null) && ((typeof i === 'number') || i === null)) {
	            return (() => {
	                var fontmetrics = this.screen.getFontMetrics();
	                this.screen.setColor(shims_1.Color.fromString("lightGray"));
	                this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fontmetrics.getHeight() * (i + 1) + 10);
	            })();
	        }
	        else if (s === undefined && i === undefined) {
	            return this.drawPrompt$();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    promptBox(msg1, msg2) {
	        var fontmetrics = this.screen.getFontMetrics();
	        var len1 = fontmetrics.stringWidth(msg1);
	        var len2 = fontmetrics.stringWidth(msg2);
	        var maxlen = len1 <= len2 ? len2 : len1;
	        this.screen.setColor(shims_1.Color.fromString("darkGray"));
	        this.screen.fillRect((this.nWidth / 2 | 0) - (maxlen / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), maxlen + 40, (this.nHeight / 5 | 0));
	        this.screen.setColor(shims_1.Color.fromString("white"));
	        this.screen.drawString(msg1, (this.nWidth / 2 | 0) - (len1 / 2 | 0), (this.nHeight * 9 / 20 | 0));
	        this.screen.drawString(msg2, (this.nWidth / 2 | 0) - (len2 / 2 | 0), (this.nHeight * 11 / 20 | 0));
	        this.flip();
	    }
	    SaveReplayData() {
	        this.replayData[this.replayPos][0] = this.p1X;
	        this.replayData[this.replayPos][1] = this.p1Y;
	        this.replayData[this.replayPos][2] = this.p2X;
	        this.replayData[this.replayPos][3] = this.p2Y;
	        this.replayData[this.replayPos][4] = this.ballX;
	        this.replayData[this.replayPos][5] = this.ballY;
	        this.replayData[this.replayPos][6] = this.p1Col;
	        this.replayData[this.replayPos][7] = this.p2Col;
	        ++this.replayPos;
	        if (this.replayPos >= 200) {
	            this.replayPos = 0;
	        }
	        if (this.replayStart === this.replayPos) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= 200) {
	            this.replayStart = 0;
	        }
	    }
	    drawScores() {
	        var g = this.screen;
	        var k = (this.nHeight / 20 | 0);
	        var fm = this.screen.getFontMetrics();
	        var i = fm.stringWidth("Replay...");
	        g.setColor(shims_1.Color.fromString("blue"));
	        g.fillRect(0, 0, this.nWidth, k + 22);
	        g.setColor(shims_1.Color.fromString("white"));
	        g.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, (this.nWidth / 20 | 0), k);
	        var p2ScrStr = this.p2Score + " : " + this.slimeColText[this.p2Col];
	        g.drawString(p2ScrStr, this.nWidth - (this.nWidth / 20 | 0) - fm.stringWidth(p2ScrStr), k);
	    }
	    checkScored() {
	        if (this.ballY >= 200 || this.ballX >= 40 && this.ballX <= 960) {
	            return false;
	        }
	        else {
	            this.nScoreX = this.ballX;
	            this.fPlayOn = true;
	            this.playOnTicks = 10;
	            return true;
	        }
	    }
	    updateParticlesHit() {
	        for (var i = 0; i < this.NUM_PARTICLES_HIT; ++i) {
	            var incrY = ((Math.random() * 2.0 + 1.0) | 0);
	            var incrX = ((Math.random() * this.ballVX + 5.0) | 0);
	            var randY = ((Math.random() * this.ballVY + 1.0) | 0);
	            this.particle_y_HIT[i] += this.particle_yv_HIT[i];
	            this.particle_x_HIT[i] += this.particle_xv_HIT[i];
	            ++this.particle_yv_HIT[i];
	            if ((this.particle_y_HIT[i] < 0 || this.particle_y_HIT[i] > 600) && this.splash1 === 1) {
	                this.particle_x_HIT[i] = this.ballXVar;
	                this.particle_y_HIT[i] = this.ballYVar;
	                this.particle_yv_HIT[i] = -1 - randY;
	                if (incrY === 1) {
	                    this.particle_xv_HIT[i] = -1 - incrX + this.ballVX;
	                }
	                if (incrY === 2) {
	                    this.particle_xv_HIT[i] = 1 + incrX + this.ballVX;
	                }
	            }
	        }
	    }
	    drawParticlesHit() {
	        for (var i = 0; i < this.NUM_PARTICLES_HIT; ++i) {
	            var rand = ((Math.random() * 3.0) | 0);
	            if (rand === 1) {
	                this.screen.setColor(new shims_1.Color(100, 100, 250));
	            }
	            if (rand === 2) {
	                this.screen.setColor(new shims_1.Color(200, 200, 250));
	            }
	            if (rand === 3) {
	                this.screen.setColor(new shims_1.Color(250, 250, 250));
	            }
	            this.screen.fillOval(this.particle_x_HIT[i], this.particle_y_HIT[i], 3, 3);
	        }
	    }
	    updateParticlesHit2() {
	        for (var i = 0; i < this.NUM_PARTICLES_HIT2; ++i) {
	            var incrY = ((Math.random() * 5.0 + 1.0) | 0);
	            var incrX = ((Math.random() * this.p1XV + 1.0) | 0);
	            var randY = ((Math.random() * this.p1YV / 2.0 + 1.0) | 0);
	            this.particle_y_HIT2[i] += this.particle_yv_HIT2[i];
	            this.particle_x_HIT2[i] += this.particle_xv_HIT2[i];
	            ++this.particle_yv_HIT2[i];
	            if ((this.particle_y_HIT2[i] < 0 || this.particle_y_HIT2[i] > 600) && this.splash2 === 1) {
	                this.particle_x_HIT2[i] = this.p1XVar;
	                this.particle_y_HIT2[i] = this.p1YVar;
	                this.particle_yv_HIT2[i] = -1 - randY;
	                if (incrY === 1) {
	                    this.particle_xv_HIT2[i] = -1 - incrX + this.p1XV;
	                }
	                if (incrY === 2) {
	                    this.particle_xv_HIT2[i] = 1 + incrX + this.p1XV;
	                }
	            }
	        }
	    }
	    drawParticlesHit2() {
	        for (var i = 0; i < this.NUM_PARTICLES_HIT2; ++i) {
	            var rand = ((Math.random() * 3.0) | 0);
	            if (rand === 1) {
	                this.screen.setColor(new shims_1.Color(100, 100, 250));
	            }
	            if (rand === 2) {
	                this.screen.setColor(new shims_1.Color(200, 200, 250));
	            }
	            if (rand === 3) {
	                this.screen.setColor(new shims_1.Color(250, 250, 250));
	            }
	            this.screen.fillOval(this.particle_x_HIT2[i], this.particle_y_HIT2[i], 3, 3);
	        }
	    }
	    updateParticlesHit3() {
	        for (var i = 0; i < this.NUM_PARTICLES_HIT3; ++i) {
	            var incrY = ((Math.random() * 5.0 + 1.0) | 0);
	            var incrX = ((Math.random() * this.p2XV + 1.0) | 0);
	            var randY = ((Math.random() * this.p2YV / 2.0 + 1.0) | 0);
	            var randX = ((Math.random() * 10.0 + 1.0) | 0);
	            this.particle_y_HIT3[i] += this.particle_yv_HIT3[i];
	            this.particle_x_HIT3[i] += this.particle_xv_HIT3[i];
	            ++this.particle_yv_HIT3[i];
	            if ((this.particle_y_HIT3[i] < 0 || this.particle_y_HIT3[i] > 600) && this.splash3 === 1) {
	                this.particle_x_HIT3[i] = this.p2XVar;
	                this.particle_y_HIT3[i] = this.p2YVar;
	                this.particle_yv_HIT3[i] = -1 - randY;
	                if (incrY === 1) {
	                    this.particle_xv_HIT3[i] = -1 - incrX + this.p2XV;
	                }
	                if (incrY === 2) {
	                    this.particle_xv_HIT3[i] = 1 + incrX + this.p2XV;
	                }
	            }
	        }
	    }
	    drawParticlesHit3() {
	        for (var i = 0; i < this.NUM_PARTICLES_HIT3; ++i) {
	            var rand = ((Math.random() * 3.0) | 0);
	            if (rand === 1) {
	                this.screen.setColor(new shims_1.Color(100, 100, 250));
	            }
	            if (rand === 2) {
	                this.screen.setColor(new shims_1.Color(200, 200, 250));
	            }
	            if (rand === 3) {
	                this.screen.setColor(new shims_1.Color(250, 250, 250));
	            }
	            this.screen.fillOval(this.particle_x_HIT3[i], this.particle_y_HIT3[i], 3, 3);
	        }
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.worldCupRound = 0;
	            do {
	                this.initStuff();
	                this.replayPos = this.replayStart = 0;
	                this.scoringRun = 0;
	                this.fP1Touched = this.fP2Touched = false;
	                this.gameTime = 0;
	                this.startTime = shims_1.System.currentTimeMillis();
	                this.fEndGame = false;
	                this.fCanChangeCol = false;
	                this.mousePressed = false;
	                this.gameTime = Math.round(this.gameLength);
	                this.fInPlay = true;
	                this.fEndGame = false;
	                var l;
	                if (this.worldCup) {
	                    this.paint(this.getGraphics());
	                    do {
	                        this.p2Col = ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);
	                    } while ((this.p1Col === this.p2Col));
	                    l = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
	                    switch ((this.worldCupRound)) {
	                        case 0:
	                            this.promptBox("Qualifying Round", l);
	                            this.gameLength = 30000;
	                            break;
	                        case 1:
	                            this.promptBox("Quarter Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 2:
	                            this.promptBox("Semi-Finals", l);
	                            this.gameLength = 120000;
	                            break;
	                        case 3:
	                            this.promptBox("World Cup Final", l);
	                            this.gameLength = 300000;
	                    }
	                    try {
	                        yield shims_1.Thread.sleep(4000);
	                    }
	                    catch (var5) {
	                    }
	                    ;
	                    this.repaint();
	                    this.flip();
	                }
	                while ((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1Score === this.p2Score)) {
	                    this.gameTime = this.startTime + Math.round(this.gameLength) - shims_1.System.currentTimeMillis();
	                    if (this.gameTime < 0) {
	                        this.gameTime = 0;
	                    }
	                    if (this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1Score === this.p2Score) {
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ".", "And the game goes into extra time...");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var10) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                        this.startTime += 30000;
	                        this.gameTime += 30000;
	                        this.fExtraTime = true;
	                    }
	                    else if (this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1Score === this.p2Score) {
	                        this.fGoldenGoal = true;
	                        l = this.p1Score !== 0 ? " " + this.p1Score : " nil";
	                        this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ", and the game goes into Golden Goal.", "The next player to score will win the match!");
	                        try {
	                            yield shims_1.Thread.sleep(4000);
	                        }
	                        catch (var9) {
	                        }
	                        ;
	                        this.repaint();
	                        this.flip();
	                    }
	                    this.SaveReplayData();
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.MoveSlimers();
	                    this.DrawSlimers();
	                    this.DrawGoals();
	                    this.DrawStatus();
	                    this.flip();
	                    if (this.p1X < 150) {
	                        ++this.p1TouchingGoal;
	                    }
	                    else {
	                        this.p1TouchingGoal = 0;
	                    }
	                    if (this.p2X > 850) {
	                        ++this.p2TouchingGoal;
	                    }
	                    else {
	                        this.p2TouchingGoal = 0;
	                    }
	                    if (this.fPlayOn) {
	                        --this.playOnTicks;
	                    }
	                    else {
	                        this.fPlayOn = this.checkScored();
	                    }
	                    if (this.playOnTicks === 0 || this.p1TouchingGoal > 60 || this.p2TouchingGoal > 60) {
	                        var var11 = shims_1.System.currentTimeMillis();
	                        if (this.p1TouchingGoal > 60) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.p2TouchingGoal > 60) {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
	                        }
	                        else if (this.nScoreX < 500) {
	                            ++this.p2Score;
	                            this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
	                        }
	                        else {
	                            ++this.p1Score;
	                            this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
	                        }
	                        this.drawPrompt();
	                        this.drawPrompt("Click mouse for replay...", 1);
	                        this.flip();
	                        this.mousePressed = false;
	                        if (this.gameThread != null) {
	                            try {
	                                yield shims_1.Thread.sleep(2500);
	                            }
	                            catch (var8) {
	                            }
	                            ;
	                        }
	                        if (this.mousePressed) {
	                            this.SaveReplayData();
	                            yield this.DoReplay();
	                        }
	                        this.promptMsg = "";
	                        this.drawPrompt();
	                        this.playOnTicks = 10;
	                        this.fPlayOn = false;
	                        this.startTime += shims_1.System.currentTimeMillis() - var11;
	                        this.ballX = 490 + ((Math.random() * 20.0) | 0);
	                        this.ballY = 190 + ((Math.random() * 20.0) | 0);
	                        this.ballVX = 0;
	                        this.ballVY = 0;
	                        this.p1X = 200;
	                        this.p1Y = 0;
	                        this.p1YV = 0;
	                        this.p2X = 800;
	                        this.p2Y = 0;
	                        this.p2YV = 0;
	                        this.replayStart = this.replayPos = 0;
	                        this.repaint();
	                    }
	                    if (this.gameThread != null) {
	                        try {
	                            if (this.fPlayOn) {
	                                yield shims_1.Thread.sleep(120);
	                            }
	                            else {
	                                yield shims_1.Thread.sleep(20);
	                            }
	                        }
	                        catch (var7) {
	                        }
	                        ;
	                    }
	                }
	                ;
	                this.fEndGame = true;
	                if (this.fPlayOn) {
	                    if (this.nScoreX < 500) {
	                        ++this.p2Score;
	                        this.promptMsg = this.slimeColText[this.p2Col] + " scores at the final whistle!";
	                    }
	                    else {
	                        ++this.p1Score;
	                        this.promptMsg = this.slimeColText[this.p1Col] + " scores at the final whistle!";
	                    }
	                    this.drawPrompt();
	                }
	                else {
	                    this.drawPrompt("And that\'s the final whistle!", 0);
	                }
	                if (this.worldCup) {
	                    if (this.p1Score === this.p2Score) {
	                        this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                        this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
	                        this.worldCup = false;
	                        this.flip();
	                    }
	                    else if (this.p1Score >= this.p2Score) {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the world cup!", 1);
	                                break;
	                            case 1:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
	                                break;
	                            case 2:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
	                                break;
	                            case 3:
	                                this.drawPrompt(this.slimeColText[this.p1Col] + " wins the WORLD CUP!!!!!", 1);
	                        }
	                        if (this.worldCupRound === 3) {
	                            this.worldCup = false;
	                            this.promptBox("You win the world cup!!!", "Congratulations!");
	                        }
	                        else {
	                            ++this.worldCupRound;
	                        }
	                    }
	                    else {
	                        switch ((this.worldCupRound)) {
	                            case 0:
	                            case 1:
	                                this.promptBox("You have been eliminated.", "Goodbye.");
	                                break;
	                            case 2:
	                                this.promptBox("You have been knocked out of the semifinals.", "You played well.");
	                                break;
	                            case 3:
	                                this.promptBox("You came second.", "Are you satisfied with that?");
	                        }
	                        this.worldCup = false;
	                    }
	                }
	                else if (this.p1Score === this.p2Score) {
	                    this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
	                }
	                else if (this.p1Score < this.p2Score) {
	                    this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1);
	                }
	                else {
	                    this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
	                }
	                this.flip();
	                try {
	                    yield shims_1.Thread.sleep(5000);
	                }
	                catch (var6) {
	                }
	                ;
	                this.initStuff();
	            } while ((this.worldCup));
	            this.fCanChangeCol = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    init() {
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        this.fInPlay = this.fEndGame = false;
	        this.fCanChangeCol = true;
	        this.initStuff();
	        this.promptMsg = "Click on an option to play...";
	        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
	        this.screen = this.getGraphics();
	        this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	    }
	    toggleBuffering() {
	        if (this.doubleBuffered = !this.doubleBuffered) {
	            this.screen = this.backBuffer.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        else {
	            this.screen = this.getGraphics();
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	        }
	        this.repaint();
	    }
	    DoReplay() {
	        return __awaiter(this, void 0, void 0, function* () {
	            var fontmetrics = this.screen.getFontMetrics();
	            var i = fontmetrics.stringWidth("Replay...");
	            var j = fontmetrics.getHeight();
	            var k = (this.nWidth / 2 | 0) - (i / 2 | 0);
	            var l = (this.nHeight / 2 | 0) - j;
	            this.promptMsg = "Click the mouse to continue...";
	            this.mousePressed = false;
	            var i1 = this.replayPos - 1;
	            while ((!this.mousePressed)) {
	                ++i1;
	                if (i1 >= 200) {
	                    i1 = 0;
	                }
	                if (i1 === this.replayPos) {
	                    try {
	                        yield shims_1.Thread.sleep(1000);
	                    }
	                    catch (var9) {
	                    }
	                    ;
	                    i1 = this.replayStart;
	                    this.paint(this.getGraphics());
	                }
	                yield this.ReplayFrame(i1, k, l, i, j, false);
	                this.flip();
	            }
	            ;
	            this.promptMsg = "";
	            this.paint(this.getGraphics());
	        });
	    }
	    flip() {
	        if (this.doubleBuffered) {
	            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
	        }
	    }
	    getBallBounceX() {
	        var t = this.ballVY + (Math.sqrt((this.ballVY * this.ballVY + 2 * this.ballY)) | 0);
	        var ballBounceX = this.ballX + t * this.ballVX;
	        if (ballBounceX < 0) {
	            ballBounceX = -ballBounceX;
	        }
	        if (ballBounceX > 1000) {
	            ballBounceX = 1000 - ballBounceX;
	        }
	        return ballBounceX;
	    }
	    getBallMaxY() {
	        return this.ballVY < 0 ? this.ballY : this.ballY + (this.ballVY * this.ballVY / 2 | 0);
	    }
	    controlP2v0() {
	        this.p2XV = 0;
	        if (this.ballX > this.p2X + 5 && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.ballX + 50 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X + 50 && this.p2YV === 0 && this.ballY > 10 && this.ballY < 150) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v1() {
	        this.p2XV = 0;
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        if (bounceX > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2X < 150) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v2() {
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var4 = true;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (bounceX > 900) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = this.SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = this.SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && bounceX > 500 && ballMaxY > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {
	            this.p2XV = -this.SLIMEVEL;
	        }
	    }
	    controlP2v3() {
	        var SLIMEVEL = (this.SLIMEVEL * 4 / 3 | 0);
	        var bounceX = this.getBallBounceX();
	        var ballMaxY = this.getBallMaxY();
	        if (this.ballVY >= 1) {
	            var var10000 = this.ballVY;
	        }
	        else {
	            var var5 = true;
	        }
	        if (this.p2X < 790) {
	            this.p2XV = SLIMEVEL;
	        }
	        else if (this.p2X > 830) {
	            this.p2XV = -SLIMEVEL;
	        }
	        else {
	            this.p2XV = 0;
	        }
	        if (bounceX > 900) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (bounceX + 20 < this.p2X) {
	            this.fP2Sticky = false;
	            this.p2XV = -SLIMEVEL;
	        }
	        if (this.ballX > this.p2X - 10) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.ballX + 30 > this.p2X && this.p2YV === 0) {
	            this.fP2Sticky = false;
	            this.p2YV = this.JUMPVEL;
	        }
	        if (bounceX > this.p2X + 50 && this.p2YV === 0) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.ballX > this.p2X && this.ballX < 960) {
	            this.fP2Sticky = true;
	        }
	        if (this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
	            this.p2XV = SLIMEVEL;
	        }
	        if (this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && (this.ballVY / 4 | 0) === 0 && this.p1X < 400 && this.p2X < 848) {
	            if (this.p2X < 900) {
	                this.p2XV = SLIMEVEL;
	            }
	            if (this.ballX > 800 && bounceX > 950 && this.p2YV === 0 && ballMaxY > 40) {
	                this.p2YV = this.JUMPVEL;
	            }
	        }
	        if (this.p2YV === this.JUMPVEL) {
	            if (ballMaxY < 110) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < this.p2X - 400) {
	                this.p2YV = 0;
	            }
	            if (this.ballY < 80) {
	                this.p2YV = 0;
	            }
	            if (this.ballX < 900 && this.p2X > 900) {
	                this.p2YV = 0;
	            }
	            if (this.p2XV > 0 && ballMaxY > 200 && bounceX > this.p2X + 300) {
	                this.p2YV = 0;
	            }
	        }
	        if (this.p2YV === 0 && this.p2X < 400 && bounceX > this.p2X + 400 && ballMaxY > 50) {
	            this.p2YV = this.JUMPVEL;
	        }
	        if (this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / SLIMEVEL | 0)) {
	            this.p2XV = -SLIMEVEL;
	        }
	    }
	    method_rn_WaterPoloSlime_p_1(s) {
	        shims_1.System.out.println(s);
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = WaterPoloSlime;


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	const shims_1 = __webpack_require__(3);
	class Class_rn_e_1 {
	    constructor() {
	        this.field_rn_e_long_17 = 0;
	        this.field_rn_e_char_18 = 0;
	        this.field_rn_e_do_19 = 0;
	        this.field_rn_e_if_20 = 0;
	        this.field_rn_e_e_21 = 0;
	        this.field_rn_e_d_22 = 0;
	        this.field_rn_e_try_23 = 0;
	        this.field_rn_e_new_24 = 0;
	        this.field_rn_e_int_25 = 0;
	        this.field_rn_e_for_26 = 0;
	        this.field_rn_e_c_27 = 0;
	        this.field_rn_e_void_28 = 0;
	        this.field_rn_e_b_29 = 0;
	    }
	    method_rn_e_a_11(var1, var2) {
	        this.field_rn_e_byte_30 = var1;
	        this.field_rn_e_b_29 = var2;
	    }
	    method_rn_e_a_12(var1) {
	        this.field_rn_e_long_17 = this.field_rn_e_b_29 === 2 ? var1[0] : 1000 - var1[0];
	        this.field_rn_e_char_18 = var1[1];
	        this.field_rn_e_do_19 = this.field_rn_e_b_29 === 2 ? var1[2] : -var1[2];
	        this.field_rn_e_if_20 = var1[3];
	        this.field_rn_e_e_21 = this.field_rn_e_b_29 === 2 ? var1[4] : 1000 - var1[8];
	        this.field_rn_e_d_22 = this.field_rn_e_b_29 === 2 ? var1[5] : var1[9];
	        this.field_rn_e_try_23 = this.field_rn_e_b_29 === 2 ? var1[6] : -var1[10];
	        this.field_rn_e_new_24 = this.field_rn_e_b_29 === 2 ? var1[7] : var1[11];
	        this.field_rn_e_int_25 = this.field_rn_e_b_29 === 2 ? var1[8] : 1000 - var1[4];
	        this.field_rn_e_for_26 = this.field_rn_e_b_29 === 2 ? var1[9] : var1[5];
	        this.field_rn_e_c_27 = this.field_rn_e_b_29 === 2 ? var1[10] : -var1[6];
	        this.field_rn_e_void_28 = this.field_rn_e_b_29 === 2 ? var1[11] : var1[7];
	    }
	    method_rn_e_if_14() {
	        return "AI ";
	    }
	    method_rn_e_do_15() {
	        return shims_1.Color.fromString("black");
	    }
	    method_rn_e_a_16(var1) {
	        if (this.field_rn_e_b_29 === 1) {
	            switch ((var1)) {
	                case 0:
	                    this.field_rn_e_byte_30.method_rn_SlimeTennis_c_102();
	                    break;
	                case 1:
	                    this.field_rn_e_byte_30.method_rn_SlimeTennis_e_101();
	                    break;
	                case 2:
	                    this.field_rn_e_byte_30.method_rn_SlimeTennis_else_104();
	                    break;
	                case 3:
	                    this.field_rn_e_byte_30.method_rn_SlimeTennis_byte_103();
	            }
	        }
	        else if (this.field_rn_e_b_29 === 2) {
	            switch ((var1)) {
	                case 0:
	                    this.field_rn_e_byte_30.method_rn_SlimeTennis_g_105();
	                    break;
	                case 1:
	                    this.field_rn_e_byte_30.method_rn_SlimeTennis_l_106();
	                    break;
	                case 2:
	                    this.field_rn_e_byte_30.method_rn_SlimeTennis_void_108();
	                    break;
	                case 3:
	                    this.field_rn_e_byte_30.method_rn_SlimeTennis_goto_107();
	            }
	        }
	    }
	}
	Class_rn_e_1.field_rn_e_else_31 = 0;
	Class_rn_e_1.field_rn_e_case_32 = 1;
	Class_rn_e_1.field_rn_e_goto_33 = 2;
	Class_rn_e_1.field_rn_e_a_34 = 3;
	class Class_rn_i_10 {
	    constructor() {
	        this.field_rn_i_do_138 = true;
	        this.field_rn_i_a_139 = true;
	    }
	    static field_rn_i_if_140_$LI$() { if (Class_rn_i_10.field_rn_i_if_140 == null)
	        Class_rn_i_10.field_rn_i_if_140 = ['r', 'o', '>', '<', 'o', 'r', 'z']; return Class_rn_i_10.field_rn_i_if_140; }
	    ;
	    static method_rn_i_a_130() {
	        return true;
	    }
	    static method_rn_i_a_131(var0, var1) {
	        var var3 = 1000000;
	        try {
	            var var5 = (new shims_1.URL(var0.getCodeBase() + "highscores.php?min")).openStream();
	            var var6 = new shims_1.BufferedReader(new shims_1.InputStreamReader(var5));
	            var3 = shims_1.Long.parseLong(var6.readLine());
	            var6.close();
	            var5.close();
	        }
	        catch (var7) {
	            shims_1.System.out.println("Couldn\'t connect to server!\n" + var7);
	            return false;
	        }
	        ;
	        return var1 > var3;
	    }
	    static method_rn_i_a_132(var0, var1, var3, var5) {
	        try {
	            var var6 = (new shims_1.URL(var0.getCodeBase() + "submitscore.php?scr=" + var1 + "&lev=" + var3 + "&nam=" + var5 + "&danno=" + new String(Class_rn_i_10.field_rn_i_if_140_$LI$()) + "&chk=" + Class_rn_i_10.method_rn_i_a_135(Class_rn_i_10.method_rn_i_a_133(Class_rn_i_10.method_rn_i_if_134(var5)), var3, var1))).openStream();
	            var6.close();
	        }
	        catch (var7) {
	            shims_1.System.out.println("Couldn\'t send high score!\n" + var7);
	        }
	        ;
	    }
	    static method_rn_i_a_133(var0) {
	        var var1 = var0.trim();
	        if (var1.length > 20) {
	            var1 = var1.substring(0, 20);
	        }
	        return var1;
	    }
	    static method_rn_i_if_134(var0) {
	        var var1;
	        var var2;
	        for (var2 = new String(var0); (var1 = var2.indexOf(" ")) >= 0; var2 = var2.substring(0, var1) + var2.substring(var1 + 1)) {
	        }
	        return var2;
	    }
	    static method_rn_i_a_135(var0, var1, var3) {
	        var var5 = var3;
	        for (var var7 = 0; Math.round(var7) < Class_rn_i_10.method_rn_i_a_136(var1) + 1; ++var7) {
	            var5 = Class_rn_i_10.method_rn_i_if_137(var0, var1, var5);
	        }
	        return var5;
	    }
	    static method_rn_i_a_136(var0) {
	        return var0 * var0;
	    }
	    static method_rn_i_if_137(var0, var1, var3) {
	        var var5 = (var0).split('');
	        var var6 = 0;
	        for (var var8 = 0; var8 < var5.length; ++var8) {
	            var6 += (Math.round((var5[var8].charCodeAt(0))) + var1) * var3 % (var1 + 6 + Math.round(var8));
	        }
	        return var6;
	    }
	}
	class Class_rn_g_4 extends Class_rn_e_1 {
	    constructor() {
	        super(...arguments);
	        this.field_rn_g_x_55 = false;
	        this.field_rn_g_w_56 = 850;
	    }
	    method_rn_g_byte_54(var1) {
	        return var1 * var1;
	    }
	    method_rn_e_a_13() {
	        if (this.field_rn_e_byte_30.method_rn_SlimeTennis_do_94() > 0) {
	            this.method_rn_e_a_16(3);
	        }
	        else {
	            this.field_rn_g_x_55 = this.field_rn_g_x_55 || this.field_rn_e_long_17 === 950 && this.field_rn_e_if_20 === 0;
	            var var1 = 200;
	            var var2 = new Array(0);
	            var var3 = new Array(0);
	            var var4 = new Array(0);
	            var2[0] = this.field_rn_e_long_17;
	            var3[0] = this.field_rn_e_char_18;
	            var4[0] = this.field_rn_e_byte_30.method_rn_SlimeTennis_d_93();
	            for (var var5 = 1; var5 < var1; ++var5) {
	                this.field_rn_e_long_17 += this.field_rn_e_do_19;
	                this.field_rn_e_char_18 += this.field_rn_e_if_20;
	                var4[var5] = var4[var5 - 1];
	                if (this.field_rn_e_char_18 < 35) {
	                    this.field_rn_e_char_18 = 35;
	                    this.field_rn_e_if_20 = -this.field_rn_e_if_20;
	                    ++var4[var5];
	                }
	                this.field_rn_e_if_20 -= 2;
	                var2[var5] = this.field_rn_e_long_17;
	                var3[var5] = this.field_rn_e_char_18;
	            }
	            this.field_rn_e_long_17 = var2[0];
	            this.field_rn_e_char_18 = var3[0];
	            var var8 = true;
	            this.method_rn_e_a_16(3);
	            if (this.field_rn_g_x_55) {
	                if (this.field_rn_g_w_56 !== 970) {
	                    this.field_rn_g_w_56 = 970;
	                }
	                if (this.field_rn_e_char_18 < 200) {
	                    this.method_rn_e_a_16(2);
	                }
	                if (var2[1] < var2[0]) {
	                    this.field_rn_g_x_55 = false;
	                }
	            }
	            else {
	                this.field_rn_g_w_56 = 850;
	                var var6 = false;
	                for (var var7 = 0; var7 < var1 - 5; ++var7) {
	                    if (var4[var7] === 0 && var4[var7 + 1] === 1) {
	                        if (var2[var7] > 900) {
	                            this.field_rn_g_w_56 = 500;
	                            var6 = true;
	                        }
	                        else if (var2[var7] > 700) {
	                            this.field_rn_g_w_56 = var2[var7 + 3] + 80;
	                        }
	                    }
	                    if (var4[var7] === 1 && var4[var7 + 1] === 2 && var2[var7] > 500 && var2[var7] < 900) {
	                        this.field_rn_g_w_56 = var2[var7] - 80;
	                    }
	                }
	                if (var2[0] < var2[1] && this.field_rn_e_int_25 - var2[0] < 100 && !var6) {
	                    this.method_rn_e_a_16(2);
	                    this.field_rn_g_w_56 = var2[0];
	                }
	            }
	            if (this.field_rn_g_w_56 < this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(0);
	            }
	            else if (this.field_rn_g_w_56 > this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(1);
	            }
	        }
	    }
	}
	class Class_rn_f_5 extends Class_rn_e_1 {
	    constructor() {
	        super(...arguments);
	        this.field_rn_f_u_61 = 0.85;
	        this.field_rn_f_v_62 = -1;
	    }
	    method_rn_f_try_57(var1) {
	        return var1 * var1;
	    }
	    method_rn_f_new_58(var1) {
	        var var2 = 0;
	        var var3 = this.field_rn_e_char_18;
	        var var4 = this.field_rn_e_if_20;
	        while ((true)) {
	            --var4;
	            if ((var3 += var4) <= var1) {
	                return var2;
	            }
	            ++var2;
	        }
	        ;
	    }
	    method_rn_f_int_59(var1) {
	        var var2 = this.method_rn_f_new_58(var1);
	        var var3 = this.field_rn_e_long_17;
	        var var4 = this.field_rn_e_do_19;
	        for (var var5 = 0; var5 < var2; ++var5) {
	            var3 += var4;
	            if (var3 < 0) {
	                var3 = 0;
	                var4 = -var4;
	            }
	            else if (var3 > 1000) {
	                var3 = 1000;
	                var4 = -var4;
	            }
	        }
	        return var3;
	    }
	    method_rn_e_a_13() {
	        if (this.field_rn_e_long_17 < 500 && this.field_rn_f_v_62 !== -1) {
	            this.field_rn_f_v_62 = -1;
	        }
	        var var1 = this.method_rn_f_int_59(125);
	        var var2 = this.method_rn_f_new_58(125);
	        var var3;
	        if (this.field_rn_e_for_26 !== 0 && this.field_rn_e_int_25 < 575) {
	            var3 = 0;
	        }
	        else {
	            var3 = 25 + ((10.0 * Math.random()) | 0);
	        }
	        if ((this.field_rn_e_do_19 !== 0 || this.field_rn_e_long_17 !== 800) && this.field_rn_f_v_62 === -1) {
	            if (var1 < 500) {
	                if (Math.abs(this.field_rn_e_int_25 - 666) < 20) {
	                    this.method_rn_e_a_16(3);
	                }
	                else if (this.field_rn_e_int_25 > 666) {
	                    this.method_rn_e_a_16(0);
	                }
	                else if (this.field_rn_e_int_25 < 666) {
	                    this.method_rn_e_a_16(1);
	                }
	            }
	            else {
	                if (Math.abs(this.field_rn_e_int_25 - var1) < var3) {
	                    if (this.field_rn_e_for_26 !== 0) {
	                        return;
	                    }
	                    if ((this.field_rn_e_int_25 >= 900 && this.field_rn_e_long_17 > 830 || this.field_rn_e_int_25 <= 580 && this.field_rn_e_long_17 < 530) && Math.abs(this.field_rn_e_long_17 - this.field_rn_e_int_25) < 100) {
	                        this.method_rn_f_for_60();
	                    }
	                    else if (this.method_rn_f_try_57(this.field_rn_e_long_17 - this.field_rn_e_int_25) * 2 + this.method_rn_f_try_57(this.field_rn_e_char_18 - this.field_rn_e_for_26) < this.method_rn_f_try_57(170) && this.field_rn_e_long_17 !== this.field_rn_e_int_25) {
	                        this.method_rn_f_for_60();
	                    }
	                    else if (this.field_rn_e_do_19 * this.field_rn_e_do_19 + this.field_rn_e_if_20 * this.field_rn_e_if_20 < 20 && this.field_rn_e_long_17 - this.field_rn_e_int_25 < 30 && this.field_rn_e_long_17 !== this.field_rn_e_int_25) {
	                        this.method_rn_f_for_60();
	                    }
	                    else if (Math.abs(this.field_rn_e_long_17 - this.field_rn_e_int_25) < 150 && this.field_rn_e_char_18 > 50 && this.field_rn_e_char_18 < 400 && Math.random() < 0.666) {
	                        this.method_rn_f_for_60();
	                    }
	                }
	                if (this.field_rn_e_for_26 === 0 && this.field_rn_f_v_62 === -1) {
	                    if (Math.abs(this.field_rn_e_int_25 - var1) < var3) {
	                        this.method_rn_e_a_16(3);
	                    }
	                    else if (var1 + var3 < this.field_rn_e_int_25) {
	                        this.method_rn_e_a_16(0);
	                    }
	                    else if (var1 + var3 > this.field_rn_e_int_25) {
	                        this.method_rn_e_a_16(1);
	                    }
	                }
	                else if (this.field_rn_f_v_62 === -1) {
	                    if (this.field_rn_e_int_25 < 575) {
	                        return;
	                    }
	                    if (this.field_rn_e_int_25 > 900) {
	                        this.method_rn_e_a_16(1);
	                        return;
	                    }
	                    if (Math.abs(this.field_rn_e_int_25 - this.field_rn_e_long_17) < var3) {
	                        this.method_rn_e_a_16(3);
	                    }
	                    else if (this.field_rn_e_long_17 < this.field_rn_e_int_25) {
	                        this.method_rn_e_a_16(0);
	                    }
	                    else if (this.field_rn_e_long_17 > this.field_rn_e_int_25) {
	                        this.method_rn_e_a_16(1);
	                    }
	                }
	            }
	        }
	        else {
	            if (this.field_rn_f_v_62 === -1) {
	                if (this.field_rn_e_e_21 > 250) {
	                    this.field_rn_f_v_62 = 0;
	                }
	                else {
	                    this.field_rn_f_v_62 = 1;
	                }
	                if (Math.random() < 0.35) {
	                    this.field_rn_f_v_62 = ((2.0 * Math.random()) | 0);
	                }
	            }
	            switch ((this.field_rn_f_v_62)) {
	                case 0:
	                    if (this.field_rn_e_char_18 < 300 && this.field_rn_e_if_20 < -3) {
	                        this.method_rn_e_a_16(1);
	                        this.method_rn_e_a_16(2);
	                    }
	                    break;
	                case 1:
	                    if (this.field_rn_e_char_18 < 300 && this.field_rn_e_if_20 < 0) {
	                        this.method_rn_e_a_16(0);
	                        this.method_rn_e_a_16(2);
	                    }
	            }
	        }
	    }
	    method_rn_f_for_60() {
	        if (Math.random() < 0.85) {
	            this.method_rn_e_a_16(2);
	        }
	    }
	}
	class Class_rn_a_9 extends Class_rn_e_1 {
	    constructor() {
	        super();
	        this.field_rn_a_N_86 = false;
	        this.field_rn_a_R_87 = false;
	        this.field_rn_a_Q_88 = 850;
	        this.field_rn_a_P_89 = false;
	        this.field_rn_a_O_90 = new Array(0);
	        this.field_rn_a_T_91 = new Array(0);
	        this.field_rn_a_S_92 = -1;
	        this.field_rn_a_T_91[0] = this.field_rn_a_O_90[0] = 0;
	        this.field_rn_a_T_91[1] = this.field_rn_a_O_90[1] = 29;
	        for (var var1 = 2; var1 < this.field_rn_a_T_91.length; ++var1) {
	            this.field_rn_a_O_90[var1] = this.field_rn_a_O_90[var1 - 1] - 2;
	            this.field_rn_a_T_91[var1] = this.field_rn_a_T_91[var1 - 1] + this.field_rn_a_O_90[var1];
	        }
	    }
	    method_rn_e_if_14() {
	        return "Agasslimey ";
	    }
	    method_rn_e_do_15() {
	        return shims_1.Color.fromString("white");
	    }
	    method_rn_a_else_84(var1) {
	        return var1 * var1;
	    }
	    method_rn_a_new_85(var1, var2) {
	        return var1 < var2 ? var1 : var2;
	    }
	    method_rn_e_a_13() {
	        if (this.field_rn_e_byte_30.method_rn_SlimeTennis_do_94() > 0) {
	            this.method_rn_e_a_16(3);
	        }
	        else {
	            this.field_rn_a_R_87 = this.field_rn_a_R_87 || this.field_rn_e_long_17 === 950 && this.field_rn_e_if_20 === 0;
	            if (this.field_rn_e_long_17 === 50 && this.field_rn_e_if_20 === 0) {
	                this.field_rn_a_Q_88 = 850;
	            }
	            var var1 = 100;
	            var var2 = new Array(0);
	            var var3 = new Array(0);
	            var var4 = new Array(0);
	            var2[0] = this.field_rn_e_long_17;
	            var3[0] = this.field_rn_e_char_18;
	            var4[0] = this.field_rn_e_byte_30.method_rn_SlimeTennis_d_93();
	            var var5 = this.field_rn_e_byte_30.getGraphics();
	            var5.setColor(shims_1.Color.fromString("yellow"));
	            var var6 = this.field_rn_e_byte_30.getWidth();
	            var var7 = this.field_rn_e_byte_30.getHeight();
	            var var8 = false;
	            for (var var9 = 1; var9 < var1; ++var9) {
	                this.field_rn_e_char_18 += --this.field_rn_e_if_20;
	                this.field_rn_e_long_17 += this.field_rn_e_do_19;
	                var4[var9] = var4[var9 - 1];
	                if (this.field_rn_e_char_18 < 35) {
	                    this.field_rn_e_char_18 = 35;
	                    this.field_rn_e_if_20 = (-this.field_rn_e_if_20 * 3 / 5 | 0);
	                    ++var4[var9];
	                    if (var4[var9] === 1 && (this.field_rn_e_long_17 > 900 || this.field_rn_e_long_17 < 500 || this.field_rn_e_do_19 < 0)) {
	                        var8 = true;
	                    }
	                }
	                var2[var9] = this.field_rn_e_long_17;
	                var3[var9] = this.field_rn_e_char_18;
	            }
	            this.field_rn_e_long_17 = var2[0];
	            this.field_rn_e_char_18 = var3[0];
	            this.method_rn_e_a_16(3);
	            if (this.field_rn_a_R_87) {
	                if (this.field_rn_e_int_25 !== 990) {
	                    this.field_rn_a_Q_88 = 990;
	                }
	                if (this.field_rn_e_char_18 < 130) {
	                    this.method_rn_e_a_16(2);
	                    this.field_rn_a_Q_88 = 850;
	                }
	                if (var2[1] < var2[0]) {
	                    this.field_rn_a_R_87 = false;
	                }
	            }
	            else if (var8) {
	                this.field_rn_a_Q_88 = 806;
	            }
	            else if (this.field_rn_a_S_92 >= -3 && this.field_rn_a_S_92 < 5) {
	                if (this.field_rn_a_S_92-- === 0) {
	                    this.method_rn_e_a_16(2);
	                }
	                if (this.field_rn_a_S_92 < 0 && (this.field_rn_e_int_25 < 900 || this.field_rn_a_P_89)) {
	                    this.field_rn_a_Q_88 = 500;
	                }
	            }
	            else {
	                var var11 = true;
	                for (var var10 = 0; var10 < var1 - 1; ++var10) {
	                    if (var4[var10] === 0 && var4[var10 + 1] === 1) {
	                        this.field_rn_a_S_92 = var10 + 2;
	                        this.field_rn_a_Q_88 = var2[var10] + 100;
	                        this.field_rn_a_P_89 = Math.random() < 0.5;
	                        break;
	                    }
	                }
	            }
	            if (Math.abs(this.field_rn_e_int_25 - this.field_rn_a_Q_88) < 8) {
	                this.method_rn_e_a_16(3);
	            }
	            else if (this.field_rn_a_Q_88 < this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(0);
	            }
	            else if (this.field_rn_a_Q_88 > this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(1);
	            }
	        }
	    }
	}
	class Class_rn_c_7 extends Class_rn_e_1 {
	    constructor() {
	        super();
	        this.field_rn_c_i_74 = false;
	        this.field_rn_c_l_75 = false;
	        this.field_rn_c_k_76 = 850;
	        this.field_rn_c_j_77 = new Array(0);
	        this.field_rn_c_m_78 = new Array(0);
	        this.field_rn_c_m_78[0] = this.field_rn_c_j_77[0] = 0;
	        this.field_rn_c_m_78[1] = this.field_rn_c_j_77[1] = 29;
	        for (var var1 = 2; var1 < this.field_rn_c_m_78.length; ++var1) {
	            this.field_rn_c_j_77[var1] = this.field_rn_c_j_77[var1 - 1] - 2;
	            this.field_rn_c_m_78[var1] = this.field_rn_c_m_78[var1 - 1] + this.field_rn_c_j_77[var1];
	        }
	    }
	    method_rn_e_if_14() {
	        return "Mr Slime ";
	    }
	    method_rn_e_do_15() {
	        return shims_1.Color.fromString("red");
	    }
	    method_rn_c_do_72(var1) {
	        return var1 * var1;
	    }
	    method_rn_c_if_73(var1, var2) {
	        return var1 < var2 ? var1 : var2;
	    }
	    method_rn_e_a_13() {
	        if (this.field_rn_e_byte_30.method_rn_SlimeTennis_do_94() > 0) {
	            this.method_rn_e_a_16(3);
	        }
	        else {
	            this.field_rn_c_l_75 = this.field_rn_c_l_75 || this.field_rn_e_long_17 === 950 && this.field_rn_e_if_20 === 0;
	            if (this.field_rn_e_long_17 === 50 && this.field_rn_e_if_20 === 0) {
	                this.field_rn_c_k_76 = 850;
	            }
	            var var1 = 100;
	            var var2 = new Array(0);
	            var var3 = new Array(0);
	            var var4 = new Array(0);
	            var2[0] = this.field_rn_e_long_17;
	            var3[0] = this.field_rn_e_char_18;
	            var4[0] = this.field_rn_e_byte_30.method_rn_SlimeTennis_d_93();
	            var var5 = this.field_rn_e_byte_30.getGraphics();
	            var5.setColor(shims_1.Color.fromString("yellow"));
	            var var6 = this.field_rn_e_byte_30.getWidth();
	            var var7 = this.field_rn_e_byte_30.getHeight();
	            var var8 = false;
	            for (var var9 = 1; var9 < var1; ++var9) {
	                this.field_rn_e_char_18 += --this.field_rn_e_if_20;
	                this.field_rn_e_long_17 += this.field_rn_e_do_19;
	                var4[var9] = var4[var9 - 1];
	                if (this.field_rn_e_char_18 < 35) {
	                    this.field_rn_e_char_18 = 35;
	                    this.field_rn_e_if_20 = (-this.field_rn_e_if_20 * 3 / 5 | 0);
	                    ++var4[var9];
	                    if (var4[var9] === 1 && (this.field_rn_e_long_17 > 900 || this.field_rn_e_long_17 < 500)) {
	                        var8 = true;
	                    }
	                }
	                var2[var9] = this.field_rn_e_long_17;
	                var3[var9] = this.field_rn_e_char_18;
	            }
	            this.field_rn_e_long_17 = var2[0];
	            this.field_rn_e_char_18 = var3[0];
	            this.method_rn_e_a_16(3);
	            if (this.field_rn_c_l_75) {
	                if (this.field_rn_e_int_25 !== 990) {
	                    this.field_rn_c_k_76 = 990;
	                }
	                if (this.field_rn_e_char_18 < 130) {
	                    this.method_rn_e_a_16(2);
	                    this.field_rn_c_k_76 = 850;
	                }
	                if (var2[1] < var2[0]) {
	                    this.field_rn_c_l_75 = false;
	                }
	            }
	            else if (var8) {
	                this.field_rn_c_k_76 = 806;
	            }
	            else {
	                var var40 = false;
	                var var10 = false;
	                var var11 = 0;
	                var var12 = false;
	                var var13 = 5;
	                var var14 = 13;
	                var var15 = 22;
	                var var16 = true;
	                var var17 = 100;
	                var var18 = 25;
	                var var19 = shims_1.System.currentTimeMillis();
	                for (var var21 = 1; var21 < var1; ++var21) {
	                    if (var4[var21] <= 1) {
	                        var var22 = 550 > this.field_rn_e_int_25 - var21 * 8 ? 550 : this.field_rn_e_int_25 - var21 * 8;
	                        var var23 = 1050 < this.field_rn_e_int_25 + var21 * 8 ? 1050 : this.field_rn_e_int_25 + var21 * 8;
	                        var var24 = (this.field_rn_e_int_25 - var22) % 8;
	                        for (var var25 = var22 + var24; var25 <= var23; var25 += 8) {
	                            var var26 = this.method_rn_c_if_73(var21, this.field_rn_c_m_78.length);
	                            for (var var27 = 1; var27 < var26; ++var27) {
	                                if (this.field_rn_e_for_26 <= 0 || this.field_rn_e_for_26 === this.field_rn_c_m_78[var27]) {
	                                    var var28 = 2 * (var2[var21] - var25);
	                                    var var29 = var3[var21] - this.field_rn_c_m_78[var27];
	                                    var var30 = var28 * var28 + var29 * var29;
	                                    var var31 = 2 * (var2[var21 - 1] - var25);
	                                    var var32 = var3[var21 - 1] - this.field_rn_c_m_78[var27 - 1];
	                                    var var33 = var31 * var31 + var32 * var32;
	                                    if (var30 <= this.method_rn_c_do_72(var17 + var18) && var29 >= 0 && var32 >= 0) {
	                                        this.field_rn_e_long_17 = var2[var21];
	                                        this.field_rn_e_char_18 = var3[var21];
	                                        this.field_rn_e_do_19 = var2[var21] - var2[var21 - 1];
	                                        this.field_rn_e_if_20 = var3[var21] - var3[var21 - 1];
	                                        var var34 = false;
	                                        var var35 = 0;
	                                        while ((!var34 || this.field_rn_e_do_19 <= 0)) {
	                                            this.field_rn_e_char_18 += --this.field_rn_e_if_20;
	                                            this.field_rn_e_long_17 += this.field_rn_e_do_19;
	                                            var28 = 2 * (this.field_rn_e_long_17 - var25);
	                                            var29 = this.field_rn_e_char_18 - this.field_rn_c_m_78[var27];
	                                            var var36 = (Math.sqrt((var28 * var28 + var29 * var29)) | 0);
	                                            var var37 = this.field_rn_e_do_19 - var35;
	                                            var var38 = this.field_rn_e_if_20 - this.field_rn_c_j_77[var27];
	                                            var var39;
	                                            if (var29 > 0 && var36 < var17 + var18 && var36 > var13 && !var34) {
	                                                var34 = true;
	                                                var39 = ((var28 * var37 + var29 * var38) / var36 | 0);
	                                                this.field_rn_e_long_17 = var25 + (((var17 + var18) / 2 | 0) * var28 / var36 | 0);
	                                                this.field_rn_e_char_18 = this.field_rn_c_m_78[var27] + ((var17 + var18) * var29 / var36 | 0);
	                                                if (var39 <= 0) {
	                                                    this.field_rn_e_do_19 += var35 - (2 * var28 * var39 / var36 | 0);
	                                                    if (this.field_rn_e_do_19 < -var14) {
	                                                        this.field_rn_e_do_19 = -var14;
	                                                    }
	                                                    if (this.field_rn_e_do_19 > var14) {
	                                                        this.field_rn_e_do_19 = var14;
	                                                    }
	                                                    this.field_rn_e_if_20 += this.field_rn_c_j_77[var27] - (2 * var29 * var39 / var36 | 0);
	                                                    if (this.field_rn_e_if_20 < -var15) {
	                                                        this.field_rn_e_if_20 = -var15;
	                                                    }
	                                                    if (this.field_rn_e_if_20 > var15) {
	                                                        this.field_rn_e_if_20 = var15;
	                                                    }
	                                                }
	                                            }
	                                            if (this.field_rn_e_char_18 < 35) {
	                                                var39 = (2 - var4[var21]) * (500 - this.field_rn_e_long_17);
	                                                if (this.field_rn_e_long_17 > 450 || this.field_rn_e_long_17 < 200) {
	                                                    var39 = 0;
	                                                }
	                                                if (var39 > var11) {
	                                                    this.field_rn_c_k_76 = var25;
	                                                    var12 = this.field_rn_e_for_26 === 0 && var21 === var27 + 1;
	                                                    var11 = var39;
	                                                }
	                                                break;
	                                            }
	                                        }
	                                        ;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	                if (var12) {
	                    this.method_rn_e_a_16(2);
	                }
	            }
	            if (Math.abs(this.field_rn_e_int_25 - this.field_rn_c_k_76) < 8) {
	                this.method_rn_e_a_16(3);
	            }
	            else if (this.field_rn_c_k_76 < this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(0);
	            }
	            else if (this.field_rn_c_k_76 > this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(1);
	            }
	        }
	    }
	}
	class Class_rn_b_8 extends Class_rn_e_1 {
	    constructor() {
	        super(...arguments);
	        this.field_rn_b_f_81 = false;
	        this.field_rn_b_h_82 = false;
	        this.field_rn_b_g_83 = 850;
	    }
	    method_rn_e_if_14() {
	        return "Silly Slime ";
	    }
	    method_rn_e_do_15() {
	        return shims_1.Color.fromString("green");
	    }
	    method_rn_b_if_79(var1) {
	        return var1 * var1;
	    }
	    method_rn_e_a_13() {
	        if (this.field_rn_e_byte_30.method_rn_SlimeTennis_do_94() > 0) {
	            this.method_rn_e_a_16(3);
	        }
	        else {
	            this.field_rn_b_h_82 = this.field_rn_b_h_82 || this.field_rn_e_long_17 === 950 && this.field_rn_e_if_20 === 0;
	            if (this.field_rn_e_long_17 === 50 && this.field_rn_e_if_20 === 0) {
	                this.field_rn_b_g_83 = 850;
	            }
	            var var1 = 100;
	            var var2 = new Array(0);
	            var var3 = new Array(0);
	            var var4 = new Array(0);
	            var2[0] = this.field_rn_e_long_17;
	            var3[0] = this.field_rn_e_char_18;
	            var4[0] = this.field_rn_e_byte_30.method_rn_SlimeTennis_d_93();
	            var var5 = this.field_rn_e_byte_30.getGraphics();
	            var5.setColor(shims_1.Color.fromString("yellow"));
	            var var6 = this.field_rn_e_byte_30.getWidth();
	            var var7 = this.field_rn_e_byte_30.getHeight();
	            for (var var8 = 1; var8 < var1; ++var8) {
	                this.field_rn_e_char_18 += --this.field_rn_e_if_20;
	                this.field_rn_e_long_17 += this.field_rn_e_do_19;
	                var4[var8] = var4[var8 - 1];
	                if (this.field_rn_e_char_18 < 35) {
	                    this.field_rn_e_char_18 = 35;
	                    this.field_rn_e_if_20 = (-this.field_rn_e_if_20 * 3 / 5 | 0);
	                    ++var4[var8];
	                }
	                var2[var8] = this.field_rn_e_long_17;
	                var3[var8] = this.field_rn_e_char_18;
	            }
	            this.field_rn_e_long_17 = var2[0];
	            this.field_rn_e_char_18 = var3[0];
	            var var37 = true;
	            this.method_rn_e_a_16(3);
	            var var9 = false;
	            if (this.field_rn_b_h_82) {
	                if (this.field_rn_b_g_83 !== 990) {
	                    this.field_rn_b_g_83 = 990;
	                }
	                if (this.field_rn_e_char_18 < 130) {
	                    this.method_rn_e_a_16(2);
	                    this.field_rn_b_g_83 = 850;
	                }
	                if (var2[1] < var2[0]) {
	                    this.field_rn_b_h_82 = false;
	                }
	            }
	            else {
	                var var10 = new Array(0);
	                var var11 = new Array(0);
	                var11[0] = var10[0] = 0;
	                var11[1] = var10[1] = 31;
	                for (var var12 = 2; var12 < var11.length; ++var12) {
	                    var10[var12] = var10[var12 - 1] - 2;
	                    var11[var12] = var11[var12 - 1] + var10[var12];
	                }
	                var var38 = false;
	                var var13 = 500;
	                var var14 = false;
	                var var15 = 5;
	                var var16 = 13;
	                var var17 = 22;
	                var var18 = true;
	                var var19 = 100;
	                var var20 = 25;
	                var var21 = shims_1.System.currentTimeMillis();
	                for (var var23 = 1; var23 < var1 && shims_1.System.currentTimeMillis() - var21 <= 15; ++var23) {
	                    if (var4[var23] === 1) {
	                        var var24 = (this.field_rn_e_int_25 - 550) % 8;
	                        for (var var25 = 550 + var24; var25 <= 1050; var25 += 16) {
	                            if (Math.abs(this.field_rn_e_int_25 - var25) < var23 * 8 && Math.abs(var2[var23] - this.field_rn_e_int_25) < var23 * 8) {
	                                for (var var26 = 1; var26 < this.method_rn_b_a_80(var23, var11.length); ++var26) {
	                                    if (this.field_rn_e_for_26 <= 0 || this.field_rn_e_for_26 === var11[var26]) {
	                                        var var27 = 2 * (var2[var23 - 1] - var25);
	                                        var var28 = var3[var23 - 1] - var11[var26 - 1];
	                                        var var29 = (Math.sqrt((var27 * var27 + var28 * var28)) | 0);
	                                        var var30 = 2 * (var2[var23] - var25);
	                                        var var31 = var3[var23] - var11[var26];
	                                        var var32 = (Math.sqrt((var30 * var30 + var31 * var31)) | 0);
	                                        if (var29 > var19 + var20 && var32 <= var19 + var20 && var31 >= 0 && var28 >= 0) {
	                                            this.field_rn_e_long_17 = var2[var23 - 1];
	                                            this.field_rn_e_char_18 = var3[var23 - 1];
	                                            this.field_rn_e_do_19 = var2[var23 - 1] - var2[var23 - 2];
	                                            this.field_rn_e_if_20 = var3[var23 - 1] - var3[var23 - 2];
	                                            var var33 = false;
	                                            while ((!var33 || this.field_rn_e_do_19 <= 0)) {
	                                                this.field_rn_e_char_18 += --this.field_rn_e_if_20;
	                                                this.field_rn_e_long_17 += this.field_rn_e_do_19;
	                                                var30 = 2 * (this.field_rn_e_long_17 - var25);
	                                                var31 = this.field_rn_e_char_18 - var11[var26];
	                                                var32 = (Math.sqrt((var30 * var30 + var31 * var31)) | 0);
	                                                var var34 = this.field_rn_e_do_19 - -8;
	                                                var var35 = this.field_rn_e_if_20 - var10[var26];
	                                                if (var31 > 0 && var32 < var19 + var20 && var32 > var15 && !var33) {
	                                                    var33 = true;
	                                                    var var36 = ((var30 * var34 + var31 * var35) / var32 | 0);
	                                                    this.field_rn_e_long_17 = var25 + (((var19 + var20) / 2 | 0) * var30 / var32 | 0);
	                                                    this.field_rn_e_char_18 = var11[var26] + ((var19 + var20) * var31 / var32 | 0);
	                                                    if (var36 <= 0) {
	                                                        this.field_rn_e_do_19 += -8 - (2 * var30 * var36 / var32 | 0);
	                                                        if (this.field_rn_e_do_19 < -var16) {
	                                                            this.field_rn_e_do_19 = -var16;
	                                                        }
	                                                        if (this.field_rn_e_do_19 > var16) {
	                                                            this.field_rn_e_do_19 = var16;
	                                                        }
	                                                        this.field_rn_e_if_20 += var10[var26] - (2 * var31 * var36 / var32 | 0);
	                                                        if (this.field_rn_e_if_20 < -var17) {
	                                                            this.field_rn_e_if_20 = -var17;
	                                                        }
	                                                        if (this.field_rn_e_if_20 > var17) {
	                                                            this.field_rn_e_if_20 = var17;
	                                                        }
	                                                    }
	                                                }
	                                                if (this.field_rn_e_char_18 < 35) {
	                                                    if (this.field_rn_e_long_17 < 500 && this.field_rn_e_long_17 > 130 && this.field_rn_e_long_17 <= var13) {
	                                                        this.field_rn_b_g_83 = var25;
	                                                        var14 = var23 === var26 + 1;
	                                                        var13 = this.field_rn_e_long_17;
	                                                    }
	                                                    break;
	                                                }
	                                            }
	                                            ;
	                                        }
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	                if (var14) {
	                    this.method_rn_e_a_16(2);
	                }
	            }
	            if (this.field_rn_b_g_83 < this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(0);
	            }
	            else if (this.field_rn_b_g_83 > this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(1);
	            }
	        }
	    }
	    method_rn_b_a_80(var1, var2) {
	        return var1 < var2 ? var1 : var2;
	    }
	}
	class Class_rn_h_3 extends Class_rn_e_1 {
	    constructor() {
	        super();
	        this.field_rn_h_y_46 = false;
	        this.field_rn_h_D_47 = false;
	        this.field_rn_h_C_48 = 850;
	        this.field_rn_h_B_49 = false;
	        this.field_rn_h_z_50 = false;
	        this.field_rn_h_A_51 = new Array(0);
	        this.field_rn_h_F_52 = new Array(0);
	        this.field_rn_h_E_53 = -1;
	        this.field_rn_h_F_52[0] = this.field_rn_h_A_51[0] = 0;
	        this.field_rn_h_F_52[1] = this.field_rn_h_A_51[1] = 29;
	        for (var var1 = 2; var1 < this.field_rn_h_F_52.length; ++var1) {
	            this.field_rn_h_A_51[var1] = this.field_rn_h_A_51[var1 - 1] - 2;
	            this.field_rn_h_F_52[var1] = this.field_rn_h_F_52[var1 - 1] + this.field_rn_h_A_51[var1];
	        }
	    }
	    method_rn_e_if_14() {
	        return "Slimepras ";
	    }
	    method_rn_e_do_15() {
	        return shims_1.Color.fromString("blue");
	    }
	    method_rn_h_case_44(var1) {
	        return var1 * var1;
	    }
	    method_rn_h_for_45(var1, var2) {
	        return var1 < var2 ? var1 : var2;
	    }
	    method_rn_e_a_13() {
	        if (this.field_rn_e_byte_30.method_rn_SlimeTennis_do_94() > 0) {
	            this.method_rn_e_a_16(3);
	        }
	        else {
	            this.field_rn_h_D_47 = this.field_rn_h_D_47 || this.field_rn_e_long_17 === 950 && this.field_rn_e_if_20 === 0;
	            if (this.field_rn_e_long_17 === 50 && this.field_rn_e_if_20 === 0) {
	                this.field_rn_h_C_48 = 850;
	                this.field_rn_h_z_50 = true;
	            }
	            if (this.field_rn_e_do_19 < 0) {
	                this.field_rn_h_z_50 = false;
	            }
	            var var1 = 100;
	            var var2 = new Array(0);
	            var var3 = new Array(0);
	            var var4 = new Array(0);
	            var2[0] = this.field_rn_e_long_17;
	            var3[0] = this.field_rn_e_char_18;
	            var4[0] = this.field_rn_e_byte_30.method_rn_SlimeTennis_d_93();
	            var var5 = this.field_rn_e_byte_30.getGraphics();
	            var5.setColor(shims_1.Color.fromString("yellow"));
	            var var6 = this.field_rn_e_byte_30.getWidth();
	            var var7 = this.field_rn_e_byte_30.getHeight();
	            var var8 = false;
	            for (var var9 = 1; var9 < var1; ++var9) {
	                this.field_rn_e_char_18 += --this.field_rn_e_if_20;
	                this.field_rn_e_long_17 += this.field_rn_e_do_19;
	                var4[var9] = var4[var9 - 1];
	                if (this.field_rn_e_char_18 < 35) {
	                    this.field_rn_e_char_18 = 35;
	                    this.field_rn_e_if_20 = (-this.field_rn_e_if_20 * 3 / 5 | 0);
	                    ++var4[var9];
	                    if (var4[var9] === 1 && (this.field_rn_e_long_17 > 900 || this.field_rn_e_long_17 < 500 || this.field_rn_e_do_19 < 0)) {
	                        var8 = true;
	                    }
	                }
	                var2[var9] = this.field_rn_e_long_17;
	                var3[var9] = this.field_rn_e_char_18;
	            }
	            this.field_rn_e_long_17 = var2[0];
	            this.field_rn_e_char_18 = var3[0];
	            this.method_rn_e_a_16(3);
	            if (this.field_rn_h_D_47) {
	                if (this.field_rn_e_int_25 !== 990) {
	                    this.field_rn_h_C_48 = 990;
	                }
	                if (this.field_rn_e_char_18 < 130) {
	                    this.method_rn_e_a_16(2);
	                    this.field_rn_h_C_48 = 850;
	                }
	                if (var2[1] < var2[0]) {
	                    this.field_rn_h_D_47 = false;
	                }
	            }
	            else if (var8) {
	                this.field_rn_h_C_48 = 806;
	            }
	            else if (this.field_rn_h_E_53 >= -3 && this.field_rn_h_E_53 < 5) {
	                if (this.field_rn_h_E_53-- === 0) {
	                    this.method_rn_e_a_16(2);
	                }
	                if (this.field_rn_h_E_53 < 0 && this.field_rn_h_B_49) {
	                    this.field_rn_h_C_48 = 500;
	                }
	            }
	            else {
	                var var12 = 200;
	                var var10 = true;
	                for (var var11 = 1; var11 < var1 - 1; ++var11) {
	                    if (var4[var11] === 0 && var2[var11] > 550 && var2[var11] < 750 && var3[var11 - 1] >= var12 && var3[var11] < var12 && !this.field_rn_h_z_50) {
	                        this.field_rn_h_E_53 = var11 - 5;
	                        this.field_rn_h_C_48 = var2[var11] + 90;
	                        this.field_rn_h_B_49 = true;
	                        break;
	                    }
	                    if (var4[var11] === 0 && var4[var11 + 1] === 1) {
	                        this.field_rn_h_E_53 = var11 + 2;
	                        this.field_rn_h_C_48 = var2[var11] + 100;
	                        this.field_rn_h_B_49 = Math.random() < 0.5 || this.field_rn_e_int_25 < 900;
	                        break;
	                    }
	                }
	                if (this.field_rn_h_E_53 === 0) {
	                    this.method_rn_e_a_16(2);
	                }
	            }
	            if (Math.abs(this.field_rn_e_int_25 - this.field_rn_h_C_48) < 8) {
	                this.method_rn_e_a_16(3);
	            }
	            else if (this.field_rn_h_C_48 < this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(0);
	            }
	            else if (this.field_rn_h_C_48 > this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(1);
	            }
	        }
	    }
	}
	class Class_rn_d_6 extends Class_rn_e_1 {
	    constructor() {
	        super();
	        this.field_rn_d_n_65 = false;
	        this.field_rn_d_r_66 = false;
	        this.field_rn_d_q_67 = 850;
	        this.field_rn_d_p_68 = false;
	        this.field_rn_d_o_69 = new Array(0);
	        this.field_rn_d_t_70 = new Array(0);
	        this.field_rn_d_s_71 = -1;
	        this.field_rn_d_t_70[0] = this.field_rn_d_o_69[0] = 0;
	        this.field_rn_d_t_70[1] = this.field_rn_d_o_69[1] = 29;
	        for (var var1 = 2; var1 < this.field_rn_d_t_70.length; ++var1) {
	            this.field_rn_d_o_69[var1] = this.field_rn_d_o_69[var1 - 1] - 2;
	            this.field_rn_d_t_70[var1] = this.field_rn_d_t_70[var1 - 1] + this.field_rn_d_o_69[var1];
	        }
	    }
	    method_rn_e_if_14() {
	        return "\"C\'mon!\" Slime ";
	    }
	    method_rn_e_do_15() {
	        return shims_1.Color.fromString("yellow");
	    }
	    method_rn_d_for_63(var1) {
	        return var1 * var1;
	    }
	    method_rn_d_do_64(var1, var2) {
	        return var1 < var2 ? var1 : var2;
	    }
	    method_rn_e_a_13() {
	        if (this.field_rn_e_byte_30.method_rn_SlimeTennis_do_94() > 0) {
	            this.method_rn_e_a_16(3);
	        }
	        else {
	            this.field_rn_d_r_66 = this.field_rn_d_r_66 || this.field_rn_e_long_17 === 950 && this.field_rn_e_if_20 === 0;
	            if (this.field_rn_e_long_17 === 50 && this.field_rn_e_if_20 === 0) {
	                this.field_rn_d_q_67 = 850;
	            }
	            var var1 = 40;
	            var var2 = new Array(0);
	            var var3 = new Array(0);
	            var var4 = new Array(0);
	            var2[0] = this.field_rn_e_long_17;
	            var3[0] = this.field_rn_e_char_18;
	            var4[0] = this.field_rn_e_byte_30.method_rn_SlimeTennis_d_93();
	            var var5 = this.field_rn_e_byte_30.getGraphics();
	            var5.setColor(shims_1.Color.fromString("yellow"));
	            var var6 = this.field_rn_e_byte_30.getWidth();
	            var var7 = this.field_rn_e_byte_30.getHeight();
	            var var8 = false;
	            var var9;
	            for (var9 = 1; var9 < var1; ++var9) {
	                this.field_rn_e_char_18 += --this.field_rn_e_if_20;
	                this.field_rn_e_long_17 += this.field_rn_e_do_19;
	                var4[var9] = var4[var9 - 1];
	                if (this.field_rn_e_char_18 < 35) {
	                    this.field_rn_e_char_18 = 35;
	                    this.field_rn_e_if_20 = (-this.field_rn_e_if_20 * 3 / 5 | 0);
	                    ++var4[var9];
	                    if (var4[var9] === 1 && (this.field_rn_e_long_17 > 900 || this.field_rn_e_long_17 < 500 || this.field_rn_e_do_19 < 0)) {
	                        var8 = true;
	                    }
	                }
	                var2[var9] = this.field_rn_e_long_17;
	                var3[var9] = this.field_rn_e_char_18;
	            }
	            this.field_rn_e_long_17 = var2[0];
	            this.field_rn_e_char_18 = var3[0];
	            this.method_rn_e_a_16(3);
	            this.field_rn_d_q_67 = 850;
	            if (this.field_rn_d_r_66) {
	                if (this.field_rn_e_int_25 !== 994) {
	                    this.field_rn_d_q_67 = 994;
	                }
	                if (this.field_rn_e_char_18 < 130) {
	                    this.method_rn_e_a_16(2);
	                    this.field_rn_d_q_67 = 850;
	                }
	                if (var2[1] < var2[0]) {
	                    this.field_rn_d_r_66 = false;
	                }
	            }
	            else if (var8) {
	                this.field_rn_d_q_67 = 806;
	            }
	            else if (this.field_rn_d_s_71 >= 0) {
	                shims_1.System.out.println("" + this.field_rn_d_s_71);
	                if (this.field_rn_d_s_71-- <= 0) {
	                    this.method_rn_e_a_16(2);
	                }
	            }
	            else {
	                var var13 = true;
	                label88: for (var var10 = 0; var10 < var1 - 1; ++var10) {
	                    if (var2[var10] <= 800 && var2[var10 + 1] > 800) {
	                        if (var2[var10] === 800) {
	                            shims_1.System.out.println(800);
	                        }
	                        var var11 = var3[var10];
	                        var var12 = 1;
	                        while ((true)) {
	                            if (var12 >= this.field_rn_d_t_70.length - 1) {
	                                break label88;
	                            }
	                            if (var11 > this.field_rn_d_t_70[var12 - 1] && var11 < this.field_rn_d_t_70[var12] + 125) {
	                                var9 = var10 - var12 - 2;
	                                if (var9 === 0) {
	                                    this.method_rn_e_a_16(2);
	                                }
	                                break label88;
	                            }
	                            var9 = var10 - var3.length - 1;
	                            ++var12;
	                        }
	                        ;
	                    }
	                }
	            }
	            if (Math.abs(this.field_rn_e_int_25 - this.field_rn_d_q_67) < 8) {
	                this.method_rn_e_a_16(3);
	            }
	            else if (this.field_rn_d_q_67 < this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(0);
	            }
	            else if (this.field_rn_d_q_67 > this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(1);
	            }
	        }
	    }
	}
	class Class_rn_j_2 extends Class_rn_e_1 {
	    constructor() {
	        super();
	        this.field_rn_j_G_37 = false;
	        this.field_rn_j_L_38 = false;
	        this.field_rn_j_I_39 = 850;
	        this.field_rn_j_K_40 = false;
	        this.field_rn_j_J_41 = 0;
	        this.field_rn_j_H_42 = new Array(0);
	        this.field_rn_j_M_43 = new Array(0);
	        this.field_rn_j_M_43[0] = this.field_rn_j_H_42[0] = 0;
	        this.field_rn_j_M_43[1] = this.field_rn_j_H_42[1] = 29;
	        for (var var1 = 2; var1 < this.field_rn_j_M_43.length; ++var1) {
	            this.field_rn_j_H_42[var1] = this.field_rn_j_H_42[var1 - 1] - 2;
	            this.field_rn_j_M_43[var1] = this.field_rn_j_M_43[var1 - 1] + this.field_rn_j_H_42[var1];
	        }
	    }
	    method_rn_e_if_14() {
	        return "Slimerer ";
	    }
	    method_rn_e_do_15() {
	        return shims_1.Color.fromString("red");
	    }
	    method_rn_j_char_35(var1) {
	        return var1 * var1;
	    }
	    method_rn_j_int_36(var1, var2) {
	        return var1 < var2 ? var1 : var2;
	    }
	    method_rn_e_a_13() {
	        if (this.field_rn_e_byte_30.method_rn_SlimeTennis_do_94() > 0) {
	            this.method_rn_e_a_16(3);
	        }
	        else {
	            this.field_rn_j_L_38 = this.field_rn_j_L_38 || this.field_rn_e_long_17 === 950 && this.field_rn_e_if_20 === 0;
	            if (this.field_rn_j_L_38) {
	                this.field_rn_j_K_40 = false;
	            }
	            if (this.field_rn_e_long_17 === 50 && this.field_rn_e_if_20 === 0) {
	                this.field_rn_j_I_39 = 850;
	                this.field_rn_j_K_40 = false;
	                this.field_rn_j_J_41 = 0;
	            }
	            var var1 = 100;
	            var var2 = new Array(0);
	            var var3 = new Array(0);
	            var var4 = new Array(0);
	            var2[0] = this.field_rn_e_long_17;
	            var3[0] = this.field_rn_e_char_18;
	            var4[0] = this.field_rn_e_byte_30.method_rn_SlimeTennis_d_93();
	            var var5 = this.field_rn_e_byte_30.getGraphics();
	            var5.setColor(shims_1.Color.fromString("yellow"));
	            var var6 = this.field_rn_e_byte_30.getWidth();
	            var var7 = this.field_rn_e_byte_30.getHeight();
	            var var8 = false;
	            for (var var9 = 1; var9 < var1; ++var9) {
	                this.field_rn_e_char_18 += --this.field_rn_e_if_20;
	                this.field_rn_e_long_17 += this.field_rn_e_do_19;
	                var4[var9] = var4[var9 - 1];
	                if (this.field_rn_e_char_18 < 35) {
	                    this.field_rn_e_char_18 = 35;
	                    this.field_rn_e_if_20 = (-this.field_rn_e_if_20 * 3 / 5 | 0);
	                    ++var4[var9];
	                    if (var4[var9] === 1 && (this.field_rn_e_long_17 > 920 || this.field_rn_e_long_17 < 500 || this.field_rn_e_do_19 < 0)) {
	                        var8 = true;
	                    }
	                }
	                var2[var9] = this.field_rn_e_long_17;
	                var3[var9] = this.field_rn_e_char_18;
	            }
	            this.field_rn_e_long_17 = var2[0];
	            this.field_rn_e_char_18 = var3[0];
	            this.method_rn_e_a_16(3);
	            if (this.field_rn_j_L_38) {
	                if (this.field_rn_e_int_25 !== 990) {
	                    this.field_rn_j_I_39 = 990;
	                }
	                if (this.field_rn_e_char_18 < 130) {
	                    this.method_rn_e_a_16(2);
	                    this.field_rn_j_I_39 = 850;
	                }
	                if (var2[1] < var2[0]) {
	                    this.field_rn_j_L_38 = false;
	                }
	            }
	            else if (var8) {
	                this.field_rn_j_I_39 = 806;
	                this.field_rn_j_K_40 = false;
	            }
	            else {
	                var var44 = false;
	                var var10 = false;
	                var var11 = 0;
	                var var12 = false;
	                var var13 = 5;
	                var var14 = 13;
	                var var15 = 22;
	                var var16 = true;
	                var var17 = 100;
	                var var18 = 25;
	                var var19 = shims_1.System.currentTimeMillis();
	                var var21;
	                var var24;
	                var var25;
	                if (!this.field_rn_j_K_40) {
	                    var var45 = 0;
	                    var24 = var1 - 1;
	                    var21 = new Array(((var24 - var45 + 1) / 2 | 0));
	                    for (var25 = 0; var25 < var21.length; var25 += 2) {
	                        var21[var25] = var45 + var25;
	                    }
	                }
	                else {
	                    var var23 = this.field_rn_j_J_41 - 5;
	                    if (var23 < 0) {
	                        var23 = 0;
	                    }
	                    var24 = this.field_rn_j_J_41 + 5;
	                    if (var24 < 0) {
	                        var24 = 0;
	                    }
	                    shims_1.System.out.println("maxf=" + var24 + ", minf=" + var23);
	                    var21 = new Array(var24 - var23 + 1);
	                    for (var25 = 0; var25 < var21.length; ++var25) {
	                        var21[var25] = var23 + var25;
	                    }
	                    --this.field_rn_j_J_41;
	                    this.field_rn_j_I_39 = 500;
	                    if (this.field_rn_j_J_41 <= 1) {
	                        this.method_rn_e_a_16(0);
	                        this.field_rn_j_K_40 = false;
	                        return;
	                    }
	                }
	                var25 = 550 > this.field_rn_e_int_25 - var24 * 8 ? 550 : this.field_rn_e_int_25 - var24 * 8;
	                var var26 = 1050 < this.field_rn_e_int_25 + var24 * 8 ? 1050 : this.field_rn_e_int_25 + var24 * 8;
	                var var27 = (this.field_rn_e_int_25 - var25) % 8;
	                var var22 = new Array(((var26 - var25) / 8 | 0) + 1);
	                var var28;
	                for (var28 = 0; var28 < var22.length; ++var28) {
	                    var22[var28] = var25 + var27 + var28 * 8;
	                }
	                for (var28 = 1; var28 < var21.length; ++var28) {
	                    var var29 = var21[var28];
	                    if (var4[var29] <= 1) {
	                        for (var var30 = 0; var30 < var22.length; ++var30) {
	                            var var31 = var22[var30];
	                            var var32 = 1;
	                            var var33 = this.method_rn_j_int_36(var29, this.field_rn_j_M_43.length);
	                            var var34;
	                            if (this.field_rn_e_for_26 > 0) {
	                                for (var34 = var32; var34 < var33 - var29; ++var34) {
	                                    if (this.field_rn_j_M_43[var34] === this.field_rn_e_for_26) {
	                                        var var10000 = var34 + var29;
	                                        break;
	                                    }
	                                }
	                            }
	                            for (var34 = var32; var34 < var33; ++var34) {
	                                if (this.field_rn_e_for_26 <= 0 || this.field_rn_e_for_26 === this.field_rn_j_M_43[var34]) {
	                                    var var35 = 2 * (var2[var29] - var31);
	                                    var var36 = var3[var29] - this.field_rn_j_M_43[var34];
	                                    var var37 = var35 * var35 + var36 * var36;
	                                    if (var37 <= this.method_rn_j_char_35(var17 + var18) && var36 >= 0) {
	                                        this.field_rn_e_long_17 = var2[var29];
	                                        this.field_rn_e_char_18 = var3[var29];
	                                        this.field_rn_e_do_19 = var2[var29] - var2[var29 - 1];
	                                        this.field_rn_e_if_20 = var3[var29] - var3[var29 - 1];
	                                        var var38 = false;
	                                        var var39 = 0;
	                                        while ((!var38 || this.field_rn_e_do_19 <= 0)) {
	                                            this.field_rn_e_char_18 += --this.field_rn_e_if_20;
	                                            this.field_rn_e_long_17 += this.field_rn_e_do_19;
	                                            var35 = 2 * (this.field_rn_e_long_17 - var31);
	                                            var36 = this.field_rn_e_char_18 - this.field_rn_j_M_43[var34];
	                                            var var40 = (Math.sqrt((var35 * var35 + var36 * var36)) | 0);
	                                            var var41 = this.field_rn_e_do_19 - var39;
	                                            var var42 = this.field_rn_e_if_20 - this.field_rn_j_H_42[var34];
	                                            var var43;
	                                            if (var36 > 0 && var40 < var17 + var18 && var40 > var13 && !var38) {
	                                                var38 = true;
	                                                var43 = ((var35 * var41 + var36 * var42) / var40 | 0);
	                                                this.field_rn_e_long_17 = var31 + (((var17 + var18) / 2 | 0) * var35 / var40 | 0);
	                                                this.field_rn_e_char_18 = this.field_rn_j_M_43[var34] + ((var17 + var18) * var36 / var40 | 0);
	                                                if (var43 <= 0) {
	                                                    this.field_rn_e_do_19 += var39 - (2 * var35 * var43 / var40 | 0);
	                                                    if (this.field_rn_e_do_19 < -var14) {
	                                                        this.field_rn_e_do_19 = -var14;
	                                                    }
	                                                    if (this.field_rn_e_do_19 > var14) {
	                                                        this.field_rn_e_do_19 = var14;
	                                                    }
	                                                    this.field_rn_e_if_20 += this.field_rn_j_H_42[var34] - (2 * var36 * var43 / var40 | 0);
	                                                    if (this.field_rn_e_if_20 < -var15) {
	                                                        this.field_rn_e_if_20 = -var15;
	                                                    }
	                                                    if (this.field_rn_e_if_20 > var15) {
	                                                        this.field_rn_e_if_20 = var15;
	                                                    }
	                                                }
	                                            }
	                                            if (this.field_rn_e_char_18 < 35) {
	                                                var43 = (2 - var4[var29]) * (500 - this.field_rn_e_long_17) - var29;
	                                                if (this.field_rn_e_long_17 > 450 || this.field_rn_e_long_17 < 100) {
	                                                    var43 = 0;
	                                                }
	                                                if (var43 <= var11) {
	                                                    break;
	                                                }
	                                                this.field_rn_j_I_39 = var31;
	                                                var12 = this.field_rn_e_for_26 === 0 && var29 === var34 + 1;
	                                                var11 = var43;
	                                                if (!this.field_rn_j_K_40) {
	                                                    this.field_rn_j_J_41 = var29;
	                                                    this.field_rn_j_K_40 = true;
	                                                    shims_1.System.out.print("bestscore=" + var43);
	                                                    shims_1.System.out.print(",p2dX=" + Math.abs(this.field_rn_e_int_25 - this.field_rn_j_I_39) % 8);
	                                                    shims_1.System.out.print(",bestX=" + this.field_rn_j_I_39);
	                                                    shims_1.System.out.print(",bestYind=" + var34);
	                                                    shims_1.System.out.print(",bestFrame=" + var29);
	                                                    shims_1.System.out.println();
	                                                }
	                                                break;
	                                            }
	                                        }
	                                        ;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	                if (var12) {
	                    this.method_rn_e_a_16(2);
	                }
	            }
	            if (Math.abs(this.field_rn_e_int_25 - this.field_rn_j_I_39) < 8) {
	                this.method_rn_e_a_16(3);
	            }
	            else if (this.field_rn_j_I_39 < this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(0);
	            }
	            else if (this.field_rn_j_I_39 > this.field_rn_e_int_25) {
	                this.method_rn_e_a_16(1);
	            }
	        }
	    }
	}
	class ServerCheck extends shims_1.Frame {
	    constructor() {
	        super();
	        this.setLayout(new shims_1.GridLayout(4, 1));
	        var var1 = new shims_1.Panel();
	        var1.add(new shims_1.Label("Couldn\'t connect to server!"));
	        this.add(var1);
	        var var2 = new shims_1.Panel();
	        var2.add(new shims_1.Label("Your high scores may not be saved on the server."));
	        this.add(var2);
	        var var3 = new shims_1.Panel();
	        var3.add(new shims_1.Label("To fix this, close all browser windows and try again."));
	        this.setTitle("Error!");
	        this.field_rn_ServerCheck_ok_129 = new shims_1.Button("Damn. Oh well if that\'s how it is...");
	        this.add(var3);
	        this.add(this.field_rn_ServerCheck_ok_129);
	        this.pack();
	        this.show();
	    }
	    action(var1, var2) {
	        if (var1.target === this.field_rn_ServerCheck_ok_129) {
	            this.dispose();
	        }
	        return false;
	    }
	}
	class NameFrame extends shims_1.Frame {
	    constructor(var1, var2, var4) {
	        if (((var1 != null && var1 instanceof SlimeTennis) || var1 === null) && ((typeof var2 === 'number') || var2 === null) && ((typeof var4 === 'number') || var4 === null)) {
	            super();
	            this.score = 0;
	            this.level = 0;
	            (() => {
	                this.app = var1;
	                this.score = var2;
	                this.level = var4;
	                this.setLayout(new shims_1.GridLayout(2, 1));
	                var var5 = new shims_1.Panel();
	                var5.add(new shims_1.Label("Your score: " + var2));
	                this.add(var5);
	                var var6 = new shims_1.Panel();
	                var6.add(new shims_1.Label("Enter your name:"));
	                this.name = new shims_1.TextField(20);
	                var6.add(this.name);
	                this.field_rn_NameFrame_ok_141 = new shims_1.Button("OK");
	                var6.add(this.field_rn_NameFrame_ok_141);
	                this.add(var6);
	                this.setTitle("New High Score!");
	                this.pack();
	                this.show();
	            })();
	        }
	        else if (var1 === undefined && var2 === undefined && var4 === undefined) {
	            super();
	            this.score = 0;
	            this.level = 0;
	            (() => {
	            })();
	        }
	        else
	            throw new Error('invalid overload');
	    }
	    action(var1, var2) {
	        if (var1.target === this.field_rn_NameFrame_ok_141) {
	            Class_rn_i_10.method_rn_i_a_132(this.app, this.score, Math.round(this.level), this.name.getText());
	            this.dispose();
	        }
	        return false;
	    }
	}
	class SlimeTennis extends shims_1.Applet {
	    constructor() {
	        super();
	        this.recommended_width = 750;
	        this.recommended_height = 375;
	        this.COURT_HARD = 0;
	        this.COURT_GRASS = 1;
	        this.COURT_CLAY = 2;
	        this.courtTypeSelected = 0;
	        this.courtTypes = [0, 1, 2];
	        this.courtTypeSelectText = ["Hard court", "Grass court", "Clay court"];
	        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["Runnable"] });
	        this.nWidth = 0;
	        this.nHeight = 0;
	        this.p1X = 0;
	        this.p1Y = 0;
	        this.p2X = 0;
	        this.p2Y = 0;
	        this.p1Diam = 0;
	        this.p2Diam = 0;
	        this.p1Col = 0;
	        this.p2Col = 0;
	        this.p1OldX = 0;
	        this.p1OldY = 0;
	        this.p2OldX = 0;
	        this.p2OldY = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.ballX = 0;
	        this.ballY = 0;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.ballOldX = 0;
	        this.ballOldY = 0;
	        this.lastPlayerToTouch = 0;
	        this.nBounces = 0;
	        this.topSpin = 0;
	        this.nFramesSinceSpin = 0;
	        this.nFramesUntilStop = 0;
	        this.playerSelected = 0;
	        this.gameLengthSelected = 0;
	        this.mousePressed = false;
	        this.fInPlay = false;
	        this.fP1Touched = false;
	        this.fP2Touched = false;
	        this.nP1Aces = 0;
	        this.nP2Aces = 0;
	        this.nP1Winners = 0;
	        this.nP2Winners = 0;
	        this.fP1HitStill = false;
	        this.fP2HitStill = false;
	        this.fP1Super = 0;
	        this.fP2Super = 0;
	        this.nP1PointsWon = 0;
	        this.nP2PointsWon = 0;
	        this.nP1GamesWon = 0;
	        this.nP2GamesWon = 0;
	        this.nFaults = 0;
	        this.fServerMoved = false;
	        this.hitNetSinceTouched = false;
	        this.fEndGame = false;
	        this.startTime = 0;
	        this.gameTime = 0;
	        this.crossedNetTime = 0;
	        this.pausedTime = 0;
	        this.paused = false;
	        this.scoringRun = 0;
	        this.oldScoringRun = 0;
	        this.replayIndex = 0;
	        this.replayStart = 0;
	        this.replaying = false;
	        this.p1Run = 0;
	        this.p2Run = 0;
	        this.p1Jump = 0;
	        this.p2Jump = 0;
	        this.gamesToWin = 0;
	        this.aiMode = 0;
	        this.gameScore = 0;
	        this.gameOver = false;
	        this.oneplayer = false;
	        this.ballRad = 0;
	        this.buffered = false;
	        this.courtColours = [shims_1.Color.fromString("gray"), new shims_1.Color(0, 180, 0), new shims_1.Color(180, 60, 0)];
	        this.playerSelectText = ["One player", "Two players"];
	        this.gameLengthSelectText = ["Short (3 games)", "Long (6 games)"];
	        this.gameLengthSelected = 0;
	        this.gameLengths = [3, 6];
	        this.slimeColText = ["Big Red Slime ", "Albino Slime ", "Golden Slime ", "Grass Tree Slime ", "Green Slime ", "Floating Eye Slime "];
	        this.slimeColours = [shims_1.Color.fromString("red"), shims_1.Color.fromString("white"), shims_1.Color.fromString("yellow"), shims_1.Color.fromString("black"), shims_1.Color.fromString("green"), shims_1.Color.fromString("blue")];
	        this.loserText1 = ["Game, set, and match.", "That\'s the end of the road for you.", "You\'re not the only one to crash out at this stage.", this.slimeColText[4] + "laughs at the pathetic slow opposition.", this.slimeColText[5] + "devours you!"];
	        this.loserText2 = ["Better luck next time.", "C\'mon! Go computer Slime!", "Congrats on reaching level 3!", "Congrats on reaching level 4!", "Yum."];
	        this.SKY_COL = new shims_1.Color(80, 80, 255);
	        this.BALL_COL = shims_1.Color.fromString("yellow");
	        this.gamesToWin = 3;
	        this.aiMode = 0;
	        this.menuSelectBoundsHorizontal = new Array(0);
	        this.menuSelectBoundsVertical = new Array(0);
	        this.menuOK = new Array(0);
	        this.boundsP1select = new Array(0);
	        this.boundsP2select = new Array(0);
	        this.oneplayer = true;
	        this.ballRad = 25;
	        this.buffered = false;
	    }
	    method_rn_SlimeTennis_d_93() {
	        return this.nBounces;
	    }
	    method_rn_SlimeTennis_do_94() {
	        return this.nFramesUntilStop;
	    }
	    init() {
	        var var1 = "slimetennis.com";
	        if (!(var1 === "slimetennis.com")) {
	            try {
	                this.getAppletContext().showDocument(new shims_1.URL("http://slimetennis.com/"), "_self");
	            }
	            catch (var3) {
	            }
	            ;
	        }
	        else {
	            shims_1.System.out.println("Slime Tennis: http://slimetennis.com/");
	            new Class_rn_b_8();
	            new Class_rn_d_6();
	            new Class_rn_a_9();
	            new Class_rn_j_2();
	            new Class_rn_h_3();
	            this.replayData = (function (dims) { var allocate = function (dims) { if (dims.length == 0) {
	                return undefined;
	            }
	            else {
	                var array = [];
	                for (var i = 0; i < dims[0]; i++) {
	                    array.push(allocate(dims.slice(1)));
	                }
	                return array;
	            } }; return allocate(dims); })([1000, 8]);
	            this.nWidth = this.size().width;
	            this.nHeight = this.size().height;
	            this.fInPlay = this.fEndGame = false;
	            this.promptMsg = "Click the mouse to play!";
	            this.buffer = new shims_1.BufferedImage(this.nWidth, this.nHeight, 1);
	            this.scoreBuffer = new shims_1.BufferedImage(this.nWidth, this.nHeight, 1);
	            this.fInPlay = this.fEndGame = false;
	            this.promptMsg = "Click the mouse to play!";
	            if (this.buffered) {
	                this.screen = this.buffer.getGraphics();
	            }
	            else {
	                this.screen = this.getGraphics();
	            }
	            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	            this.p1Col = 0;
	            this.p2Col = 1;
	            this.p1Run = 8;
	            this.p1Jump = 31;
	            this.p1Diam = 70;
	            this.gameScore = 0;
	            this.courtTypeSelected = 0;
	            this.COURT_COL = shims_1.Color.fromString("gray");
	            this.gameOver = true;
	            this.paused = false;
	            this.method_rn_SlimeTennis_try_95();
	            this.method_rn_SlimeTennis_int_100();
	            this.redrawRegions = new shims_1.Vector(0);
	            this.method_rn_SlimeTennis_b_98();
	            this.repaint();
	        }
	    }
	    method_rn_SlimeTennis_try_95() {
	        this.nP1PointsWon = this.nP2PointsWon = 0;
	        this.nP1GamesWon = this.nP2GamesWon = 0;
	        this.nFaults = 0;
	        this.mousePressed = false;
	        this.p1Diam = this.p2Diam = 100;
	        this.p2Run = 8;
	        this.p2Jump = 31;
	        if (!this.oneplayer) {
	            this.aiMode = 0;
	        }
	        this.SCOREBOX_COL = new shims_1.Color(0, 0, 122);
	        switch ((this.aiMode)) {
	            case 0:
	            default:
	                this.field_rn_SlimeTennis_ai_128 = new Class_rn_b_8();
	                break;
	            case 1:
	                this.field_rn_SlimeTennis_ai_128 = new Class_rn_d_6();
	                break;
	            case 2:
	                this.field_rn_SlimeTennis_ai_128 = new Class_rn_h_3();
	                break;
	            case 3:
	                this.field_rn_SlimeTennis_ai_128 = new Class_rn_a_9();
	        }
	        if (this.oneplayer) {
	            this.p2Col = this.aiMode + 1;
	        }
	        else {
	            this.p2Col = this.p1Col + 1;
	        }
	        this.field_rn_SlimeTennis_ai_128.method_rn_e_a_11(this, 2);
	    }
	    update(var1) {
	        if (this.buffered) {
	            var1.drawImage(this.buffer, 0, 0, null);
	        }
	        else {
	            this.method_rn_SlimeTennis_b_98();
	        }
	        this.redrawRegions = new shims_1.Vector(0);
	    }
	    paint(var1) {
	        this.update(var1);
	    }
	    method_rn_SlimeTennis_if_96(var1, var2) {
	        return var1 < var2 ? var1 : var2;
	    }
	    method_rn_SlimeTennis_a_97(var1, var2) {
	        return var1 > var2 ? var1 : var2;
	    }
	    method_rn_SlimeTennis_b_98() {
	        var var1;
	        if (this.buffered) {
	            var1 = this.buffer.getGraphics();
	        }
	        else {
	            var1 = this.getGraphics();
	        }
	        this.nWidth = this.size().width;
	        this.nHeight = this.size().height;
	        var1.setColor(this.SKY_COL);
	        var1.fillRect(0, 0, this.nWidth, (this.nHeight * 4 / 5 | 0));
	        var1.setColor(this.COURT_COL);
	        var1.fillRect(0, (this.nHeight * 4 / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));
	        var1.setColor(shims_1.Color.fromString("white"));
	        var1.fillRect((this.nWidth / 2 | 0) - 2, (this.nHeight * 7 / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);
	        var1.fillRect((this.nWidth / 10 | 0), (this.nHeight * 4 / 5 | 0) + 5, (this.nWidth * 4 / 5 | 0), 5);
	        var1.fillRect((this.nWidth / 10 | 0), (this.nHeight * 4 / 5 | 0), 5, 10);
	        var1.fillRect((this.nWidth * 9 / 10 | 0) - 5, (this.nHeight * 4 / 5 | 0), 5, 10);
	        var1.fillRect((this.nWidth * 3 / 10 | 0), (this.nHeight * 4 / 5 | 0), 5, 10);
	        var1.fillRect((this.nWidth * 7 / 10 | 0) - 5, (this.nHeight * 4 / 5 | 0), 5, 10);
	        var1.fillRect((this.nWidth * 3 / 10 | 0), (this.nHeight * 4 / 5 | 0), (this.nWidth * 2 / 5 | 0), 2);
	        var var2 = var1.getFontMetrics();
	        var var3;
	        if (this.gameOver) {
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            var var4 = var1.getFont();
	            var1.setFont(this.screen.getFont());
	            var3 = "Slime Tennis!";
	            var1.drawString(var3, (this.nWidth / 4 | 0) - (this.screen.getFontMetrics().stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0) - var2.getHeight());
	            var1.setFont(var4);
	            var1.setColor(shims_1.Color.fromString("white"));
	            var3 = "Written by Quin Pendragon and Daniel Wedge";
	            var1.drawString(var3, (this.nWidth / 4 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0) + var2.getHeight() * 2);
	            var3 = "http://slimetennis.com/";
	            var1.drawString(var3, (this.nWidth / 4 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0) + (var2.getHeight() * 7 / 2 | 0));
	            var3 = "Last updated: 8th October 2007";
	            var1.drawString(var3, (this.nWidth / 4 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0) + var2.getHeight() * 5);
	            var2 = this.screen.getFontMetrics();
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            var var5 = 20;
	            this.menuSelectBoundsHorizontal[0] = this.menuSelectBoundsHorizontal[1] = this.menuSelectBoundsHorizontal[2] = this.menuSelectBoundsHorizontal[3] = (this.nWidth * 3 / 4 | 0);
	            var3 = this.playerSelectText[this.oneplayer ? 0 : 1];
	            this.menuSelectBoundsHorizontal[1] = this.method_rn_SlimeTennis_if_96(this.menuSelectBoundsHorizontal[1], (this.nWidth * 3 / 4 | 0) - (var2.stringWidth(var3) / 2 | 0) - var5);
	            this.menuSelectBoundsHorizontal[0] = this.method_rn_SlimeTennis_if_96(this.menuSelectBoundsHorizontal[0], this.menuSelectBoundsHorizontal[1] - var5);
	            this.menuSelectBoundsHorizontal[2] = this.method_rn_SlimeTennis_a_97(this.menuSelectBoundsHorizontal[2], (this.nWidth * 3 / 4 | 0) + (var2.stringWidth(var3) / 2 | 0) + var5);
	            this.menuSelectBoundsHorizontal[3] = this.method_rn_SlimeTennis_a_97(this.menuSelectBoundsHorizontal[3], this.menuSelectBoundsHorizontal[2] + var5);
	            this.menuSelectBoundsVertical[0] = (this.nHeight / 3 | 0) - var2.getHeight() * 3;
	            this.menuSelectBoundsVertical[1] = this.menuSelectBoundsVertical[0] + var2.getHeight();
	            this.screen.drawString(var3, (this.nWidth * 3 / 4 | 0) - (var2.stringWidth(var3) / 2 | 0), this.menuSelectBoundsVertical[0] + var2.getAscent());
	            var3 = this.courtTypeSelectText[this.courtTypeSelected];
	            this.menuSelectBoundsHorizontal[1] = this.method_rn_SlimeTennis_if_96(this.menuSelectBoundsHorizontal[1], (this.nWidth * 3 / 4 | 0) - (var2.stringWidth(var3) / 2 | 0) - var5);
	            this.menuSelectBoundsHorizontal[0] = this.method_rn_SlimeTennis_if_96(this.menuSelectBoundsHorizontal[0], this.menuSelectBoundsHorizontal[1] - var5);
	            this.menuSelectBoundsHorizontal[2] = this.method_rn_SlimeTennis_a_97(this.menuSelectBoundsHorizontal[2], (this.nWidth * 3 / 4 | 0) + (var2.stringWidth(var3) / 2 | 0) + var5);
	            this.menuSelectBoundsHorizontal[3] = this.method_rn_SlimeTennis_a_97(this.menuSelectBoundsHorizontal[3], this.menuSelectBoundsHorizontal[2] + var5);
	            this.menuSelectBoundsVertical[2] = (this.nHeight / 3 | 0);
	            this.menuSelectBoundsVertical[3] = this.menuSelectBoundsVertical[2] + var2.getHeight();
	            this.screen.drawString(var3, (this.nWidth * 3 / 4 | 0) - (var2.stringWidth(var3) / 2 | 0), this.menuSelectBoundsVertical[2] + var2.getAscent());
	            var3 = this.gameLengthSelectText[this.gameLengthSelected];
	            this.menuSelectBoundsHorizontal[1] = this.method_rn_SlimeTennis_if_96(this.menuSelectBoundsHorizontal[1], (this.nWidth * 3 / 4 | 0) - (var2.stringWidth(var3) / 2 | 0) - var5);
	            this.menuSelectBoundsHorizontal[0] = this.method_rn_SlimeTennis_if_96(this.menuSelectBoundsHorizontal[0], this.menuSelectBoundsHorizontal[1] - var5);
	            this.menuSelectBoundsHorizontal[2] = this.method_rn_SlimeTennis_a_97(this.menuSelectBoundsHorizontal[2], (this.nWidth * 3 / 4 | 0) + (var2.stringWidth(var3) / 2 | 0) + var5);
	            this.menuSelectBoundsHorizontal[3] = this.method_rn_SlimeTennis_a_97(this.menuSelectBoundsHorizontal[3], this.menuSelectBoundsHorizontal[2] + var5);
	            this.menuSelectBoundsVertical[4] = (this.nHeight / 3 | 0) + var2.getHeight() * 3;
	            this.menuSelectBoundsVertical[5] = this.menuSelectBoundsVertical[4] + var2.getHeight();
	            this.screen.drawString(var3, (this.nWidth * 3 / 4 | 0) - (var2.stringWidth(var3) / 2 | 0), this.menuSelectBoundsVertical[4] + var2.getAscent());
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillRect(this.menuSelectBoundsHorizontal[0] - 1, this.menuSelectBoundsVertical[0] - 1, var5 + 2, this.menuSelectBoundsVertical[1] - this.menuSelectBoundsVertical[0] + 2);
	            this.screen.fillRect(this.menuSelectBoundsHorizontal[0] - 1, this.menuSelectBoundsVertical[2] - 1, var5 + 2, this.menuSelectBoundsVertical[3] - this.menuSelectBoundsVertical[2] + 2);
	            this.screen.fillRect(this.menuSelectBoundsHorizontal[0] - 1, this.menuSelectBoundsVertical[4] - 1, var5 + 2, this.menuSelectBoundsVertical[5] - this.menuSelectBoundsVertical[4] + 2);
	            this.screen.setColor(this.SKY_COL);
	            this.screen.fillPolygon([this.menuSelectBoundsHorizontal[0], this.menuSelectBoundsHorizontal[1], this.menuSelectBoundsHorizontal[1]], [((this.menuSelectBoundsVertical[0] + this.menuSelectBoundsVertical[1]) / 2 | 0), this.menuSelectBoundsVertical[0], this.menuSelectBoundsVertical[1]], 3);
	            this.screen.fillPolygon([this.menuSelectBoundsHorizontal[0], this.menuSelectBoundsHorizontal[1], this.menuSelectBoundsHorizontal[1]], [((this.menuSelectBoundsVertical[2] + this.menuSelectBoundsVertical[3]) / 2 | 0), this.menuSelectBoundsVertical[2], this.menuSelectBoundsVertical[3]], 3);
	            this.screen.fillPolygon([this.menuSelectBoundsHorizontal[0], this.menuSelectBoundsHorizontal[1], this.menuSelectBoundsHorizontal[1]], [((this.menuSelectBoundsVertical[4] + this.menuSelectBoundsVertical[5]) / 2 | 0), this.menuSelectBoundsVertical[4], this.menuSelectBoundsVertical[5]], 3);
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            this.screen.fillRect(this.menuSelectBoundsHorizontal[2] - 1, this.menuSelectBoundsVertical[0] - 1, var5 + 2, this.menuSelectBoundsVertical[1] - this.menuSelectBoundsVertical[0] + 2);
	            this.screen.fillRect(this.menuSelectBoundsHorizontal[2] - 1, this.menuSelectBoundsVertical[2] - 1, var5 + 2, this.menuSelectBoundsVertical[3] - this.menuSelectBoundsVertical[2] + 2);
	            this.screen.fillRect(this.menuSelectBoundsHorizontal[2] - 1, this.menuSelectBoundsVertical[4] - 1, var5 + 2, this.menuSelectBoundsVertical[5] - this.menuSelectBoundsVertical[4] + 2);
	            this.screen.setColor(this.SKY_COL);
	            this.screen.fillPolygon([this.menuSelectBoundsHorizontal[3], this.menuSelectBoundsHorizontal[2], this.menuSelectBoundsHorizontal[2]], [((this.menuSelectBoundsVertical[0] + this.menuSelectBoundsVertical[1]) / 2 | 0), this.menuSelectBoundsVertical[0], this.menuSelectBoundsVertical[1]], 3);
	            this.screen.fillPolygon([this.menuSelectBoundsHorizontal[3], this.menuSelectBoundsHorizontal[2], this.menuSelectBoundsHorizontal[2]], [((this.menuSelectBoundsVertical[2] + this.menuSelectBoundsVertical[3]) / 2 | 0), this.menuSelectBoundsVertical[2], this.menuSelectBoundsVertical[3]], 3);
	            this.screen.fillPolygon([this.menuSelectBoundsHorizontal[3], this.menuSelectBoundsHorizontal[2], this.menuSelectBoundsHorizontal[2]], [((this.menuSelectBoundsVertical[4] + this.menuSelectBoundsVertical[5]) / 2 | 0), this.menuSelectBoundsVertical[4], this.menuSelectBoundsVertical[5]], 3);
	            this.screen.setColor(shims_1.Color.fromString("white"));
	            var3 = "Start game!";
	            this.menuOK[0] = (this.nWidth * 3 / 4 | 0) - (var2.stringWidth(var3) / 2 | 0) - var5;
	            this.menuOK[1] = (this.nHeight / 3 | 0) + var2.getHeight() * 5;
	            this.menuOK[2] = this.menuOK[0] + var2.stringWidth(var3) + var5 * 2;
	            this.menuOK[3] = this.menuOK[1] + var2.getHeight() * 2;
	            this.screen.fillRect(this.menuOK[0], this.menuOK[1], this.menuOK[2] - this.menuOK[0], this.menuOK[3] - this.menuOK[1]);
	            this.screen.setColor(this.SKY_COL);
	            this.screen.drawString(var3, this.menuOK[0] + var5, this.menuOK[1] + var2.getAscent());
	            if (!this.replaying) {
	                this.method_rn_SlimeTennis_long_113();
	                this.method_rn_SlimeTennis_case_115();
	            }
	        }
	        else if (!this.fInPlay) {
	            var1.setColor(shims_1.Color.fromString("white"));
	            var3 = this.field_rn_SlimeTennis_ai_128.method_rn_e_if_14() + "is no match for you... prepare for your next challenge!";
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 2 | 0) - var2.getHeight());
	            var1.setFont(this.screen.getFont());
	            var2 = this.screen.getFontMetrics();
	            var3 = "Level " + (this.aiMode + 1) + " clear!";
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight / 3 | 0));
	            var3 = "Click the mouse to continue...";
	            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var2.getHeight() + 10);
	        }
	        else {
	            this.method_rn_SlimeTennis_long_113();
	        }
	    }
	    method_rn_SlimeTennis_for_99() {
	        if (!this.buffered) {
	            this.redrawRegions.removeAllElements();
	        }
	        else {
	            for (var var1 = 0; var1 < this.redrawRegions.size(); ++var1) {
	                var var2 = this.redrawRegions.get(var1);
	                var var3 = var2[0];
	                var var4 = var2[1];
	                var var5 = var2[2];
	                var var6 = var2[3];
	                if (var3 < 0) {
	                    var3 = 0;
	                }
	                if (var5 > this.nWidth) {
	                    var5 = this.nWidth - 1;
	                }
	                if (var4 < 0) {
	                    var4 = 0;
	                }
	                if (var6 > this.nHeight) {
	                    var6 = this.nHeight - 1;
	                }
	                var var7 = var5 - var3;
	                var var8 = var6 - var4;
	                if (var7 > 0 && var8 > 0) {
	                    var var9 = this.buffer.getSubimage(var3, var4, var7, var8);
	                    this.getGraphics().drawImage(var9, var3, var4, null);
	                }
	            }
	            this.redrawRegions.removeAllElements();
	        }
	    }
	    method_rn_SlimeTennis_int_100() {
	        this.p1X = 50;
	        this.p1Y = 0;
	        this.p2X = 950;
	        this.p2Y = 0;
	        this.p1XV = 0;
	        this.p1YV = 0;
	        this.p2XV = 0;
	        this.p2YV = 0;
	        this.ballX = (this.nP1GamesWon + this.nP2GamesWon) % 2 === 0 ? 50 : 950;
	        this.ballY = 400;
	        this.ballVX = 0;
	        this.ballVY = 0;
	        this.topSpin = 0;
	        this.lastPlayerToTouch = 0;
	        this.nBounces = 0;
	        this.nFramesSinceSpin = 0;
	        this.hitNetSinceTouched = false;
	        this.fServerMoved = this.fP1Touched = this.fP2Touched = false;
	        this.repaint();
	        this.promptMsg = "";
	        this.nFramesUntilStop = -1;
	        this.replayStart = this.replayIndex = 0;
	        this.replaying = false;
	    }
	    handleEvent(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            switch ((var1.id)) {
	                case 401:
	                case 403:
	                    switch ((var1.key)) {
	                        case 32:
	                            this.mousePressed = true;
	                            return false;
	                        case 65:
	                        case 97:
	                            this.method_rn_SlimeTennis_e_101();
	                            return false;
	                        case 66:
	                        case 98:
	                            this.buffered = !this.buffered;
	                            if (this.buffered) {
	                                this.screen = this.buffer.getGraphics();
	                            }
	                            else {
	                                this.screen = this.getGraphics();
	                            }
	                            this.screen.setFont(new shims_1.Font(this.screen.getFont().getName(), 1, 15));
	                            this.method_rn_SlimeTennis_b_98();
	                            return false;
	                        case 67:
	                        case 99:
	                            if (this.gameOver) {
	                                this.fEndGame = false;
	                                this.fInPlay = true;
	                                this.promptMsg = "";
	                                this.gameOver = false;
	                                this.gameScore = 0;
	                                this.method_rn_SlimeTennis_try_95();
	                                this.method_rn_SlimeTennis_int_100();
	                                this.repaint();
	                                this.gameThread = new shims_1.Thread(this);
	                                this.gameThread.start();
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            this.method_rn_SlimeTennis_c_102();
	                            return false;
	                        case 73:
	                        case 105:
	                            if (!this.oneplayer) {
	                                this.method_rn_SlimeTennis_void_108();
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                            if (!this.oneplayer) {
	                                this.method_rn_SlimeTennis_g_105();
	                            }
	                            return false;
	                        case 75:
	                        case 107:
	                        case 1005:
	                            if (!this.oneplayer) {
	                                do {
	                                    this.p2Col = (this.p2Col + 1) % this.slimeColours.length;
	                                } while ((this.p1Col === this.p2Col));
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                            if (!this.oneplayer) {
	                                this.method_rn_SlimeTennis_l_106();
	                            }
	                            return false;
	                        case 79:
	                        case 111:
	                            if (!this.paused) {
	                                this.pausedTime = shims_1.System.currentTimeMillis();
	                                try {
	                                    this.getAppletContext().showDocument(new shims_1.URL("http://oneslime.net/boss/launch.html"), "_blank");
	                                }
	                                catch (var3) {
	                                    shims_1.System.out.println(var3);
	                                }
	                                ;
	                                this.paused = true;
	                            }
	                            else {
	                                this.startTime += shims_1.System.currentTimeMillis() - this.pausedTime;
	                                this.paused = false;
	                            }
	                            return false;
	                        case 80:
	                        case 112:
	                            if (!this.paused) {
	                                this.pausedTime = shims_1.System.currentTimeMillis();
	                                this.paused = true;
	                            }
	                            else {
	                                this.startTime += shims_1.System.currentTimeMillis() - this.pausedTime;
	                                this.paused = false;
	                            }
	                            return false;
	                        case 83:
	                        case 115:
	                            do {
	                                this.p1Col = (this.p1Col + 1) % this.slimeColours.length;
	                            } while ((this.p1Col === this.p2Col));
	                            return false;
	                        case 87:
	                        case 119:
	                            this.method_rn_SlimeTennis_else_104();
	                            return false;
	                        case 1004:
	                            if (this.oneplayer) {
	                                this.method_rn_SlimeTennis_else_104();
	                            }
	                            else {
	                                this.method_rn_SlimeTennis_void_108();
	                            }
	                            return false;
	                        case 1006:
	                            if (this.oneplayer) {
	                                this.method_rn_SlimeTennis_e_101();
	                            }
	                            else {
	                                this.method_rn_SlimeTennis_g_105();
	                            }
	                            return false;
	                        case 1007:
	                            if (this.oneplayer) {
	                                this.method_rn_SlimeTennis_c_102();
	                            }
	                            else {
	                                this.method_rn_SlimeTennis_l_106();
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 402:
	                case 404:
	                    switch ((var1.key)) {
	                        case 65:
	                        case 97:
	                            if (this.p1XV < 0) {
	                                this.method_rn_SlimeTennis_byte_103();
	                            }
	                            return false;
	                        case 68:
	                        case 100:
	                            if (this.p1XV > 0) {
	                                this.method_rn_SlimeTennis_byte_103();
	                            }
	                            return false;
	                        case 74:
	                        case 106:
	                            if (this.p2XV < 0) {
	                                this.method_rn_SlimeTennis_goto_107();
	                            }
	                            return false;
	                        case 76:
	                        case 108:
	                            if (this.p2XV > 0) {
	                                this.method_rn_SlimeTennis_goto_107();
	                            }
	                            return false;
	                        case 1006:
	                            if (this.oneplayer && this.p1XV < 0) {
	                                this.method_rn_SlimeTennis_byte_103();
	                            }
	                            else if (!this.oneplayer && this.p2XV < 0) {
	                                this.method_rn_SlimeTennis_goto_107();
	                                return false;
	                            }
	                            return false;
	                        case 1007:
	                            if (this.oneplayer && this.p1XV > 0) {
	                                this.method_rn_SlimeTennis_byte_103();
	                            }
	                            else if (!this.oneplayer && this.p2XV > 0) {
	                                this.method_rn_SlimeTennis_goto_107();
	                                return false;
	                            }
	                            return false;
	                        default:
	                            return false;
	                    }
	                case 501:
	                    if (this.gameOver) {
	                        if (var1.x <= this.menuOK[0] || var1.y <= this.menuOK[1] || var1.x >= this.menuOK[2] || var1.y >= this.menuOK[3]) {
	                            if (var1.x > this.menuSelectBoundsHorizontal[0] && var1.x < this.menuSelectBoundsHorizontal[1]) {
	                                if (var1.y > this.menuSelectBoundsVertical[0] && var1.y < this.menuSelectBoundsVertical[1]) {
	                                    this.oneplayer = !this.oneplayer;
	                                }
	                                else if (var1.y > this.menuSelectBoundsVertical[2] && var1.y < this.menuSelectBoundsVertical[3]) {
	                                    this.courtTypeSelected = (this.courtTypeSelected + 1) % this.courtTypes.length;
	                                }
	                                else if (var1.y > this.menuSelectBoundsVertical[4] && var1.y < this.menuSelectBoundsVertical[5]) {
	                                    this.gameLengthSelected = (this.gameLengthSelected + 1) % this.gameLengths.length;
	                                }
	                                this.method_rn_SlimeTennis_b_98();
	                                this.repaint();
	                                break;
	                            }
	                            if (var1.x > this.menuSelectBoundsHorizontal[2] && var1.x < this.menuSelectBoundsHorizontal[3]) {
	                                if (var1.y > this.menuSelectBoundsVertical[0] && var1.y < this.menuSelectBoundsVertical[1]) {
	                                    this.oneplayer = !this.oneplayer;
	                                }
	                                else if (var1.y > this.menuSelectBoundsVertical[2] && var1.y < this.menuSelectBoundsVertical[3]) {
	                                    this.courtTypeSelected = (this.courtTypeSelected - 1 + this.courtTypes.length) % this.courtTypes.length;
	                                }
	                                else if (var1.y > this.menuSelectBoundsVertical[4] && var1.y < this.menuSelectBoundsVertical[5]) {
	                                    this.gameLengthSelected = (this.gameLengthSelected - 1 + this.gameLengths.length) % this.gameLengths.length;
	                                }
	                                this.method_rn_SlimeTennis_b_98();
	                                this.repaint();
	                            }
	                            break;
	                        }
	                        this.gamesToWin = this.gameLengths[this.gameLengthSelected];
	                        this.COURT_COL = this.courtColours[this.courtTypeSelected];
	                    }
	                    this.mousePressed = true;
	                    if (!this.fInPlay) {
	                        this.fEndGame = false;
	                        this.fInPlay = true;
	                        this.promptMsg = "";
	                        if (this.nP1GamesWon + this.nP2GamesWon > 0) {
	                            if (this.aiMode < 3) {
	                                ++this.aiMode;
	                            }
	                            else {
	                                this.aiMode = 0;
	                            }
	                        }
	                        if (this.gameOver) {
	                            this.aiMode = 0;
	                            this.gameOver = false;
	                            this.gameScore = 0;
	                        }
	                        this.method_rn_SlimeTennis_try_95();
	                        this.repaint();
	                        this.ballX = 50;
	                        this.gameThread = new shims_1.Thread(this);
	                        this.gameThread.start();
	                    }
	                    break;
	                case 503:
	                    this.showStatus("Slime Tennis: http://slimetennis.com/");
	            }
	            return false;
	        });
	    }
	    method_rn_SlimeTennis_e_101() {
	        this.p1XV = -this.p1Run;
	        if (this.p1X === 50 && this.ballX === 50 && !this.fP2Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	        }
	    }
	    method_rn_SlimeTennis_c_102() {
	        this.p1XV = this.p1Run;
	        if (this.p1X === 50 && this.ballX === 50 && !this.fP2Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	        }
	    }
	    method_rn_SlimeTennis_byte_103() {
	        this.p1XV = 0;
	    }
	    method_rn_SlimeTennis_else_104() {
	        if (this.p1Y === 0) {
	            this.p1YV = this.p1Jump;
	        }
	    }
	    method_rn_SlimeTennis_g_105() {
	        this.p2XV = -this.p2Run;
	        if (this.p2X === 950 && this.ballX === 950 && !this.fP1Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	        }
	    }
	    method_rn_SlimeTennis_l_106() {
	        this.p2XV = this.p2Run;
	        if (this.p2X === 950 && this.ballX === 950 && !this.fP1Touched && !this.fServerMoved) {
	            this.fServerMoved = true;
	        }
	    }
	    method_rn_SlimeTennis_goto_107() {
	        this.p2XV = 0;
	    }
	    method_rn_SlimeTennis_void_108() {
	        if (this.p2Y === 0) {
	            this.p2YV = this.p2Jump;
	        }
	    }
	    method_rn_SlimeTennis_f_109() {
	        if (this.oneplayer) {
	            var var1 = [this.ballX, this.ballY, this.ballVX, this.ballVY, this.p1X, this.p1Y, this.p1XV, this.p1YV, this.p2X, this.p2Y, this.p2XV, this.p2YV];
	            this.field_rn_SlimeTennis_ai_128.method_rn_e_a_12(var1);
	            this.field_rn_SlimeTennis_ai_128.method_rn_e_a_13();
	        }
	    }
	    method_rn_SlimeTennis_k_110() {
	        this.method_rn_SlimeTennis_f_109();
	        this.p1X += this.p1XV;
	        if (this.p1X < (-this.p1Diam / 4 | 0)) {
	            this.p1X = (-this.p1Diam / 4 | 0);
	        }
	        if (this.p1X > 495 - (this.p1Diam / 2 | 0)) {
	            this.p1X = 495 - (this.p1Diam / 2 | 0);
	        }
	        if (!this.fP1Touched && this.nBounces === 0 && this.p1X > 200 - (this.p1Diam / 2 | 0)) {
	            this.p1X = 200 - (this.p1Diam / 2 | 0);
	        }
	        if (this.p1YV !== 0) {
	            this.p1Y += this.p1YV -= 2;
	            if (this.p1Y < 0) {
	                this.p1Y = 0;
	                this.p1YV = 0;
	            }
	        }
	        this.p2X += this.p2XV;
	        if (this.p2X > 1000 + (this.p2Diam / 4 | 0)) {
	            this.p2X = 1000 + (this.p2Diam / 4 | 0);
	        }
	        if (this.p2X < 505 + (this.p2Diam / 2 | 0)) {
	            this.p2X = 505 + (this.p2Diam / 2 | 0);
	        }
	        if (!this.fP2Touched && this.nBounces === 0 && this.p2X < 800 + (this.p2Diam / 2 | 0)) {
	            this.p2X = 800 + (this.p2Diam / 2 | 0);
	        }
	        if (this.p2YV !== 0) {
	            this.p2Y += this.p2YV -= 2;
	            if (this.p2Y < 0) {
	                this.p2Y = 0;
	                this.p2YV = 0;
	            }
	        }
	    }
	    method_rn_SlimeTennis_if_111() {
	        var var1 = new Array(0);
	        var var2;
	        if (this.buffered) {
	            var2 = this.buffer.getGraphics();
	        }
	        else {
	            var2 = this.getGraphics();
	        }
	        var var3 = 5;
	        var var4 = ((this.ballRad + var3) * this.nHeight / 1000 | 0);
	        var var5 = (this.ballOldX * this.nWidth / 1000 | 0);
	        var var6 = (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);
	        var2.setColor(this.SKY_COL);
	        var2.fillRect(var5 - var4, var6 - var4, 2 * var4, 2 * var4);
	        var var7 = var5;
	        var var8 = var6;
	        var var9 = (this.nWidth * this.p1Diam / 1000 | 0);
	        var var10 = (this.nHeight * this.p1Diam / 1000 | 0);
	        var var11 = (this.p1OldX * this.nWidth / 1000 | 0) - (var9 / 2 | 0);
	        var var12 = (4 * this.nHeight / 5 | 0) - var10 - (this.p1OldY * this.nHeight / 1000 | 0);
	        var2.setColor(this.SKY_COL);
	        var2.fillRect(var11, var12, var9, var10);
	        var1[0] = var11;
	        var1[1] = var12;
	        var1[2] = var11 + var9;
	        var1[3] = var12 + var10;
	        var9 = (this.nWidth * this.p1Diam / 1000 | 0);
	        var10 = (this.nHeight * this.p1Diam / 1000 | 0);
	        var11 = (this.p1X * this.nWidth / 1000 | 0) - (var9 / 2 | 0);
	        var12 = (4 * this.nHeight / 5 | 0) - var10 - (this.p1Y * this.nHeight / 1000 | 0);
	        var2.setColor(this.slimeColours[this.p1Col]);
	        var2.fillArc(var11, var12, var9, 2 * var10, 0, 180);
	        if (var11 < var1[0]) {
	            var1[0] = var11;
	        }
	        if (var12 < var1[1]) {
	            var1[1] = var12;
	        }
	        if (var11 + var9 > var1[2]) {
	            var1[2] = var11 + var9;
	        }
	        if (var12 + var10 > var1[3]) {
	            var1[3] = var12 + var10;
	        }
	        this.redrawRegions.add(var1);
	        var var15 = this.p1X + (38 * this.p1Diam / 100 | 0);
	        var var16 = this.p1Y - (60 * this.p1Diam / 100 | 0);
	        var11 = (var15 * this.nWidth / 1000 | 0);
	        var12 = (4 * this.nHeight / 5 | 0) - var10 - (var16 * this.nHeight / 1000 | 0);
	        var var17 = var11 - var5;
	        if (var17 === 0) {
	            var17 = 1;
	        }
	        var var18 = var12 - var6;
	        if (var18 === 0) {
	            var18 = 1;
	        }
	        var var19 = (Math.sqrt((var17 * var17 + var18 * var18)) | 0);
	        var var20 = ((this.nWidth / 50 | 0) * this.p1Diam / 100 | 0);
	        var var21 = ((this.nHeight / 25 | 0) * this.p1Diam / 100 | 0);
	        var2.setColor(shims_1.Color.fromString("white"));
	        var2.fillOval(var11 - var20, var12 - var21, var20, var21);
	        var2.setColor(shims_1.Color.fromString("black"));
	        var2.fillOval(var11 - (4 * var17 / var19 | 0) - (3 * var20 / 4 | 0), var12 - (4 * var18 / var19 | 0) - (3 * var21 / 4 | 0), (var20 / 2 | 0), (var21 / 2 | 0));
	        var9 = (this.nWidth * this.p2Diam / 1000 | 0);
	        var10 = (this.nHeight * this.p2Diam / 1000 | 0);
	        var11 = (this.p2OldX * this.nWidth / 1000 | 0) - (var9 / 2 | 0);
	        var12 = (4 * this.nHeight / 5 | 0) - var10 - (this.p2OldY * this.nHeight / 1000 | 0);
	        var2.setColor(this.SKY_COL);
	        var2.fillRect(var11, var12, var9, var10);
	        var1 = [var11, var12, var11 + var9, var12 + var10];
	        var9 = (this.nWidth * this.p2Diam / 1000 | 0);
	        var10 = (this.nHeight * this.p2Diam / 1000 | 0);
	        var11 = (this.p2X * this.nWidth / 1000 | 0) - (var9 / 2 | 0);
	        var12 = (4 * this.nHeight / 5 | 0) - (this.p2Diam * this.nHeight / 1000 | 0) - (this.p2Y * this.nHeight / 1000 | 0);
	        var2.setColor(this.oneplayer ? this.field_rn_SlimeTennis_ai_128.method_rn_e_do_15() : this.slimeColours[this.p2Col]);
	        if (var11 < var1[0]) {
	            var1[0] = var11;
	        }
	        if (var12 < var1[1]) {
	            var1[1] = var12;
	        }
	        if (var11 + var9 > var1[2]) {
	            var1[2] = var11 + var9;
	        }
	        if (var12 + var10 > var1[3]) {
	            var1[3] = var12 + var10;
	        }
	        this.redrawRegions.add(var1);
	        var2.fillArc(var11, var12, var9, 2 * var10, 0, 180);
	        var15 = this.p2X - (18 * this.p2Diam / 100 | 0);
	        var16 = this.p2Y - (60 * this.p2Diam / 100 | 0);
	        var11 = (var15 * this.nWidth / 1000 | 0);
	        var12 = (4 * this.nHeight / 5 | 0) - var10 - (var16 * this.nHeight / 1000 | 0);
	        var17 = var11 - var5;
	        if (var17 === 0) {
	            var17 = 1;
	        }
	        var18 = var12 - var6;
	        if (var18 === 0) {
	            var18 = 1;
	        }
	        var19 = (Math.sqrt((var17 * var17 + var18 * var18)) | 0);
	        var20 = ((this.nWidth / 50 | 0) * this.p2Diam / 100 | 0);
	        var21 = ((this.nHeight / 25 | 0) * this.p2Diam / 100 | 0);
	        var2.setColor(shims_1.Color.fromString("white"));
	        var2.fillOval(var11 - var20, var12 - var21, var20, var21);
	        var2.setColor(shims_1.Color.fromString("black"));
	        var2.fillOval(var11 - (4 * var17 / var19 | 0) - (3 * var20 / 4 | 0), var12 - (4 * var18 / var19 | 0) - (3 * var21 / 4 | 0), (var20 / 2 | 0), (var21 / 2 | 0));
	        var5 = (this.ballX * this.nWidth / 1000 | 0);
	        var6 = (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);
	        var2.setColor(this.BALL_COL);
	        var2.fillOval(var5 - var4, var6 - var4, 2 * var4, 2 * var4);
	        var1 = [var7 - var4, var8 - var4, var7 + var4, var8 + var4];
	        if (var5 - var4 < var1[0]) {
	            var1[0] = var5 - var4;
	        }
	        if (var6 - var4 < var1[1]) {
	            var1[1] = var6 - var4;
	        }
	        if (var5 + var4 > var1[2]) {
	            var1[2] = var5 + var4;
	        }
	        if (var6 + var4 > var1[3]) {
	            var1[3] = var6 + var4;
	        }
	        this.redrawRegions.add(var1);
	    }
	    method_rn_SlimeTennis_j_112() {
	        var var1 = 5;
	        var var2 = 14;
	        var var3 = 25;
	        var var4 = 45;
	        this.ballY += --this.ballVY;
	        if (++this.nFramesSinceSpin === 17 - (this.topSpin / 3 | 0)) {
	            --this.ballVY;
	            this.nFramesSinceSpin = 0;
	        }
	        else if (this.nFramesSinceSpin === -(17 - (this.topSpin / 3 | 0))) {
	            ++this.ballVY;
	            this.nFramesSinceSpin = 0;
	        }
	        this.ballX += this.ballVX;
	        if (!this.fEndGame) {
	            var var5 = 2 * (this.ballX - this.p1X);
	            var var6 = this.ballY - this.p1Y;
	            var var7 = (Math.sqrt((var5 * var5 + var6 * var6)) | 0);
	            var var8 = this.ballVX - this.p1XV;
	            var var9 = this.ballVY - this.p1YV;
	            var var10;
	            if (var6 > 0 && var7 < this.p1Diam + this.ballRad && var7 > var1 && this.lastPlayerToTouch !== 1 && this.nFramesUntilStop < 0) {
	                var10 = ((var5 * var8 + var6 * var9) / var7 | 0);
	                this.ballX = this.p1X + (((this.p1Diam + this.ballRad) / 2 | 0) * var5 / var7 | 0);
	                this.ballY = this.p1Y + ((this.p1Diam + this.ballRad) * var6 / var7 | 0);
	                if (var10 <= 0) {
	                    this.ballVX += this.p1XV - (2 * var5 * var10 / var7 | 0);
	                    if (this.ballVX < -var2) {
	                        this.ballVX = -var2;
	                    }
	                    if (this.ballVX > var2) {
	                        this.ballVX = var2;
	                    }
	                    this.ballVY += this.p1YV - (2 * var6 * var10 / var7 | 0);
	                    if (this.ballVY < -var3) {
	                        this.ballVY = -var3;
	                    }
	                    if (this.ballVY > var3) {
	                        this.ballVY = var3;
	                    }
	                }
	                if (this.fServerMoved) {
	                    this.fP1Touched = true;
	                    this.fP1HitStill = this.p1YV === 0 && this.p1XV === 0;
	                    this.hitNetSinceTouched = false;
	                    this.topSpin = 2 * this.p1XV + this.p1YV;
	                    this.lastPlayerToTouch = 1;
	                }
	                this.nFramesSinceSpin = this.nBounces = 0;
	            }
	            var5 = 2 * (this.ballX - this.p2X);
	            var6 = this.ballY - this.p2Y;
	            var7 = (Math.sqrt((var5 * var5 + var6 * var6)) | 0);
	            var8 = this.ballVX - this.p2XV;
	            var9 = this.ballVY - this.p2YV;
	            if (var6 > 0 && var7 < this.p2Diam + this.ballRad && var7 > var1 && this.lastPlayerToTouch !== 2 && this.nFramesUntilStop < 0) {
	                var10 = ((var5 * var8 + var6 * var9) / var7 | 0);
	                this.ballX = this.p2X + (((this.p2Diam + this.ballRad) / 2 | 0) * var5 / var7 | 0);
	                this.ballY = this.p2Y + ((this.p2Diam + this.ballRad) * var6 / var7 | 0);
	                if (var10 <= 0) {
	                    this.ballVX += this.p2XV - (2 * var5 * var10 / var7 | 0);
	                    if (this.ballVX < -var2) {
	                        this.ballVX = -var2;
	                    }
	                    if (this.ballVX > var2) {
	                        this.ballVX = var2;
	                    }
	                    this.ballVY += this.p2YV - (2 * var6 * var10 / var7 | 0);
	                    if (this.ballVY < -var3) {
	                        this.ballVY = -var3;
	                    }
	                    if (this.ballVY > var3) {
	                        this.ballVY = var3;
	                    }
	                }
	                if (this.fServerMoved) {
	                    this.fP2Touched = true;
	                    this.fP2HitStill = this.p2YV === 0 && this.p2XV === 0;
	                    this.hitNetSinceTouched = false;
	                    this.topSpin = -2 * this.p2XV + this.p2YV;
	                    this.lastPlayerToTouch = 2;
	                }
	                this.nFramesSinceSpin = this.nBounces = 0;
	            }
	            if (this.ballX > 480 && this.ballX < 520 && this.ballY < 140) {
	                this.topSpin = 0;
	                if (this.ballVY < 0 && this.ballY > 130) {
	                    this.ballVY *= -1;
	                    this.ballY = 130;
	                    this.ballVX /= 3;
	                    this.hitNetSinceTouched = true;
	                }
	                else if (this.ballX < 500) {
	                    this.ballX = 480;
	                    this.ballVX = ((this.ballVX >= 0 ? -this.ballVX : this.ballVX) * 2 / 5 | 0);
	                    this.hitNetSinceTouched = true;
	                }
	                else {
	                    this.ballX = 520;
	                    this.ballVX = ((this.ballVX <= 0 ? -this.ballVX : this.ballVX) * 2 / 5 | 0);
	                    this.hitNetSinceTouched = true;
	                }
	            }
	        }
	        if (Math.abs(this.topSpin) > var4) {
	            this.topSpin = var4 * (this.topSpin > 0 ? 1 : -1);
	        }
	        if (this.ballY < this.ballRad + var1) {
	            var var15 = false;
	            var var17 = 1.0;
	            var var16;
	            switch ((this.courtTypes[this.courtTypeSelected])) {
	                case 0:
	                    var16 = 10;
	                    var17 = 0.7;
	                    break;
	                case 1:
	                default:
	                    var16 = 13;
	                    var17 = 0.6;
	                    break;
	                case 2:
	                    var16 = 7;
	                    var17 = 0.65;
	            }
	            this.ballY = this.ballRad + var1;
	            this.ballVY = ((-var17 * this.ballVY) | 0);
	            if (this.topSpin < 0) {
	                this.ballVY += (this.topSpin / var16 | 0);
	            }
	            else {
	                this.ballVY += (this.topSpin / (var16 * 2) | 0);
	            }
	            if (this.ballVX < 0) {
	                this.ballVX -= (this.topSpin / var16 | 0);
	            }
	            else {
	                this.ballVX += (this.topSpin / var16 | 0);
	            }
	            this.topSpin = 0;
	            if (this.ballVX < -var2) {
	                this.ballVX = -var2;
	            }
	            if (this.ballVX > var2) {
	                this.ballVX = var2;
	            }
	            ++this.nBounces;
	            var var18 = this.nBounces === 1 && (!this.fP2Touched && (this.ballX < 500 || this.ballX > 710) || !this.fP1Touched && (this.ballX > 500 || this.ballX < 290));
	            var var19 = this.nBounces > 1 || this.ballX < 90 || this.ballX > 910 || this.lastPlayerToTouch === 1 && this.ballX < 500 || this.lastPlayerToTouch === 2 && this.ballX > 500 && !var18;
	            var var20 = this.nBounces === 1 && this.hitNetSinceTouched && (this.fP1Touched && !this.fP2Touched && this.ballX > 500 && this.ballX <= 710 || this.fP2Touched && !this.fP1Touched && this.ballX >= 290 && this.ballX < 500) && !var18;
	            if ((var19 || var20 || var18) && this.nFramesUntilStop < 0) {
	                this.nFramesUntilStop = 100;
	                var var11 = false;
	                var var12 = false;
	                var var13 = false;
	                var var14 = 0;
	                if (var18) {
	                    ++this.nFaults;
	                    this.promptMsg = "Fault!";
	                    if (this.nFaults === 2) {
	                        this.promptMsg = "Double fault!";
	                        this.nFaults = 0;
	                        if (!this.fP1Touched && !this.fP2Touched && this.ballX > 500) {
	                            var14 = 1;
	                        }
	                        else if (!this.fP2Touched && !this.fP1Touched && this.ballX < 500) {
	                            var14 = 2;
	                        }
	                        else if (!this.fP2Touched && (this.ballX < 500 || this.ballX > 710)) {
	                            var14 = 2;
	                        }
	                        else if (!this.fP1Touched && (this.ballX > 500 || this.ballX < 290)) {
	                            var14 = 1;
	                        }
	                    }
	                }
	                else if (var19) {
	                    if (this.lastPlayerToTouch === 1) {
	                        if (this.ballX >= 500 && (this.nBounces !== 1 || this.ballX <= 900)) {
	                            var14 = 1;
	                        }
	                        else {
	                            var14 = 2;
	                        }
	                    }
	                    else if (this.ballX <= 500 && (this.nBounces !== 1 || this.ballX >= 100)) {
	                        var14 = 2;
	                    }
	                    else {
	                        var14 = 1;
	                    }
	                    this.nFaults = 0;
	                }
	                if (var14 === 1) {
	                    ++this.nP1PointsWon;
	                }
	                else if (var14 === 2) {
	                    ++this.nP2PointsWon;
	                }
	                if (var14 === 1 || var14 === 2) {
	                    if ((this.nP1PointsWon !== 4 || this.nP2PointsWon >= 3) && (this.nP1PointsWon < 3 || this.nP2PointsWon < 3 || this.nP1PointsWon !== this.nP2PointsWon + 2)) {
	                        if (this.nP2PointsWon === 4 && this.nP1PointsWon < 3 || this.nP2PointsWon >= 3 && this.nP1PointsWon >= 3 && this.nP2PointsWon === this.nP1PointsWon + 2) {
	                            ++this.nP2GamesWon;
	                            this.nP1PointsWon = this.nP2PointsWon = 0;
	                        }
	                    }
	                    else {
	                        ++this.nP1GamesWon;
	                        this.nP1PointsWon = this.nP2PointsWon = 0;
	                    }
	                }
	                if (this.oneplayer) {
	                    this.promptMsg = var14 === 1 ? this.slimeColText[this.p1Col] : this.field_rn_SlimeTennis_ai_128.method_rn_e_if_14();
	                }
	                else {
	                    this.promptMsg = var14 === 1 ? this.slimeColText[this.p1Col] : this.slimeColText[this.p2Col];
	                }
	                if (var20) {
	                    this.promptMsg = "Let!";
	                }
	                else if (this.nP1PointsWon + this.nP2PointsWon === 0 && var14 > 0) {
	                    if ((var14 !== 1 || this.nP1GamesWon + this.nP2GamesWon % 2 !== 0) && (var14 !== 2 || this.nP1GamesWon + this.nP2GamesWon % 2 !== 1)) {
	                        this.promptMsg = this.promptMsg + "wins the game!";
	                    }
	                    else {
	                        this.promptMsg = this.promptMsg + "breaks serve!";
	                    }
	                }
	                else if (var18) {
	                    if (this.nFaults === 0) {
	                        this.promptMsg = "Double fault!";
	                    }
	                    else {
	                        this.promptMsg = "Fault!";
	                    }
	                }
	                else if (var12) {
	                    this.promptMsg = this.promptMsg + "serves an ace!";
	                }
	                else if (var13) {
	                    this.promptMsg = this.promptMsg + "hits a winner!";
	                }
	                else if ((this.ballX <= 500 || this.fP1Touched || !this.fP2Touched) && (this.ballX > 500 || !this.fP1Touched || this.fP2Touched)) {
	                    this.promptMsg = this.promptMsg + "scores!";
	                }
	                else {
	                    this.promptMsg = this.promptMsg + "laughs at his opponent\'s inability to serve!";
	                }
	                this.method_rn_SlimeTennis_b_98();
	                this.method_rn_SlimeTennis_new_116();
	                this.method_rn_SlimeTennis_long_113();
	            }
	        }
	    }
	    method_rn_SlimeTennis_long_113() {
	        if (!this.replaying) {
	            var var1 = this.getGraphics();
	            var var2 = var1.getFontMetrics();
	            var var3 = 5;
	            var var4 = var3 * 2;
	            var var5 = var3 * 2 + var2.getAscent();
	            var var6 = var5 + var2.getAscent() + var3;
	            var var7 = this.method_rn_SlimeTennis_a_97(var2.stringWidth(this.slimeColText[this.p1Col]), var2.stringWidth(this.oneplayer ? this.field_rn_SlimeTennis_ai_128.method_rn_e_if_14() : this.slimeColText[this.p2Col]));
	            var1.setColor(this.SCOREBOX_COL);
	            var1.fillRect(var4 - var3, var5 - (var6 - var5), var7 + 2 * var3, var6 + var3);
	            var1.setColor(shims_1.Color.fromString("white"));
	            var1.drawString(this.slimeColText[this.p1Col], var4, var5);
	            var1.drawString(this.oneplayer ? this.field_rn_SlimeTennis_ai_128.method_rn_e_if_14() : this.slimeColText[this.p2Col], var4, var6);
	            var4 += var7 + 3 * var3;
	            var7 = this.method_rn_SlimeTennis_a_97(var2.stringWidth("" + this.nP1GamesWon), var2.stringWidth("" + this.nP2GamesWon));
	            var1.setColor(this.SCOREBOX_COL);
	            var1.fillRect(var4 - var3, var5 - (var6 - var5), var7 + 2 * var3, var6 + var3);
	            var1.setColor(shims_1.Color.fromString("white"));
	            var1.drawString("" + this.nP1GamesWon, var4 + var7 - var2.stringWidth("" + this.nP1GamesWon), var5);
	            var1.drawString("" + this.nP2GamesWon, var4 + var7 - var2.stringWidth("" + this.nP2GamesWon), var6);
	            var4 += var7 + 3 * var3;
	            if (this.nP1PointsWon + this.nP2PointsWon > 0) {
	                var var8 = "0";
	                var var9 = "0";
	                if (this.nP1PointsWon === 0) {
	                    var8 = "0";
	                }
	                else if (this.nP1PointsWon === 1) {
	                    var8 = "15";
	                }
	                else if (this.nP1PointsWon === 2) {
	                    var8 = "30";
	                }
	                else if (this.nP1PointsWon !== 3 && this.nP1PointsWon > this.nP2PointsWon) {
	                    if (this.nP1PointsWon > this.nP2PointsWon) {
	                        var8 = "A";
	                    }
	                }
	                else {
	                    var8 = "40";
	                }
	                if (this.nP2PointsWon === 0) {
	                    var9 = "0";
	                }
	                else if (this.nP2PointsWon === 1) {
	                    var9 = "15";
	                }
	                else if (this.nP2PointsWon === 2) {
	                    var9 = "30";
	                }
	                else if (this.nP2PointsWon !== 3 && this.nP2PointsWon > this.nP1PointsWon) {
	                    if (this.nP2PointsWon > this.nP1PointsWon) {
	                        var9 = "A";
	                    }
	                }
	                else {
	                    var9 = "40";
	                }
	                var7 = this.method_rn_SlimeTennis_a_97(var2.stringWidth(var8), var2.stringWidth(var9));
	                var1.setColor(this.SCOREBOX_COL);
	                var1.fillRect(var4 - var3, var5 - (var6 - var5), var7 + 2 * var3, var6 + var3);
	                var1.setColor(shims_1.Color.fromString("white"));
	                var1.drawString(var8, var4 + var7 - var2.stringWidth(var8), var5);
	                var1.drawString(var9, var4 + var7 - var2.stringWidth(var9), var6);
	                var var10000 = var4 + var7 + 3 * var3;
	            }
	        }
	    }
	    method_rn_SlimeTennis_a_114(var1) {
	        var var3 = "";
	        var var4 = Math.round(var1 / 10) % 100;
	        var var6 = Math.round(var1 / 1000) % 60;
	        var var8 = Math.round(var1 / 60000) % 60;
	        var var10 = Math.round(var1 / 3600000);
	        var3 = var3 + var8 + ":";
	        if (var6 < 10) {
	            var3 = var3 + "0";
	        }
	        var3 = var3 + var6;
	        return var3;
	    }
	    method_rn_SlimeTennis_case_115() {
	    }
	    method_rn_SlimeTennis_new_116() {
	        var var1;
	        if (this.buffered) {
	            var1 = this.buffer.getGraphics();
	        }
	        else {
	            var1 = this.getGraphics();
	        }
	        var1.setFont(this.screen.getFont());
	        this.screen.setColor(this.COURT_COL);
	        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 10, this.nWidth, (this.nHeight / 5 | 0) - 10);
	        this.method_rn_SlimeTennis_a_117(this.promptMsg, 0);
	    }
	    method_rn_SlimeTennis_a_117(var1, var2) {
	        var var3 = this.getGraphics();
	        var3.setFont(new shims_1.Font(var3.getFont().getName(), 1, 15));
	        var var4 = var3.getFontMetrics();
	        var3.setColor(shims_1.Color.fromString("white"));
	        var var5 = var4.stringWidth(var1);
	        var var6 = ((this.nWidth - var5) / 2 | 0);
	        var var7 = (this.nHeight * 4 / 5 | 0) + var4.getHeight() * (var2 + 1) + 10;
	        var3.drawString(var1, var6, var7);
	        this.method_rn_SlimeTennis_long_113();
	        this.method_rn_SlimeTennis_case_115();
	        this.redrawRegions.add([var6, var7, var6 + var5 + 1, var7 + var4.getHeight()]);
	    }
	    method_rn_SlimeTennis_a_118(var1) {
	        this.method_rn_SlimeTennis_a_119(var1, true);
	    }
	    method_rn_SlimeTennis_a_119(var1, var2) {
	        var var3 = var1 !== 0 ? var1 - 1 : this.replayData.length - 1;
	        this.p1OldX = this.replayData[var3][0];
	        this.p1OldY = this.replayData[var3][1];
	        this.p2OldX = this.replayData[var3][2];
	        this.p2OldY = this.replayData[var3][3];
	        this.ballOldX = this.replayData[var3][4];
	        this.ballOldY = this.replayData[var3][5];
	        this.p1X = this.replayData[var1][0];
	        this.p1Y = this.replayData[var1][1];
	        this.p2X = this.replayData[var1][2];
	        this.p2Y = this.replayData[var1][3];
	        this.ballX = this.replayData[var1][4];
	        this.ballY = this.replayData[var1][5];
	        this.ballVX = 0;
	        this.ballVY = 1;
	        if (this.ballOldX === 0 && this.ballOldY === 0) {
	            this.ballOldX = this.ballOldY = -500;
	        }
	        if (this.ballX === this.ballOldX && this.ballY === this.ballOldY) {
	            this.ballOldX = this.ballOldY = -500;
	        }
	        this.method_rn_SlimeTennis_if_111();
	        if (this.buffered) {
	            this.getGraphics().drawImage(this.buffer, 0, 0, null);
	        }
	    }
	    method_rn_SlimeTennis_i_120() {
	        this.replayData[this.replayIndex][0] = this.p1X;
	        this.replayData[this.replayIndex][1] = this.p1Y;
	        this.replayData[this.replayIndex][2] = this.p2X;
	        this.replayData[this.replayIndex][3] = this.p2Y;
	        this.replayData[this.replayIndex][4] = this.ballX;
	        this.replayData[this.replayIndex][5] = this.ballY;
	        this.replayData[this.replayIndex][6] = this.p1Col;
	        this.replayData[this.replayIndex][7] = this.p2Col;
	        ++this.replayIndex;
	        if (this.replayIndex >= this.replayData.length) {
	            this.replayIndex = 0;
	        }
	        if (this.replayStart === this.replayIndex) {
	            ++this.replayStart;
	        }
	        if (this.replayStart >= this.replayData.length) {
	            this.replayStart = 0;
	        }
	    }
	    method_rn_SlimeTennis_h_121() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.replaying = true;
	            this.method_rn_SlimeTennis_b_98();
	            var var1 = this.buffered ? this.buffer.getGraphics() : this.getGraphics();
	            var var2 = var1.getFontMetrics();
	            var var3 = var2.getHeight();
	            this.promptMsg = "Press space to continue...";
	            this.mousePressed = false;
	            var var4 = this.scoringRun;
	            this.scoringRun = this.oldScoringRun;
	            var var5 = this.replayStart;
	            var var6 = false;
	            while ((!this.mousePressed)) {
	                ++var5;
	                if (var5 >= this.replayData.length) {
	                    var5 = 0;
	                }
	                if (var5 === this.replayIndex) {
	                    var1.setColor(shims_1.Color.fromString("white"));
	                    var1.fillRect(20, 20, 20, 20);
	                    yield this.method_rn_SlimeTennis_a_126(1000, false);
	                    var6 = !var6;
	                    this.paint(var1);
	                    var1.setColor(this.SKY_COL);
	                    var1.fillRect(0, 0, this.nWidth, (this.nHeight / 20 | 0) + 22);
	                    if (this.replayIndex < this.replayStart) {
	                        var5 += this.replayData.length;
	                    }
	                    while ((var5 > this.replayStart)) {
	                        var5 -= 5;
	                        this.method_rn_SlimeTennis_b_98();
	                        var1.setColor(shims_1.Color.fromString("white"));
	                        var1.fillPolygon(new shims_1.Polygon([20, 35, 35, 50, 50, 35, 35, 20], [30, 20, 30, 20, 40, 30, 40, 30], 8));
	                        if (var5 < this.replayStart) {
	                            var5 = this.replayStart;
	                        }
	                        this.method_rn_SlimeTennis_a_119(var5 % this.replayData.length, false);
	                        yield this.method_rn_SlimeTennis_a_126(20, false);
	                    }
	                    ;
	                    this.method_rn_SlimeTennis_b_98();
	                    var1.setColor(shims_1.Color.fromString("white"));
	                    var1.fillRect(20, 20, 20, 20);
	                    this.method_rn_SlimeTennis_a_118(this.replayStart);
	                    yield this.method_rn_SlimeTennis_a_126(500, false);
	                    this.method_rn_SlimeTennis_b_98();
	                }
	                this.method_rn_SlimeTennis_a_118(var5);
	                try {
	                    shims_1.Thread.sleep(var6 ? 60 : 20);
	                }
	                catch (var8) {
	                }
	                ;
	                var1.setColor(shims_1.Color.fromString("white"));
	                var1.fillPolygon(new shims_1.Polygon([20, 35, 20], [20, 30, 40], 3));
	            }
	            ;
	            this.scoringRun = var4;
	            this.promptMsg = "";
	            this.paint(var1);
	            this.replaying = false;
	        });
	    }
	    run() {
	        return __awaiter(this, void 0, void 0, function* () {
	            this.replayIndex = this.replayStart = 0;
	            this.method_rn_SlimeTennis_new_116();
	            this.scoringRun = 0;
	            this.nP1Aces = 0;
	            this.nP2Aces = 0;
	            this.nP1Winners = 0;
	            this.nP2Winners = 0;
	            this.fP1HitStill = false;
	            this.fP2HitStill = false;
	            this.fServerMoved = false;
	            this.method_rn_SlimeTennis_long_113();
	            this.fP1Touched = this.fP2Touched = false;
	            this.hitNetSinceTouched = false;
	            this.gameOver = false;
	            var var1 = this.buffer.getGraphics();
	            this.startTime = shims_1.System.currentTimeMillis();
	            this.method_rn_SlimeTennis_b_98();
	            this.repaint();
	            while ((this.gameThread != null && !this.gameOver)) {
	                if (!this.paused) {
	                    this.p1OldX = this.p1X;
	                    this.p1OldY = this.p1Y;
	                    this.p2OldX = this.p2X;
	                    this.p2OldY = this.p2Y;
	                    this.ballOldX = this.ballX;
	                    this.ballOldY = this.ballY;
	                    this.method_rn_SlimeTennis_k_110();
	                    this.method_rn_SlimeTennis_j_112();
	                    this.method_rn_SlimeTennis_case_115();
	                    this.method_rn_SlimeTennis_long_113();
	                    this.method_rn_SlimeTennis_if_111();
	                    this.method_rn_SlimeTennis_for_99();
	                    this.method_rn_SlimeTennis_i_120();
	                    --this.nFramesUntilStop;
	                }
	                if (this.nFramesUntilStop === 0) {
	                    var var2 = shims_1.System.currentTimeMillis();
	                    this.method_rn_SlimeTennis_case_115();
	                    if (this.mousePressed) {
	                        this.method_rn_SlimeTennis_i_120();
	                        yield this.method_rn_SlimeTennis_h_121();
	                    }
	                    this.mousePressed = false;
	                    if (this.nP1GamesWon >= this.gamesToWin && this.nP1GamesWon >= this.nP2GamesWon + 2 || this.nP2GamesWon >= this.gamesToWin && this.nP2GamesWon >= this.nP1GamesWon + 2) {
	                        yield this.method_rn_SlimeTennis_a_122();
	                    }
	                    this.promptMsg = "";
	                    this.method_rn_SlimeTennis_int_100();
	                    this.method_rn_SlimeTennis_b_98();
	                    this.repaint();
	                    this.startTime += shims_1.System.currentTimeMillis() - var2;
	                    if (this.gameThread != null) {
	                        yield this.method_rn_SlimeTennis_a_126(20, true);
	                    }
	                }
	                if (this.gameThread != null) {
	                    yield this.method_rn_SlimeTennis_a_126(20, true);
	                }
	            }
	            ;
	            this.fEndGame = true;
	            this.fInPlay = false;
	            this.repaint();
	        });
	    }
	    method_rn_SlimeTennis_a_122() {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (!this.oneplayer) {
	                yield this.method_rn_SlimeTennis_a_123(this.nP1GamesWon > this.nP2GamesWon);
	            }
	            else if (this.nP1GamesWon > this.nP2GamesWon) {
	                this.gameTime = shims_1.System.currentTimeMillis() - this.startTime;
	                if (this.aiMode === 3) {
	                    this.aiMode = 4;
	                    yield this.method_rn_SlimeTennis_if_124(true);
	                }
	            }
	            else {
	                yield this.method_rn_SlimeTennis_if_124(false);
	            }
	            this.fInPlay = false;
	            this.gameThread = null;
	            this.method_rn_SlimeTennis_b_98();
	            this.repaint();
	        });
	    }
	    method_rn_SlimeTennis_a_123(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var2 = this.screen.getFontMetrics();
	            this.method_rn_SlimeTennis_long_113();
	            this.method_rn_SlimeTennis_case_115();
	            var var3;
	            if (this.buffered) {
	                var3 = this.buffer.getGraphics();
	            }
	            else {
	                var3 = this.getGraphics();
	            }
	            var var4 = var3.getFontMetrics();
	            var3.setColor(this.COURT_COL);
	            var var5 = ["Player " + (var1 ? "2" : "1") + " is insipid!", "Player " + (var1 ? "2" : "1") + " is rubbish!", "Player " + (var1 ? "1" : "2") + " wins!"];
	            var var6 = var5[((var5.length * Math.random()) | 0)];
	            var3.fillRect(((this.nWidth - var4.stringWidth(var6)) / 2 | 0) - 30, (this.nHeight / 2 | 0) - var4.getAscent() * 5, var4.stringWidth(var6) + 60, var4.getAscent() * 5 + var2.getAscent() * 2);
	            var3.setColor(shims_1.Color.fromString("white"));
	            var3.drawString(var6, ((this.nWidth - var4.stringWidth(var6)) / 2 | 0), (this.nHeight / 2 | 0) - var4.getAscent() * 3);
	            var3.setFont(this.screen.getFont());
	            var3.drawString("GAME OVER", ((this.nWidth - var2.stringWidth("GAME OVER")) / 2 | 0), (this.nHeight / 2 | 0) + var2.getAscent());
	            this.repaint();
	            yield this.method_rn_SlimeTennis_a_126(3000, false);
	            this.gameOver = true;
	        });
	    }
	    method_rn_SlimeTennis_if_124(var1) {
	        return __awaiter(this, void 0, void 0, function* () {
	            var var2 = this.screen.getFontMetrics();
	            this.method_rn_SlimeTennis_long_113();
	            this.method_rn_SlimeTennis_case_115();
	            var var3;
	            if (this.buffered) {
	                var3 = this.buffer.getGraphics();
	            }
	            else {
	                var3 = this.getGraphics();
	            }
	            var var4 = var3.getFontMetrics();
	            if (!var1) {
	                var3.setColor(this.COURT_COL);
	                var3.fillRect(((this.nWidth - this.method_rn_SlimeTennis_a_97(var4.stringWidth(this.loserText1[this.aiMode]), var4.stringWidth(this.loserText2[this.aiMode]))) / 2 | 0) - 30, (this.nHeight / 2 | 0) - var4.getAscent() * 5, this.method_rn_SlimeTennis_a_97(var4.stringWidth(this.loserText1[this.aiMode]), var4.stringWidth(this.loserText2[this.aiMode])) + 60, var4.getAscent() * 5 + var2.getAscent() * 2);
	                var3.setColor(shims_1.Color.fromString("white"));
	                var3.drawString(this.loserText1[this.aiMode], ((this.nWidth - var4.stringWidth(this.loserText1[this.aiMode])) / 2 | 0), (this.nHeight / 2 | 0) - var4.getAscent() * 3);
	                var3.drawString(this.loserText2[this.aiMode], ((this.nWidth - var4.stringWidth(this.loserText2[this.aiMode])) / 2 | 0), (this.nHeight / 2 | 0) - var4.getAscent() * 2);
	                var3.setFont(this.screen.getFont());
	                var3.drawString("GAME OVER", ((this.nWidth - var2.stringWidth("GAME OVER")) / 2 | 0), (this.nHeight / 2 | 0) + var2.getAscent());
	            }
	            else {
	                this.method_rn_SlimeTennis_a_125(var3);
	                var3.setColor(shims_1.Color.fromString("white"));
	                var3.setFont(this.screen.getFont());
	                var3.drawString("YOU WIN!", ((this.nWidth - var2.stringWidth("YOU WIN!")) / 2 | 0), (this.nHeight / 2 | 0));
	                var3.drawString("You cannot be serious! This is MY game! !", ((this.nWidth - var4.stringWidth("The Slimes bow down before the new Slime King!")) / 2 | 0), (this.nHeight / 2 | 0) + var4.getAscent());
	            }
	            if (this.buffered) {
	                this.repaint();
	            }
	            yield this.method_rn_SlimeTennis_a_126(3000, false);
	            this.gameOver = true;
	            this.method_rn_SlimeTennis_b_98();
	            this.repaint();
	        });
	    }
	    method_rn_SlimeTennis_a_125(var1) {
	    }
	    method_rn_SlimeTennis_a_126(var1, var3) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (this.gameThread != null) {
	                for (var var4 = 0; Math.round(var4) < Math.round(var1 / 20); ++var4) {
	                    try {
	                        var var10000 = this.gameThread;
	                        yield shims_1.Thread.sleep(20);
	                    }
	                    catch (var6) {
	                    }
	                    ;
	                }
	            }
	        });
	    }
	    method_rn_SlimeTennis_char_127() {
	        return (Math.pow(2.0, this.aiMode) | 0);
	    }
	    destroy() {
	        if (this.gameThread != null) {
	            this.gameThread.stop();
	            this.gameThread = null;
	        }
	    }
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = SlimeTennis;
	Class_rn_i_10.field_rn_i_if_140_$LI$();


/***/ }
/******/ ]);
//# sourceMappingURL=slime.js.map